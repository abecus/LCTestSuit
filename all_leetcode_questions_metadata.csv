questionId,title,difficulty,dislikes,likes,nAccepted,nSubmissions,accRate,topicTags,similarQuestions
1,Two Sum,Easy,760,22371,4.5M,9.6M,47.2%,"['Array', 'Hash Table']","[('3Sum', 'Medium'), ('4Sum', 'Medium'), ('Count Good Meals', 'Medium'), ('Max Number of K-Sum Pairs', 'Medium'), ('Subarray Sum Equals K', 'Medium'), ('Two Sum II - Input array is sorted', 'Easy'), ('Two Sum III - Data structure design', 'Easy'), ('Two Sum IV - Input is a BST', 'Easy'), ('Two Sum Less Than K', 'Easy')]"
2,Add Two Numbers,Medium,2902,12664,2M,5.6M,36.3%,"['Linked List', 'Math', 'Recursion']","[('Add Binary', 'Easy'), ('Add Strings', 'Easy'), ('Add Two Numbers II', 'Medium'), ('Add Two Polynomials Represented as Linked Lists', 'Medium'), ('Add to Array-Form of Integer', 'Easy'), ('Multiply Strings', 'Medium'), ('Sum of Two Integers', 'Medium')]"
3,Longest Substring Without Repeating Characters,Medium,778,15660,2.3M,7.3M,31.9%,"['Hash Table', 'Sliding Window', 'String']","[('Longest Substring with At Most K Distinct Characters', 'Medium'), ('Longest Substring with At Most Two Distinct Characters', 'Medium'), ('Maximum Erasure Value', 'Medium'), ('Subarrays with K Different Integers', 'Hard')]"
4,Median of Two Sorted Arrays,Hard,1599,11094,998.8K,3.1M,32.1%,"['Array', 'Binary Search', 'Divide and Conquer']",[]
5,Longest Palindromic Substring,Medium,733,11847,1.4M,4.4M,31.0%,"['Dynamic Programming', 'String']","[('Longest Palindromic Subsequence', 'Medium'), ('Palindrome Pairs', 'Hard'), ('Palindrome Permutation', 'Easy'), ('Palindromic Substrings', 'Medium'), ('Shortest Palindrome', 'Hard')]"
6,ZigZag Conversion,Medium,6185,2563,597.6K,1.5M,39.0%,['String'],[]
7,Reverse Integer,Easy,7705,5104,1.6M,6.2M,26.1%,['Math'],"[('Reverse Bits', 'Easy'), ('String to Integer (atoi)', 'Medium')]"
8,String to Integer (atoi),Medium,1174,423,770.1K,4.8M,15.9%,['String'],"[('Reverse Integer', 'Easy'), ('Valid Number', 'Hard')]"
9,Palindrome Number,Easy,1785,3565,1.4M,2.7M,50.7%,['Math'],"[('Palindrome Linked List', 'Easy')]"
10,Regular Expression Matching,Hard,876,6127,559.9K,2M,27.7%,"['Dynamic Programming', 'Recursion', 'String']","[('Wildcard Matching', 'Hard')]"
11,Container With Most Water,Medium,744,10430,1M,1.9M,53.0%,"['Array', 'Greedy', 'Two Pointers']","[('Trapping Rain Water', 'Hard')]"
12,Integer to Roman,Medium,3311,1945,515.2K,893.1K,57.7%,"['Hash Table', 'Math', 'String']","[('Integer to English Words', 'Hard'), ('Roman to Integer', 'Easy')]"
13,Roman to Integer,Easy,89,1080,1M,1.8M,57.4%,"['Hash Table', 'Math', 'String']","[('Integer to Roman', 'Medium')]"
14,Longest Common Prefix,Easy,2334,4665,1.1M,3M,37.0%,['String'],[]
15,3Sum,Medium,1148,11608,1.4M,4.8M,28.9%,"['Array', 'Sorting', 'Two Pointers']","[('3Sum Closest', 'Medium'), ('3Sum Smaller', 'Medium'), ('4Sum', 'Medium'), ('Two Sum', 'Easy')]"
16,3Sum Closest,Medium,183,3639,610.6K,1.3M,46.5%,"['Array', 'Sorting', 'Two Pointers']","[('3Sum', 'Medium'), ('3Sum Smaller', 'Medium')]"
17,Letter Combinations of a Phone Number,Medium,547,6616,884.8K,1.7M,50.7%,"['Backtracking', 'Hash Table', 'String']","[('Binary Watch', 'Easy'), ('Combination Sum', 'Medium'), ('Generate Parentheses', 'Medium')]"
18,4Sum,Medium,446,3718,435.6K,1.2M,35.8%,"['Array', 'Sorting', 'Two Pointers']","[('3Sum', 'Medium'), ('4Sum II', 'Medium'), ('Two Sum', 'Easy')]"
19,Remove Nth Node From End of List,Medium,329,5976,929.2K,2.5M,36.5%,"['Linked List', 'Two Pointers']","[('Delete N Nodes After M Nodes of a Linked List', 'Easy'), ('Swapping Nodes in a Linked List', 'Medium')]"
20,Valid Parentheses,Easy,332,8090,1.5M,3.8M,40.2%,"['Stack', 'String']","[('Check If Word Is Valid After Substitutions', 'Medium'), ('Generate Parentheses', 'Medium'), ('Longest Valid Parentheses', 'Hard'), ('Remove Invalid Parentheses', 'Hard')]"
21,Merge Two Sorted Lists,Easy,811,7425,1.5M,2.6M,57.1%,"['Linked List', 'Recursion']","[('Add Two Polynomials Represented as Linked Lists', 'Medium'), ('Merge Sorted Array', 'Easy'), ('Merge k Sorted Lists', 'Hard'), ('Shortest Word Distance II', 'Medium'), ('Sort List', 'Medium')]"
22,Generate Parentheses,Medium,359,8719,792.3K,1.2M,67.0%,"['Backtracking', 'Dynamic Programming', 'String']","[('Letter Combinations of a Phone Number', 'Medium'), ('Valid Parentheses', 'Easy')]"
23,Merge k Sorted Lists,Hard,367,7816,926.5K,2.1M,43.9%,"['Divide and Conquer', 'Heap (Priority Queue)', 'Linked List', 'Merge Sort']","[('Merge Two Sorted Lists', 'Easy'), ('Ugly Number II', 'Medium')]"
24,Swap Nodes in Pairs,Medium,223,4027,638.9K,1.2M,54.5%,"['Linked List', 'Recursion']","[('Reverse Nodes in k-Group', 'Hard'), ('Swapping Nodes in a Linked List', 'Medium')]"
25,Reverse Nodes in k-Group,Hard,414,4158,370.3K,795.8K,46.5%,"['Linked List', 'Recursion']","[('Swap Nodes in Pairs', 'Medium'), ('Swapping Nodes in a Linked List', 'Medium')]"
26,Remove Duplicates from Sorted Array,Easy,7458,4280,1.5M,3.2M,47.3%,"['Array', 'Two Pointers']","[('Remove Duplicates from Sorted Array II', 'Medium'), ('Remove Element', 'Easy')]"
27,Remove Element,Easy,3754,2327,908.9K,1.8M,49.9%,"['Array', 'Two Pointers']","[('Move Zeroes', 'Easy'), ('Remove Duplicates from Sorted Array', 'Easy'), ('Remove Linked List Elements', 'Easy')]"
28,Implement strStr(),Easy,2522,2602,927.5K,2.6M,35.7%,"['String', 'String Matching', 'Two Pointers']","[('Repeated Substring Pattern', 'Easy'), ('Shortest Palindrome', 'Hard')]"
29,Divide Two Integers,Medium,7307,1956,383.9K,2.3M,17.0%,"['Bit Manipulation', 'Math']",[]
30,Substring with Concatenation of All Words,Hard,1540,1363,213.5K,796.8K,26.8%,"['Hash Table', 'Sliding Window', 'String']","[('Minimum Window Substring', 'Hard')]"
31,Next Permutation,Medium,2068,6223,546K,1.6M,34.3%,"['Array', 'Two Pointers']","[('Minimum Adjacent Swaps to Reach the Kth Smallest Number', 'Medium'), ('Palindrome Permutation II', 'Medium'), ('Permutation Sequence', 'Hard'), ('Permutations', 'Medium'), ('Permutations II', 'Medium')]"
32,Longest Valid Parentheses,Hard,194,5585,391.6K,1.3M,30.2%,"['Dynamic Programming', 'Stack', 'String']","[('Valid Parentheses', 'Easy')]"
33,Search in Rotated Sorted Array,Medium,705,8568,1M,2.9M,36.5%,"['Array', 'Binary Search']","[('Find Minimum in Rotated Sorted Array', 'Medium'), ('Search in Rotated Sorted Array II', 'Medium')]"
34,Find First and Last Position of Element in Sorted Array,Medium,215,6256,759.3K,2M,38.2%,"['Array', 'Binary Search']","[('First Bad Version', 'Easy')]"
35,Search Insert Position,Easy,307,3893,867.6K,2M,42.8%,"['Array', 'Binary Search']","[('First Bad Version', 'Easy')]"
36,Valid Sudoku,Medium,581,2831,503K,975.3K,51.6%,"['Array', 'Hash Table', 'Matrix']","[('Sudoku Solver', 'Hard')]"
37,Sudoku Solver,Hard,114,3131,252.6K,519.7K,48.6%,"['Array', 'Backtracking', 'Matrix']","[('Unique Paths III', 'Hard'), ('Valid Sudoku', 'Medium')]"
38,Count and Say,Medium,1883,614,523.4K,1.1M,46.9%,['String'],"[('Encode and Decode Strings', 'Medium'), ('String Compression', 'Medium')]"
39,Combination Sum,Medium,166,6599,772.1K,1.3M,60.9%,"['Array', 'Backtracking']","[('Combination Sum II', 'Medium'), ('Combination Sum III', 'Medium'), ('Combination Sum IV', 'Medium'), ('Combinations', 'Medium'), ('Factor Combinations', 'Medium'), ('Letter Combinations of a Phone Number', 'Medium')]"
40,Combination Sum II,Medium,94,3124,427.9K,837.9K,51.1%,"['Array', 'Backtracking']","[('Combination Sum', 'Medium')]"
41,First Missing Positive,Hard,1057,6277,511.2K,1.5M,34.6%,"['Array', 'Hash Table']","[('Couples Holding Hands', 'Hard'), ('Find All Numbers Disappeared in an Array', 'Easy'), ('Find the Duplicate Number', 'Medium'), ('Missing Number', 'Easy')]"
42,Trapping Rain Water,Hard,177,12412,791.8K,1.5M,52.4%,"['Array', 'Dynamic Programming', 'Monotonic Stack', 'Stack', 'Two Pointers']","[('Container With Most Water', 'Medium'), ('Pour Water', 'Medium'), ('Product of Array Except Self', 'Medium'), ('Trapping Rain Water II', 'Hard')]"
43,Multiply Strings,Medium,1093,2739,386.4K,1.1M,35.6%,"['Math', 'Simulation', 'String']","[('Add Binary', 'Easy'), ('Add Strings', 'Easy'), ('Add Two Numbers', 'Medium'), ('Plus One', 'Easy')]"
44,Wildcard Matching,Hard,155,3288,316.2K,1.2M,25.8%,"['Dynamic Programming', 'Greedy', 'Recursion', 'String']","[('Regular Expression Matching', 'Hard')]"
45,Jump Game II,Medium,201,4918,388.7K,1.2M,33.4%,"['Array', 'Dynamic Programming', 'Greedy']","[('Jump Game', 'Medium'), ('Jump Game III', 'Medium'), ('Jump Game VII', 'Medium')]"
46,Permutations,Medium,139,6683,857.8K,1.3M,68.3%,"['Array', 'Backtracking']","[('Combinations', 'Medium'), ('Next Permutation', 'Medium'), ('Permutation Sequence', 'Hard'), ('Permutations II', 'Medium')]"
47,Permutations II,Medium,81,3290,476K,938K,50.7%,"['Array', 'Backtracking']","[('Next Permutation', 'Medium'), ('Number of Squareful Arrays', 'Hard'), ('Palindrome Permutation II', 'Medium'), ('Permutations', 'Medium')]"
48,Rotate Image,Medium,363,5596,625.1K,1M,62.3%,"['Array', 'Math', 'Matrix']","[('Determine Whether Matrix Can Be Obtained By Rotation', 'Easy')]"
49,Group Anagrams,Medium,240,5934,970.3K,1.6M,60.7%,"['Hash Table', 'Sorting', 'String']","[('Group Shifted Strings', 'Medium'), ('Valid Anagram', 'Easy')]"
51,N-Queens,Hard,116,3587,281.8K,534.8K,52.7%,"['Array', 'Backtracking']","[('Grid Illumination', 'Hard'), ('N-Queens II', 'Hard')]"
52,N-Queens II,Hard,193,1059,180.7K,287.1K,63.0%,['Backtracking'],"[('N-Queens', 'Hard')]"
53,Maximum Subarray,Easy,617,12970,1.5M,3.1M,48.2%,"['Array', 'Divide and Conquer', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock', 'Easy'), ('Degree of an Array', 'Easy'), ('Longest Turbulent Subarray', 'Medium'), ('Maximum Absolute Sum of Any Subarray', 'Medium'), ('Maximum Product Subarray', 'Medium'), ('Maximum Subarray Sum After One Operation', 'Medium')]"
54,Spiral Matrix,Medium,687,4270,525.5K,1.4M,37.5%,"['Array', 'Matrix', 'Simulation']","[('Spiral Matrix II', 'Medium'), ('Spiral Matrix III', 'Medium')]"
55,Jump Game,Medium,442,6930,671.1K,1.9M,35.7%,"['Array', 'Dynamic Programming', 'Greedy']","[('Jump Game II', 'Medium'), ('Jump Game III', 'Medium'), ('Jump Game VII', 'Medium')]"
56,Merge Intervals,Medium,399,8202,956.2K,2.3M,42.1%,"['Array', 'Sorting']","[('Add Bold Tag in String', 'Medium'), ('Employee Free Time', 'Hard'), ('Insert Interval', 'Medium'), ('Interval List Intersections', 'Medium'), ('Meeting Rooms', 'Easy'), ('Meeting Rooms II', 'Medium'), ('Partition Labels', 'Medium'), ('Range Module', 'Hard'), ('Teemo Attacking', 'Easy')]"
57,Insert Interval,Medium,261,3205,374.5K,1M,35.9%,['Array'],"[('Merge Intervals', 'Medium'), ('Range Module', 'Hard')]"
58,Length of Last Word,Easy,3350,1221,531.1K,1.6M,33.7%,['String'],[]
59,Spiral Matrix II,Medium,134,1808,260.1K,440.3K,59.1%,"['Array', 'Matrix', 'Simulation']","[('Spiral Matrix', 'Medium'), ('Spiral Matrix III', 'Medium')]"
60,Permutation Sequence,Hard,372,2492,232.7K,579.5K,40.2%,"['Math', 'Recursion']","[('Next Permutation', 'Medium'), ('Permutations', 'Medium')]"
61,Rotate List,Medium,1172,2701,398.6K,1.2M,32.4%,"['Linked List', 'Two Pointers']","[('Rotate Array', 'Medium'), ('Split Linked List in Parts', 'Medium')]"
62,Unique Paths,Medium,250,5635,675.7K,1.2M,57.1%,"['Combinatorics', 'Dynamic Programming', 'Math']","[('Dungeon Game', 'Hard'), ('Minimum Path Sum', 'Medium'), ('Unique Paths II', 'Medium')]"
63,Unique Paths II,Medium,305,3170,401.5K,1.1M,36.1%,"['Array', 'Dynamic Programming', 'Matrix']","[('Unique Paths', 'Medium'), ('Unique Paths III', 'Hard')]"
64,Minimum Path Sum,Medium,86,5122,562.1K,983.7K,57.1%,"['Array', 'Dynamic Programming', 'Matrix']","[('Cherry Pickup', 'Hard'), ('Dungeon Game', 'Hard'), ('Unique Paths', 'Medium')]"
65,Valid Number,Hard,362,180,222.2K,1.3M,16.8%,['String'],"[('String to Integer (atoi)', 'Medium')]"
66,Plus One,Easy,3394,2564,882.9K,2.1M,42.1%,"['Array', 'Math']","[('Add Binary', 'Easy'), ('Add to Array-Form of Integer', 'Easy'), ('Multiply Strings', 'Medium'), ('Plus One Linked List', 'Medium')]"
67,Add Binary,Easy,369,3029,631.8K,1.3M,48.0%,"['Bit Manipulation', 'Math', 'Simulation', 'String']","[('Add Two Numbers', 'Medium'), ('Add to Array-Form of Integer', 'Easy'), ('Multiply Strings', 'Medium'), ('Plus One', 'Easy')]"
68,Text Justification,Hard,2154,1168,183.2K,584.1K,31.4%,"['Simulation', 'String']","[('Rearrange Spaces Between Words', 'Easy')]"
70,Climbing Stairs,Easy,223,7187,1M,2.1M,49.1%,"['Dynamic Programming', 'Math', 'Memoization']","[('Fibonacci Number', 'Easy'), ('Min Cost Climbing Stairs', 'Easy'), ('N-th Tribonacci Number', 'Easy')]"
71,Simplify Path,Medium,154,547,289.7K,817.3K,35.4%,"['Stack', 'String']",[]
72,Edit Distance,Hard,72,6059,372.2K,775.2K,48.0%,"['Dynamic Programming', 'String']","[('Delete Operation for Two Strings', 'Medium'), ('Minimum ASCII Delete Sum for Two Strings', 'Medium'), ('One Edit Distance', 'Medium'), ('Uncrossed Lines', 'Medium')]"
73,Set Matrix Zeroes,Medium,388,3841,455.4K,1M,45.2%,"['Array', 'Hash Table', 'Matrix']","[('Game of Life', 'Medium')]"
74,Search a 2D Matrix,Medium,208,3752,476.8K,1.2M,39.1%,"['Array', 'Binary Search', 'Matrix']","[('Search a 2D Matrix II', 'Medium')]"
75,Sort Colors,Medium,325,5949,716.8K,1.4M,50.9%,"['Array', 'Sorting', 'Two Pointers']","[('Sort List', 'Medium'), ('Wiggle Sort', 'Medium'), ('Wiggle Sort II', 'Medium')]"
76,Minimum Window Substring,Hard,467,7160,561.5K,1.5M,36.8%,"['Hash Table', 'Sliding Window', 'String']","[('Minimum Size Subarray Sum', 'Medium'), ('Minimum Window Subsequence', 'Hard'), ('Permutation in String', 'Medium'), ('Sliding Window Maximum', 'Hard'), ('Smallest Range Covering Elements from K Lists', 'Hard'), ('Substring with Concatenation of All Words', 'Hard')]"
77,Combinations,Medium,88,2502,382.8K,647.1K,59.2%,"['Array', 'Backtracking']","[('Combination Sum', 'Medium'), ('Permutations', 'Medium')]"
78,Subsets,Medium,118,6339,805.4K,1.2M,66.8%,"['Array', 'Backtracking', 'Bit Manipulation']","[('Generalized Abbreviation', 'Medium'), ('Letter Case Permutation', 'Medium'), ('Subsets II', 'Medium')]"
79,Word Search,Medium,252,6189,698.1K,1.8M,37.9%,"['Array', 'Backtracking', 'Matrix']","[('Word Search II', 'Hard')]"
80,Remove Duplicates from Sorted Array II,Medium,817,2032,339.1K,721.8K,47.0%,"['Array', 'Two Pointers']","[('Remove Duplicates from Sorted Array', 'Easy')]"
81,Search in Rotated Sorted Array II,Medium,601,2350,316.7K,934.1K,33.9%,"['Array', 'Binary Search']","[('Search in Rotated Sorted Array', 'Medium')]"
82,Remove Duplicates from Sorted List II,Medium,129,3197,344.2K,858K,40.1%,"['Linked List', 'Two Pointers']","[('Remove Duplicates From an Unsorted Linked List', 'Medium'), ('Remove Duplicates from Sorted List', 'Easy')]"
83,Remove Duplicates from Sorted List,Easy,154,2824,624.2K,1.3M,47.1%,['Linked List'],"[('Remove Duplicates From an Unsorted Linked List', 'Medium'), ('Remove Duplicates from Sorted List II', 'Medium')]"
84,Largest Rectangle in Histogram,Hard,111,6451,379.7K,995.5K,38.1%,"['Array', 'Monotonic Stack', 'Stack']","[('Maximal Rectangle', 'Hard'), ('Maximum Score of a Good Subarray', 'Hard')]"
85,Maximal Rectangle,Hard,92,4640,238.4K,591.7K,40.3%,"['Array', 'Dynamic Programming', 'Matrix', 'Monotonic Stack', 'Stack']","[('Largest Rectangle in Histogram', 'Hard'), ('Maximal Square', 'Medium')]"
86,Partition List,Medium,424,2496,288.2K,632.8K,45.5%,"['Linked List', 'Two Pointers']",[]
87,Scramble String,Hard,843,938,128.2K,366.6K,35.0%,"['Dynamic Programming', 'String']",[]
88,Merge Sorted Array,Easy,58,433,928.5K,2.2M,41.3%,"['Array', 'Sorting', 'Two Pointers']","[('Interval List Intersections', 'Medium'), ('Merge Two Sorted Lists', 'Easy'), ('Squares of a Sorted Array', 'Easy')]"
89,Gray Code,Medium,2018,1102,207.8K,389.3K,53.4%,"['Backtracking', 'Bit Manipulation', 'Math']","[('1-bit and 2-bit Characters', 'Easy')]"
90,Subsets II,Medium,114,2846,359K,719.5K,49.9%,"['Array', 'Backtracking', 'Bit Manipulation']","[('Subsets', 'Medium')]"
91,Decode Ways,Medium,3510,4719,591.3K,2.1M,27.6%,"['Dynamic Programming', 'String']","[('Decode Ways II', 'Hard')]"
92,Reverse Linked List II,Medium,219,4264,386.6K,921.8K,41.9%,['Linked List'],"[('Reverse Linked List', 'Easy')]"
93,Restore IP Addresses,Medium,579,1909,243.4K,629.4K,38.7%,"['Backtracking', 'String']","[('IP to CIDR', 'Medium')]"
94,Binary Tree Inorder Traversal,Easy,222,5131,1M,1.6M,67.4%,"['Binary Tree', 'Depth-First Search', 'Stack', 'Tree']","[('Binary Search Tree Iterator', 'Medium'), ('Binary Tree Postorder Traversal', 'Easy'), ('Binary Tree Preorder Traversal', 'Easy'), ('Closest Binary Search Tree Value II', 'Hard'), ('Convert Binary Search Tree to Sorted Doubly Linked List', 'Medium'), ('Inorder Successor in BST', 'Medium'), ('Kth Smallest Element in a BST', 'Medium'), ('Minimum Distance Between BST Nodes', 'Easy'), ('Validate Binary Search Tree', 'Medium')]"
95,Unique Binary Search Trees II,Medium,220,3300,238.1K,539.5K,44.1%,"['Backtracking', 'Binary Search Tree', 'Binary Tree', 'Dynamic Programming', 'Tree']","[('Different Ways to Add Parentheses', 'Medium'), ('Unique Binary Search Trees', 'Medium')]"
96,Unique Binary Search Trees,Medium,183,4963,376.2K,680K,55.3%,"['Binary Search Tree', 'Binary Tree', 'Dynamic Programming', 'Math', 'Tree']","[('Unique Binary Search Trees II', 'Medium')]"
97,Interleaving String,Medium,140,2784,216.6K,643.4K,33.7%,"['Dynamic Programming', 'String']",[]
98,Validate Binary Search Tree,Medium,725,6617,1M,3.5M,29.3%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy'), ('Find Mode in Binary Search Tree', 'Easy')]"
99,Recover Binary Search Tree,Medium,105,2763,221.7K,508K,43.6%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']",[]
100,Same Tree,Easy,92,3561,758.9K,1.4M,54.5%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
101,Symmetric Tree,Easy,174,6650,937.2K,1.9M,49.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
102,Binary Tree Level Order Traversal,Medium,113,5214,899.6K,1.5M,58.1%,"['Binary Tree', 'Breadth-First Search', 'Tree']","[('Average of Levels in Binary Tree', 'Easy'), ('Binary Tree Level Order Traversal II', 'Medium'), ('Binary Tree Vertical Order Traversal', 'Medium'), ('Binary Tree Zigzag Level Order Traversal', 'Medium'), ('Cousins in Binary Tree', 'Easy'), ('Minimum Depth of Binary Tree', 'Easy'), ('N-ary Tree Level Order Traversal', 'Medium')]"
103,Binary Tree Zigzag Level Order Traversal,Medium,132,3799,539.2K,1.1M,51.2%,"['Binary Tree', 'Breadth-First Search', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium')]"
104,Maximum Depth of Binary Tree,Easy,102,4314,1.2M,1.7M,69.1%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Balanced Binary Tree', 'Easy'), ('Maximum Depth of N-ary Tree', 'Easy'), ('Minimum Depth of Binary Tree', 'Easy'), ('Time Needed to Inform All Employees', 'Medium')]"
105,Construct Binary Tree from Preorder and Inorder Traversal,Medium,144,5909,540.7K,999.8K,54.1%,"['Array', 'Binary Tree', 'Divide and Conquer', 'Hash Table', 'Tree']","[('Construct Binary Tree from Inorder and Postorder Traversal', 'Medium')]"
106,Construct Binary Tree from Inorder and Postorder Traversal,Medium,57,2937,310.8K,605.9K,51.3%,"['Array', 'Binary Tree', 'Divide and Conquer', 'Hash Table', 'Tree']","[('Construct Binary Tree from Preorder and Inorder Traversal', 'Medium')]"
107,Binary Tree Level Order Traversal II,Medium,256,2323,433.3K,770.1K,56.3%,"['Binary Tree', 'Breadth-First Search', 'Tree']","[('Average of Levels in Binary Tree', 'Easy'), ('Binary Tree Level Order Traversal', 'Medium')]"
108,Convert Sorted Array to Binary Search Tree,Easy,293,4281,560.3K,902K,62.1%,"['Array', 'Binary Search Tree', 'Binary Tree', 'Divide and Conquer', 'Tree']","[('Convert Sorted List to Binary Search Tree', 'Medium')]"
109,Convert Sorted List to Binary Search Tree,Medium,102,3440,319.1K,606.2K,52.6%,"['Binary Search Tree', 'Binary Tree', 'Divide and Conquer', 'Linked List', 'Tree']","[('Convert Sorted Array to Binary Search Tree', 'Easy')]"
110,Balanced Binary Tree,Easy,242,3858,596.5K,1.3M,45.3%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Maximum Depth of Binary Tree', 'Easy')]"
111,Minimum Depth of Binary Tree,Easy,842,2685,586.5K,1.4M,40.5%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium'), ('Maximum Depth of Binary Tree', 'Easy')]"
112,Path Sum,Easy,643,3462,650.4K,1.5M,43.2%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Maximum Path Sum', 'Hard'), ('Path Sum II', 'Medium'), ('Path Sum III', 'Medium'), ('Path Sum IV', 'Medium'), ('Sum Root to Leaf Numbers', 'Medium')]"
113,Path Sum II,Medium,88,3063,434.3K,859.8K,50.5%,"['Backtracking', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Paths', 'Easy'), ('Path Sum', 'Easy'), ('Path Sum III', 'Medium'), ('Path Sum IV', 'Medium')]"
114,Flatten Binary Tree to Linked List,Medium,425,4829,475.5K,878.5K,54.1%,"['Binary Tree', 'Depth-First Search', 'Linked List', 'Stack', 'Tree']","[('Correct a Binary Tree', 'Medium'), ('Flatten a Multilevel Doubly Linked List', 'Medium')]"
115,Distinct Subsequences,Hard,81,2168,171.1K,422.8K,40.5%,"['Dynamic Programming', 'String']",[]
116,Populating Next Right Pointers in Each Node,Medium,174,3769,516.4K,1M,50.9%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Right Side View', 'Medium'), ('Populating Next Right Pointers in Each Node II', 'Medium')]"
117,Populating Next Right Pointers in Each Node II,Medium,203,2627,347.1K,802.9K,43.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Populating Next Right Pointers in Each Node', 'Medium')]"
120,Triangle,Medium,331,3331,325.9K,686.5K,47.5%,"['Array', 'Dynamic Programming']",[]
121,Best Time to Buy and Sell Stock,Easy,390,9416,1.4M,2.7M,52.2%,"['Array', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock II', 'Easy'), ('Best Time to Buy and Sell Stock III', 'Hard'), ('Best Time to Buy and Sell Stock IV', 'Hard'), ('Best Time to Buy and Sell Stock with Cooldown', 'Medium'), ('Maximum Subarray', 'Easy')]"
122,Best Time to Buy and Sell Stock II,Easy,2097,4664,875.2K,1.5M,59.5%,"['Array', 'Dynamic Programming', 'Greedy']","[('Best Time to Buy and Sell Stock', 'Easy'), ('Best Time to Buy and Sell Stock III', 'Hard'), ('Best Time to Buy and Sell Stock IV', 'Hard'), ('Best Time to Buy and Sell Stock with Cooldown', 'Medium'), ('Best Time to Buy and Sell Stock with Transaction Fee', 'Medium')]"
123,Best Time to Buy and Sell Stock III,Hard,93,3934,303.3K,743.4K,40.8%,"['Array', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock', 'Easy'), ('Best Time to Buy and Sell Stock II', 'Easy'), ('Best Time to Buy and Sell Stock IV', 'Hard'), ('Maximum Sum of 3 Non-Overlapping Subarrays', 'Hard')]"
124,Binary Tree Maximum Path Sum,Hard,419,6279,537.7K,1.5M,36.1%,"['Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']","[('Longest Univalue Path', 'Medium'), ('Path Sum', 'Easy'), ('Path Sum IV', 'Medium'), ('Sum Root to Leaf Numbers', 'Medium'), ('Time Needed to Inform All Employees', 'Medium')]"
125,Valid Palindrome,Easy,4036,2194,909.1K,2.3M,39.2%,"['String', 'Two Pointers']","[('Palindrome Linked List', 'Easy'), ('Valid Palindrome II', 'Easy')]"
126,Word Ladder II,Hard,304,2663,235.4K,966.2K,24.4%,"['Backtracking', 'Breadth-First Search', 'Hash Table', 'String']","[('Word Ladder', 'Hard')]"
127,Word Ladder,Hard,1454,5392,603K,1.8M,32.9%,"['Breadth-First Search', 'Hash Table', 'String']","[('Minimum Genetic Mutation', 'Medium'), ('Word Ladder II', 'Hard')]"
128,Longest Consecutive Sequence,Medium,278,6046,460.9K,973K,47.4%,"['Array', 'Hash Table', 'Union Find']","[('Binary Tree Longest Consecutive Sequence', 'Medium')]"
129,Sum Root to Leaf Numbers,Medium,64,2532,344.7K,658.7K,52.3%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Maximum Path Sum', 'Hard'), ('Path Sum', 'Easy'), ('Smallest String Starting From Leaf', 'Medium')]"
130,Surrounded Regions,Medium,829,3061,313.7K,1M,30.6%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']","[('Number of Islands', 'Medium'), ('Walls and Gates', 'Medium')]"
131,Palindrome Partitioning,Medium,122,3854,330.7K,612.1K,54.0%,"['Backtracking', 'Dynamic Programming', 'String']","[('Palindrome Partitioning II', 'Hard'), ('Palindrome Partitioning IV', 'Hard')]"
132,Palindrome Partitioning II,Hard,59,2042,161K,509.5K,31.6%,"['Dynamic Programming', 'String']","[('Palindrome Partitioning', 'Medium'), ('Palindrome Partitioning IV', 'Hard')]"
133,Clone Graph,Medium,1797,3376,496.2K,1.2M,41.3%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Hash Table']","[('Clone Binary Tree With Random Pointer', 'Medium'), ('Clone N-ary Tree', 'Medium'), ('Copy List with Random Pointer', 'Medium')]"
134,Gas Station,Medium,453,3372,298.6K,706.4K,42.3%,"['Array', 'Greedy']",[]
135,Candy,Hard,218,1969,179.7K,510.6K,35.2%,"['Array', 'Greedy']",[]
136,Single Number,Easy,215,6671,1.2M,1.8M,67.2%,"['Array', 'Bit Manipulation']","[('Find the Difference', 'Easy'), ('Find the Duplicate Number', 'Medium'), ('Missing Number', 'Easy'), ('Single Number II', 'Medium'), ('Single Number III', 'Medium')]"
137,Single Number II,Medium,415,2831,296.9K,542.4K,54.7%,"['Array', 'Bit Manipulation']","[('Single Number', 'Easy'), ('Single Number III', 'Medium')]"
138,Copy List with Random Pointer,Medium,845,5587,593.5K,1.4M,42.8%,"['Hash Table', 'Linked List']","[('Clone Binary Tree With Random Pointer', 'Medium'), ('Clone Graph', 'Medium'), ('Clone N-ary Tree', 'Medium')]"
139,Word Break,Medium,340,7191,802K,1.9M,42.5%,"['Dynamic Programming', 'Hash Table', 'Memoization', 'String', 'Trie']","[('Word Break II', 'Hard')]"
140,Word Break II,Hard,447,3442,342.7K,926.3K,37.0%,"['Backtracking', 'Dynamic Programming', 'Hash Table', 'Memoization', 'String', 'Trie']","[('Concatenated Words', 'Hard'), ('Word Break', 'Medium')]"
141,Linked List Cycle,Easy,639,4937,974.6K,2.2M,43.6%,"['Hash Table', 'Linked List', 'Two Pointers']","[('Happy Number', 'Easy'), ('Linked List Cycle II', 'Medium')]"
142,Linked List Cycle II,Medium,328,4579,477.1K,1.2M,40.8%,"['Hash Table', 'Linked List', 'Two Pointers']","[('Find the Duplicate Number', 'Medium'), ('Linked List Cycle', 'Easy')]"
143,Reorder List,Medium,155,3472,341K,806.3K,42.3%,"['Linked List', 'Recursion', 'Stack', 'Two Pointers']",[]
144,Binary Tree Preorder Traversal,Easy,92,2501,674.6K,1.1M,58.8%,"['Binary Tree', 'Depth-First Search', 'Stack', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy'), ('N-ary Tree Preorder Traversal', 'Easy'), ('Verify Preorder Sequence in Binary Search Tree', 'Medium')]"
145,Binary Tree Postorder Traversal,Easy,119,2810,516.3K,870.1K,59.3%,"['Binary Tree', 'Depth-First Search', 'Stack', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy'), ('N-ary Tree Postorder Traversal', 'Easy')]"
146,LRU Cache,Medium,361,9112,802.4K,2.2M,37.2%,"['Design', 'Doubly-Linked List', 'Hash Table', 'Linked List']","[('Design Compressed String Iterator', 'Easy'), ('Design In-Memory File System', 'Hard'), ('Design Most Recently Used Queue', 'Medium'), ('LFU Cache', 'Hard')]"
147,Insertion Sort List,Medium,700,1159,237K,522.8K,45.3%,"['Linked List', 'Sorting']","[('Insert into a Sorted Circular Linked List', 'Medium'), ('Sort List', 'Medium')]"
148,Sort List,Medium,183,4615,370.6K,777.2K,47.7%,"['Divide and Conquer', 'Linked List', 'Merge Sort', 'Sorting', 'Two Pointers']","[('Insertion Sort List', 'Medium'), ('Merge Two Sorted Lists', 'Easy'), ('Sort Colors', 'Medium')]"
149,Max Points on a Line,Hard,74,295,190.1K,1M,18.4%,"['Geometry', 'Hash Table', 'Math']","[('Line Reflection', 'Medium')]"
150,Evaluate Reverse Polish Notation,Medium,550,1913,312.7K,786.1K,39.8%,"['Array', 'Math', 'Stack']","[('Basic Calculator', 'Hard'), ('Expression Add Operators', 'Hard')]"
151,Reverse Words in a String,Medium,3339,1807,550.2K,2.2M,25.0%,"['String', 'Two Pointers']","[('Reverse Words in a String II', 'Medium')]"
152,Maximum Product Subarray,Medium,239,7418,506.4K,1.5M,33.2%,"['Array', 'Dynamic Programming']","[('House Robber', 'Medium'), ('Maximum Product of Three Numbers', 'Easy'), ('Maximum Subarray', 'Easy'), ('Product of Array Except Self', 'Medium'), ('Subarray Product Less Than K', 'Medium')]"
153,Find Minimum in Rotated Sorted Array,Medium,312,3849,626.9K,1.3M,46.7%,"['Array', 'Binary Search']","[('Find Minimum in Rotated Sorted Array II', 'Hard'), ('Search in Rotated Sorted Array', 'Medium')]"
154,Find Minimum in Rotated Sorted Array II,Hard,284,1705,256.1K,606K,42.3%,"['Array', 'Binary Search']","[('Find Minimum in Rotated Sorted Array', 'Medium')]"
155,Min Stack,Easy,493,5435,755.2K,1.6M,47.5%,"['Design', 'Stack']","[('Max Stack', 'Easy'), ('Sliding Window Maximum', 'Hard')]"
156,Binary Tree Upside Down,Medium,1122,354,70.3K,122.8K,57.2%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Reverse Linked List', 'Easy')]"
157,Read N Characters Given Read4,Easy,2502,420,144.7K,376K,38.5%,"['Interactive', 'Simulation', 'String']","[('Read N Characters Given Read4 II - Call multiple times', 'Hard')]"
158,Read N Characters Given Read4 II - Call multiple times,Hard,1413,680,141.3K,367.8K,38.4%,"['Interactive', 'Simulation', 'String']","[('Read N Characters Given Read4', 'Easy')]"
159,Longest Substring with At Most Two Distinct Characters,Medium,21,1373,151.8K,297K,51.1%,"['Hash Table', 'Sliding Window', 'String']","[('Longest Substring Without Repeating Characters', 'Medium'), ('Longest Substring with At Most K Distinct Characters', 'Medium'), ('Sliding Window Maximum', 'Hard'), ('Subarrays with K Different Integers', 'Hard')]"
160,Intersection of Two Linked Lists,Easy,682,6107,708K,1.5M,45.9%,"['Hash Table', 'Linked List', 'Two Pointers']","[('Minimum Index Sum of Two Lists', 'Easy')]"
161,One Edit Distance,Medium,138,896,145K,434.3K,33.4%,"['String', 'Two Pointers']","[('Edit Distance', 'Hard')]"
162,Find Peak Element,Medium,2801,3251,520.9K,1.2M,44.3%,"['Array', 'Binary Search']","[('Find a Peak Element II', 'Medium'), ('Peak Index in a Mountain Array', 'Easy')]"
163,Missing Ranges,Easy,2173,572,127.8K,450.1K,28.4%,['Array'],"[('Summary Ranges', 'Easy')]"
164,Maximum Gap,Hard,244,1529,120.5K,302.6K,39.8%,"['Array', 'Bucket Sort', 'Radix Sort', 'Sorting']",[]
165,Compare Version Numbers,Medium,1739,858,249.2K,799.1K,31.2%,"['String', 'Two Pointers']",[]
166,Fraction to Recurring Decimal,Medium,2391,1231,156.8K,691.2K,22.7%,"['Hash Table', 'Math', 'String']",[]
167,Two Sum II - Input array is sorted,Easy,755,2929,603.9K,1.1M,56.3%,"['Array', 'Binary Search', 'Two Pointers']","[('Two Sum', 'Easy'), ('Two Sum IV - Input is a BST', 'Easy'), ('Two Sum Less Than K', 'Easy')]"
168,Excel Sheet Column Title,Easy,320,1827,263.9K,815.5K,32.4%,"['Math', 'String']","[('Excel Sheet Column Number', 'Easy')]"
169,Majority Element,Easy,271,5639,886.7K,1.5M,60.7%,"['Array', 'Counting', 'Divide and Conquer', 'Hash Table', 'Sorting']","[('Check If a Number Is Majority Element in a Sorted Array', 'Easy'), ('Majority Element II', 'Medium')]"
170,Two Sum III - Data structure design,Easy,315,428,104K,294.1K,35.4%,"['Array', 'Data Stream', 'Design', 'Hash Table', 'Two Pointers']","[('Two Sum', 'Easy'), ('Two Sum IV - Input is a BST', 'Easy'), ('Unique Word Abbreviation', 'Medium')]"
171,Excel Sheet Column Number,Easy,211,1820,390.3K,676K,57.7%,"['Math', 'String']","[('Excel Sheet Column Title', 'Easy')]"
172,Factorial Trailing Zeroes,Easy,1453,1443,271.6K,690.7K,39.3%,['Math'],"[('Number of Digit One', 'Hard'), ('Preimage Size of Factorial Zeroes Function', 'Hard')]"
173,Binary Search Tree Iterator,Medium,327,3889,423.6K,686.3K,61.7%,"['Binary Search Tree', 'Binary Tree', 'Design', 'Iterator', 'Stack', 'Tree']","[('Binary Search Tree Iterator II', 'Medium'), ('Binary Tree Inorder Traversal', 'Easy'), ('Flatten 2D Vector', 'Medium'), ('Inorder Successor in BST', 'Medium'), ('Peeking Iterator', 'Medium'), ('Zigzag Iterator', 'Medium')]"
174,Dungeon Game,Hard,54,2577,131K,387.1K,33.8%,"['Array', 'Dynamic Programming', 'Matrix']","[('Cherry Pickup', 'Hard'), ('Minimum Path Sum', 'Medium'), ('Unique Paths', 'Medium')]"
175,Combine Two Tables,Easy,163,1314,391.6K,593.1K,66.0%,['Database'],"[('Employee Bonus', 'Easy')]"
176,Second Highest Salary,Easy,595,1239,352.7K,1M,34.1%,['Database'],[]
177,Nth Highest Salary,Medium,511,689,175.2K,513.1K,34.2%,['Database'],[]
178,Rank Scores,Medium,176,978,165.4K,313.6K,52.8%,['Database'],[]
179,Largest Number,Medium,330,3356,259.1K,826.8K,31.3%,"['Greedy', 'Sorting', 'String']",[]
180,Consecutive Numbers,Medium,149,657,137.5K,316.8K,43.4%,['Database'],[]
181,Employees Earning More Than Their Managers,Easy,118,893,257.5K,412.5K,62.4%,['Database'],[]
182,Duplicate Emails,Easy,39,711,257.3K,389.5K,66.0%,['Database'],[]
183,Customers Who Never Order,Easy,58,580,246.4K,419.2K,58.8%,['Database'],[]
184,Department Highest Salary,Medium,145,714,161.9K,383.4K,42.2%,['Database'],"[('Highest Grade For Each Student', 'Medium')]"
185,Department Top Three Salaries,Hard,167,788,121.3K,291.3K,41.6%,['Database'],[]
186,Reverse Words in a String II,Medium,122,653,110.8K,232.4K,47.7%,"['String', 'Two Pointers']","[('Reverse Words in a String', 'Medium'), ('Rotate Array', 'Medium')]"
187,Repeated DNA Sequences,Medium,343,1297,215.5K,511.1K,42.2%,"['Bit Manipulation', 'Hash Function', 'Hash Table', 'Rolling Hash', 'Sliding Window', 'String']",[]
188,Best Time to Buy and Sell Stock IV,Hard,144,2680,191.4K,620.3K,30.9%,"['Array', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock', 'Easy'), ('Best Time to Buy and Sell Stock II', 'Easy'), ('Best Time to Buy and Sell Stock III', 'Hard')]"
189,Rotate Array,Medium,960,5004,721.1K,2M,36.9%,"['Array', 'Math', 'Two Pointers']","[('Reverse Words in a String II', 'Medium'), ('Rotate List', 'Medium')]"
190,Reverse Bits,Easy,611,1924,356.6K,814.2K,43.8%,"['Bit Manipulation', 'Divide and Conquer']","[('Number of 1 Bits', 'Easy'), ('Reverse Integer', 'Easy')]"
191,Number of 1 Bits,Easy,656,1654,516.9K,933.2K,55.4%,['Bit Manipulation'],"[('Binary Number with Alternating Bits', 'Easy'), ('Binary Watch', 'Easy'), ('Counting Bits', 'Easy'), ('Hamming Distance', 'Easy'), ('Power of Two', 'Easy'), ('Prime Number of Set Bits in Binary Representation', 'Easy'), ('Reverse Bits', 'Easy')]"
192,Word Frequency,Medium,190,275,32.6K,127.7K,25.5%,['Shell'],"[('Top K Frequent Elements', 'Medium')]"
193,Valid Phone Numbers,Easy,585,214,47.3K,186K,25.4%,['Shell'],[]
194,Transpose File,Medium,217,82,16.3K,66.6K,24.6%,['Shell'],[]
195,Tenth Line,Easy,281,200,64.6K,197.4K,32.7%,['Shell'],[]
196,Delete Duplicate Emails,Easy,898,609,162.1K,341.7K,47.5%,['Database'],[]
197,Rising Temperature,Easy,277,585,164.4K,403.4K,40.8%,['Database'],[]
198,House Robber,Medium,201,7574,752.8K,1.7M,43.8%,"['Array', 'Dynamic Programming']","[('Coin Path', 'Hard'), ('Delete and Earn', 'Medium'), ('House Robber II', 'Medium'), ('House Robber III', 'Medium'), ('Maximum Product Subarray', 'Medium'), ('Non-negative Integers without Consecutive Ones', 'Hard'), ('Paint Fence', 'Medium'), ('Paint House', 'Medium')]"
199,Binary Tree Right Side View,Medium,233,4344,477.7K,835K,57.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Boundary of Binary Tree', 'Medium'), ('Populating Next Right Pointers in Each Node', 'Medium')]"
200,Number of Islands,Medium,254,9161,1.1M,2.2M,50.6%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']","[('Count Sub Islands', 'Medium'), ('Max Area of Island', 'Medium'), ('Number of Connected Components in an Undirected Graph', 'Medium'), ('Number of Distinct Islands', 'Medium'), ('Number of Islands II', 'Hard'), ('Surrounded Regions', 'Medium'), ('Walls and Gates', 'Medium')]"
201,Bitwise AND of Numbers Range,Medium,151,1466,175.4K,439.9K,39.9%,['Bit Manipulation'],[]
202,Happy Number,Easy,548,3444,651.6K,1.3M,51.7%,"['Hash Table', 'Math', 'Two Pointers']","[('Add Digits', 'Easy'), ('Linked List Cycle', 'Easy'), ('Ugly Number', 'Easy')]"
203,Remove Linked List Elements,Easy,129,2957,494.5K,1.2M,40.2%,"['Linked List', 'Recursion']","[('Delete Node in a Linked List', 'Easy'), ('Remove Element', 'Easy')]"
204,Count Primes,Easy,834,3457,508.8K,1.6M,32.8%,"['Array', 'Enumeration', 'Math', 'Number Theory']","[('Perfect Squares', 'Medium'), ('Ugly Number', 'Easy'), ('Ugly Number II', 'Medium')]"
205,Isomorphic Strings,Easy,493,2225,377.3K,921.7K,40.9%,"['Hash Table', 'String']","[('Word Pattern', 'Easy')]"
206,Reverse Linked List,Easy,143,7618,1.5M,2.2M,66.8%,"['Linked List', 'Recursion']","[('Binary Tree Upside Down', 'Medium'), ('Palindrome Linked List', 'Easy'), ('Reverse Linked List II', 'Medium')]"
207,Course Schedule,Medium,268,6371,624.8K,1.4M,44.5%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']","[('Course Schedule II', 'Medium'), ('Course Schedule III', 'Hard'), ('Graph Valid Tree', 'Medium'), ('Minimum Height Trees', 'Medium')]"
208,Implement Trie (Prefix Tree),Medium,72,4854,434.9K,809.4K,53.7%,"['Design', 'Hash Table', 'String', 'Trie']","[('Design Add and Search Words Data Structure', 'Medium'), ('Design Search Autocomplete System', 'Hard'), ('Implement Magic Dictionary', 'Medium'), ('Implement Trie II (Prefix Tree)', 'Medium'), ('Replace Words', 'Medium')]"
209,Minimum Size Subarray Sum,Medium,147,4137,377.7K,932.1K,40.5%,"['Array', 'Binary Search', 'Prefix Sum', 'Sliding Window']","[('Maximum Length of Repeated Subarray', 'Medium'), ('Maximum Size Subarray Sum Equals k', 'Medium'), ('Minimum Operations to Reduce X to Zero', 'Medium'), ('Minimum Window Substring', 'Hard')]"
210,Course Schedule II,Medium,178,4191,427.6K,976.6K,43.8%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']","[('Alien Dictionary', 'Hard'), ('Course Schedule', 'Medium'), ('Course Schedule III', 'Hard'), ('Minimum Height Trees', 'Medium'), ('Parallel Courses', 'Medium'), ('Sequence Reconstruction', 'Medium')]"
211,Design Add and Search Words Data Structure,Medium,134,3192,299.6K,722.8K,41.5%,"['Depth-First Search', 'Design', 'String', 'Trie']","[('Implement Trie (Prefix Tree)', 'Medium'), ('Prefix and Suffix Search', 'Hard')]"
212,Word Search II,Hard,150,4012,319K,843K,37.8%,"['Array', 'Backtracking', 'Matrix', 'String', 'Trie']","[('Unique Paths III', 'Hard'), ('Word Search', 'Medium')]"
213,House Robber II,Medium,67,3121,255K,670.9K,38.0%,"['Array', 'Dynamic Programming']","[('Coin Path', 'Hard'), ('House Robber', 'Medium'), ('House Robber III', 'Medium'), ('Non-negative Integers without Consecutive Ones', 'Hard'), ('Paint Fence', 'Medium'), ('Paint House', 'Medium')]"
214,Shortest Palindrome,Hard,156,1772,118.9K,383.5K,31.0%,"['Hash Function', 'Rolling Hash', 'String', 'String Matching']","[('Implement strStr()', 'Easy'), ('Longest Palindromic Substring', 'Medium'), ('Palindrome Pairs', 'Hard')]"
215,Kth Largest Element in an Array,Medium,379,6167,950.3K,1.6M,60.0%,"['Array', 'Divide and Conquer', 'Heap (Priority Queue)', 'Quickselect', 'Sorting']","[('K Closest Points to Origin', 'Medium'), ('Kth Largest Element in a Stream', 'Easy'), ('Third Maximum Number', 'Easy'), ('Top K Frequent Elements', 'Medium'), ('Wiggle Sort II', 'Medium')]"
216,Combination Sum III,Medium,67,2010,237.2K,385.6K,61.5%,"['Array', 'Backtracking']","[('Combination Sum', 'Medium')]"
217,Contains Duplicate,Easy,859,1926,860.5K,1.5M,57.7%,"['Array', 'Hash Table', 'Sorting']","[('Contains Duplicate II', 'Easy'), ('Contains Duplicate III', 'Medium')]"
218,The Skyline Problem,Hard,170,3051,177K,476K,37.2%,"['Array', 'Binary Indexed Tree', 'Divide and Conquer', 'Heap (Priority Queue)', 'Line Sweep', 'Ordered Set', 'Segment Tree']","[('Falling Squares', 'Hard')]"
219,Contains Duplicate II,Easy,1482,1491,351.6K,890.9K,39.5%,"['Array', 'Hash Table', 'Sliding Window']","[('Contains Duplicate', 'Easy'), ('Contains Duplicate III', 'Medium')]"
220,Contains Duplicate III,Medium,1765,1697,175.6K,818.9K,21.4%,"['Array', 'Bucket Sort', 'Ordered Set', 'Sliding Window', 'Sorting']","[('Contains Duplicate', 'Easy'), ('Contains Duplicate II', 'Easy')]"
221,Maximal Square,Medium,115,4942,374.5K,927.7K,40.4%,"['Array', 'Dynamic Programming', 'Matrix']","[('Largest Plus Sign', 'Medium'), ('Maximal Rectangle', 'Hard')]"
222,Count Complete Tree Nodes,Medium,264,3170,308.8K,607.3K,50.8%,"['Binary Search', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Closest Binary Search Tree Value', 'Easy')]"
223,Rectangle Area,Medium,898,577,122.1K,315.4K,38.7%,"['Geometry', 'Math']","[('Rectangle Overlap', 'Easy')]"
224,Basic Calculator,Hard,217,2415,220.7K,570.4K,38.7%,"['Math', 'Recursion', 'Stack', 'String']","[('Basic Calculator II', 'Medium'), ('Basic Calculator III', 'Hard'), ('Different Ways to Add Parentheses', 'Medium'), ('Evaluate Reverse Polish Notation', 'Medium'), ('Expression Add Operators', 'Hard')]"
225,Implement Stack using Queues,Easy,704,1198,230.8K,471.9K,48.9%,"['Design', 'Queue', 'Stack']","[('Implement Queue using Stacks', 'Easy')]"
226,Invert Binary Tree,Easy,81,5648,736.1K,1.1M,68.3%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
227,Basic Calculator II,Medium,390,2569,284.6K,725.3K,39.2%,"['Math', 'Stack', 'String']","[('Basic Calculator', 'Hard'), ('Basic Calculator III', 'Hard'), ('Expression Add Operators', 'Hard')]"
228,Summary Ranges,Easy,751,1097,221.6K,511.5K,43.3%,['Array'],"[('Data Stream as Disjoint Intervals', 'Hard'), ('Missing Ranges', 'Easy')]"
229,Majority Element II,Medium,229,3020,215.5K,542.8K,39.7%,"['Array', 'Counting', 'Hash Table', 'Sorting']","[('Check If a Number Is Majority Element in a Sorted Array', 'Easy'), ('Majority Element', 'Easy')]"
230,Kth Smallest Element in a BST,Medium,92,4261,567.7K,888.2K,63.9%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy'), ('Second Minimum Node In a Binary Tree', 'Easy')]"
231,Power of Two,Easy,227,1514,432.7K,987.6K,43.8%,"['Bit Manipulation', 'Math', 'Recursion']","[('Number of 1 Bits', 'Easy'), ('Power of Four', 'Easy'), ('Power of Three', 'Easy')]"
232,Implement Queue using Stacks,Easy,171,1920,292.3K,544.7K,53.7%,"['Design', 'Queue', 'Stack']","[('Implement Stack using Queues', 'Easy')]"
233,Number of Digit One,Hard,783,433,54.5K,169.9K,32.1%,"['Dynamic Programming', 'Math', 'Recursion']","[('Digit Count in Range', 'Hard'), ('Factorial Trailing Zeroes', 'Easy')]"
234,Palindrome Linked List,Easy,454,5787,697.8K,1.6M,43.2%,"['Linked List', 'Recursion', 'Stack', 'Two Pointers']","[('Palindrome Number', 'Easy'), ('Reverse Linked List', 'Easy'), ('Valid Palindrome', 'Easy')]"
235,Lowest Common Ancestor of a Binary Search Tree,Easy,142,3462,530.5K,999.4K,53.1%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Lowest Common Ancestor of a Binary Tree', 'Medium'), ('Lowest Common Ancestor of a Binary Tree II', 'Medium'), ('Lowest Common Ancestor of a Binary Tree III', 'Medium'), ('Lowest Common Ancestor of a Binary Tree IV', 'Medium'), ('Smallest Common Region', 'Medium')]"
236,Lowest Common Ancestor of a Binary Tree,Medium,218,6493,708.9K,1.4M,51.0%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Lowest Common Ancestor of a Binary Search Tree', 'Easy'), ('Lowest Common Ancestor of a Binary Tree II', 'Medium'), ('Lowest Common Ancestor of a Binary Tree III', 'Medium'), ('Lowest Common Ancestor of a Binary Tree IV', 'Medium'), ('Smallest Common Region', 'Medium')]"
237,Delete Node in a Linked List,Easy,9559,2895,638.8K,929.9K,68.7%,['Linked List'],"[('Remove Linked List Elements', 'Easy')]"
238,Product of Array Except Self,Medium,584,8029,816.6K,1.3M,61.8%,"['Array', 'Prefix Sum']","[('Maximum Product Subarray', 'Medium'), ('Paint House II', 'Hard'), ('Trapping Rain Water', 'Hard')]"
239,Sliding Window Maximum,Hard,245,6444,420.7K,930.8K,45.2%,"['Array', 'Heap (Priority Queue)', 'Monotonic Queue', 'Queue', 'Sliding Window']","[('Jump Game VI', 'Medium'), ('Longest Substring with At Most Two Distinct Characters', 'Medium'), ('Min Stack', 'Easy'), ('Minimum Window Substring', 'Hard'), ('Paint House II', 'Hard')]"
240,Search a 2D Matrix II,Medium,96,5132,471K,1M,46.0%,"['Array', 'Binary Search', 'Divide and Conquer', 'Matrix']","[('Search a 2D Matrix', 'Medium')]"
241,Different Ways to Add Parentheses,Medium,125,2365,127.5K,218.7K,58.3%,"['Dynamic Programming', 'Math', 'Memoization', 'Recursion', 'String']","[('Basic Calculator', 'Hard'), ('Expression Add Operators', 'Hard'), ('Unique Binary Search Trees II', 'Medium')]"
242,Valid Anagram,Easy,168,2867,866.3K,1.5M,59.4%,"['Hash Table', 'Sorting', 'String']","[('Find All Anagrams in a String', 'Medium'), ('Group Anagrams', 'Medium'), ('Palindrome Permutation', 'Easy')]"
243,Shortest Word Distance,Easy,62,755,137.3K,218.8K,62.7%,"['Array', 'String']","[('Shortest Word Distance II', 'Medium'), ('Shortest Word Distance III', 'Medium')]"
244,Shortest Word Distance II,Medium,167,563,92.4K,165.7K,55.8%,"['Array', 'Design', 'Hash Table', 'String', 'Two Pointers']","[('Merge Two Sorted Lists', 'Easy'), ('Shortest Word Distance', 'Easy'), ('Shortest Word Distance III', 'Medium')]"
245,Shortest Word Distance III,Medium,79,277,57.5K,102K,56.4%,"['Array', 'String']","[('Shortest Word Distance', 'Easy'), ('Shortest Word Distance II', 'Medium')]"
246,Strobogrammatic Number,Easy,609,354,111.8K,238.9K,46.8%,"['Hash Table', 'String', 'Two Pointers']","[('Confusing Number', 'Easy'), ('Strobogrammatic Number II', 'Medium'), ('Strobogrammatic Number III', 'Hard')]"
247,Strobogrammatic Number II,Medium,158,600,98.1K,198.9K,49.3%,"['Array', 'Recursion', 'String']","[('Strobogrammatic Number', 'Easy'), ('Strobogrammatic Number III', 'Hard')]"
248,Strobogrammatic Number III,Hard,161,235,31.5K,77.5K,40.6%,"['Array', 'Recursion', 'String']","[('Strobogrammatic Number', 'Easy'), ('Strobogrammatic Number II', 'Medium')]"
249,Group Shifted Strings,Medium,162,812,109.3K,184.3K,59.3%,"['Array', 'Hash Table', 'String']","[('Group Anagrams', 'Medium')]"
250,Count Univalue Subtrees,Medium,211,744,92.4K,171.9K,53.7%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Longest Univalue Path', 'Medium'), ('Subtree of Another Tree', 'Easy')]"
251,Flatten 2D Vector,Medium,270,474,90.6K,193.9K,46.7%,"['Array', 'Design', 'Iterator', 'Two Pointers']","[('Binary Search Tree Iterator', 'Medium'), ('Flatten Nested List Iterator', 'Medium'), ('Peeking Iterator', 'Medium'), ('Zigzag Iterator', 'Medium')]"
252,Meeting Rooms,Easy,53,997,198.8K,356.2K,55.8%,"['Array', 'Sorting']","[('Meeting Rooms II', 'Medium'), ('Merge Intervals', 'Medium')]"
253,Meeting Rooms II,Medium,70,4039,452.1K,947.8K,47.7%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Sorting', 'Two Pointers']","[('Car Pooling', 'Medium'), ('Meeting Rooms', 'Easy'), ('Merge Intervals', 'Medium'), ('Minimum Number of Arrows to Burst Balloons', 'Medium')]"
254,Factor Combinations,Medium,33,724,87.5K,182.6K,47.9%,"['Array', 'Backtracking']","[('Combination Sum', 'Medium')]"
255,Verify Preorder Sequence in Binary Search Tree,Medium,65,781,57.3K,122.8K,46.7%,"['Binary Search Tree', 'Binary Tree', 'Monotonic Stack', 'Recursion', 'Stack', 'Tree']","[('Binary Tree Preorder Traversal', 'Easy')]"
256,Paint House,Medium,107,1405,122.2K,220.8K,55.3%,"['Array', 'Dynamic Programming']","[('House Robber', 'Medium'), ('House Robber II', 'Medium'), ('Paint Fence', 'Medium'), ('Paint House II', 'Hard')]"
257,Binary Tree Paths,Easy,143,2786,414.4K,750.5K,55.2%,"['Binary Tree', 'Depth-First Search', 'String', 'Tree']","[('Path Sum II', 'Medium'), ('Smallest String Starting From Leaf', 'Medium')]"
258,Add Digits,Easy,1343,1272,364.1K,615.1K,59.2%,"['Math', 'Number Theory', 'Simulation']","[('Happy Number', 'Easy'), ('Sum of Digits in the Minimum Number', 'Easy')]"
259,3Sum Smaller,Medium,99,918,90.5K,182.7K,49.5%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']","[('3Sum', 'Medium'), ('3Sum Closest', 'Medium'), ('Two Sum Less Than K', 'Easy'), ('Valid Triangle Number', 'Medium')]"
260,Single Number III,Medium,139,2498,197.7K,301.5K,65.6%,"['Array', 'Bit Manipulation']","[('Single Number', 'Easy'), ('Single Number II', 'Medium')]"
261,Graph Valid Tree,Medium,46,1531,172.8K,394K,43.9%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']","[('Course Schedule', 'Medium'), ('Keys and Rooms', 'Medium'), ('Number of Connected Components in an Undirected Graph', 'Medium')]"
262,Trips and Users,Hard,375,534,86.8K,238.4K,36.4%,['Database'],"[('Hopper Company Queries I', 'Hard'), ('Hopper Company Queries II', 'Hard'), ('Hopper Company Queries III', 'Hard')]"
263,Ugly Number,Easy,843,858,248.3K,595.9K,41.7%,['Math'],"[('Count Primes', 'Easy'), ('Happy Number', 'Easy'), ('Ugly Number II', 'Medium')]"
264,Ugly Number II,Medium,169,2816,213.5K,492.1K,43.4%,"['Dynamic Programming', 'Hash Table', 'Heap (Priority Queue)', 'Math']","[('Count Primes', 'Easy'), ('Merge k Sorted Lists', 'Hard'), ('Perfect Squares', 'Medium'), ('Super Ugly Number', 'Medium'), ('Ugly Number', 'Easy'), ('Ugly Number III', 'Medium')]"
265,Paint House II,Hard,27,688,72.9K,155.9K,46.8%,"['Array', 'Dynamic Programming']","[('Paint Fence', 'Medium'), ('Paint House', 'Medium'), ('Product of Array Except Self', 'Medium'), ('Sliding Window Maximum', 'Hard')]"
266,Palindrome Permutation,Easy,63,653,132.3K,208.8K,63.4%,"['Bit Manipulation', 'Hash Table', 'String']","[('Longest Palindrome', 'Easy'), ('Longest Palindromic Substring', 'Medium'), ('Palindrome Permutation II', 'Medium'), ('Valid Anagram', 'Easy')]"
267,Palindrome Permutation II,Medium,72,592,46.4K,121.6K,38.1%,"['Backtracking', 'Hash Table', 'String']","[('Next Permutation', 'Medium'), ('Palindrome Permutation', 'Easy'), ('Permutations II', 'Medium')]"
268,Missing Number,Easy,2589,3329,713.6K,1.3M,56.3%,"['Array', 'Bit Manipulation', 'Hash Table', 'Math', 'Sorting']","[('Couples Holding Hands', 'Hard'), ('Find the Duplicate Number', 'Medium'), ('First Missing Positive', 'Hard'), ('Single Number', 'Easy')]"
269,Alien Dictionary,Hard,517,2664,214.8K,631.6K,34.0%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Graph', 'String', 'Topological Sort']","[('Course Schedule II', 'Medium')]"
270,Closest Binary Search Tree Value,Easy,80,1124,199.5K,389.7K,51.2%,"['Binary Search', 'Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Closest Binary Search Tree Value II', 'Hard'), ('Count Complete Tree Nodes', 'Medium'), ('Search in a Binary Search Tree', 'Easy')]"
271,Encode and Decode Strings,Medium,186,628,73.3K,215.1K,34.1%,"['Array', 'Design', 'String']","[('Count Binary Substrings', 'Easy'), ('Count and Say', 'Medium'), ('Serialize and Deserialize Binary Tree', 'Hard'), ('String Compression', 'Medium')]"
272,Closest Binary Search Tree Value II,Hard,25,812,73.5K,137.3K,53.5%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Heap (Priority Queue)', 'Stack', 'Tree', 'Two Pointers']","[('Binary Tree Inorder Traversal', 'Easy'), ('Closest Binary Search Tree Value', 'Easy')]"
273,Integer to English Words,Hard,3884,1567,247.1K,862.1K,28.7%,"['Math', 'Recursion', 'String']","[('Integer to Roman', 'Medium')]"
274,H-Index,Medium,1548,949,206.7K,564.2K,36.6%,"['Array', 'Counting Sort', 'Sorting']","[('H-Index II', 'Medium')]"
275,H-Index II,Medium,881,565,144.8K,396.6K,36.5%,"['Array', 'Binary Search']","[('H-Index', 'Medium')]"
276,Paint Fence,Medium,338,958,67.2K,169.4K,39.7%,['Dynamic Programming'],"[('House Robber', 'Medium'), ('House Robber II', 'Medium'), ('Paint House', 'Medium'), ('Paint House II', 'Hard')]"
277,Find the Celebrity,Medium,170,1703,175.3K,392K,44.7%,"['Graph', 'Greedy', 'Interactive', 'Two Pointers']","[('Find the Town Judge', 'Easy')]"
278,First Bad Version,Easy,887,2428,595.7K,1.5M,38.5%,"['Binary Search', 'Interactive']","[('Find First and Last Position of Element in Sorted Array', 'Medium'), ('Guess Number Higher or Lower', 'Easy'), ('Search Insert Position', 'Easy')]"
279,Perfect Squares,Medium,247,4730,415K,833K,49.8%,"['Breadth-First Search', 'Dynamic Programming', 'Math']","[('Count Primes', 'Easy'), ('Ugly Number II', 'Medium')]"
280,Wiggle Sort,Medium,69,767,102.4K,157.2K,65.1%,"['Array', 'Greedy', 'Sorting']","[('Sort Colors', 'Medium'), ('Wiggle Sort II', 'Medium')]"
281,Zigzag Iterator,Medium,24,474,72.5K,120.8K,60.0%,"['Array', 'Design', 'Iterator', 'Queue']","[('Binary Search Tree Iterator', 'Medium'), ('Flatten 2D Vector', 'Medium'), ('Flatten Nested List Iterator', 'Medium'), ('Merge Strings Alternately', 'Easy'), ('Peeking Iterator', 'Medium')]"
282,Expression Add Operators,Hard,294,1757,137.2K,367.6K,37.3%,"['Backtracking', 'Math', 'String']","[('Basic Calculator', 'Hard'), ('Basic Calculator II', 'Medium'), ('Different Ways to Add Parentheses', 'Medium'), ('Evaluate Reverse Polish Notation', 'Medium'), ('Target Sum', 'Medium')]"
283,Move Zeroes,Easy,178,5970,1.2M,2M,59.0%,"['Array', 'Two Pointers']","[('Remove Element', 'Easy')]"
284,Peeking Iterator,Medium,573,825,138.9K,269.5K,51.5%,"['Array', 'Design', 'Iterator']","[('Binary Search Tree Iterator', 'Medium'), ('Flatten 2D Vector', 'Medium'), ('Zigzag Iterator', 'Medium')]"
285,Inorder Successor in BST,Medium,72,1695,212.4K,478K,44.4%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Search Tree Iterator', 'Medium'), ('Binary Tree Inorder Traversal', 'Easy'), ('Inorder Successor in BST II', 'Medium')]"
286,Walls and Gates,Medium,27,1721,166.9K,291.2K,57.3%,"['Array', 'Breadth-First Search', 'Matrix']","[('Number of Islands', 'Medium'), ('Robot Room Cleaner', 'Hard'), ('Rotting Oranges', 'Medium'), ('Shortest Distance from All Buildings', 'Hard'), ('Surrounded Regions', 'Medium')]"
287,Find the Duplicate Number,Medium,871,8255,560.8K,964.7K,58.1%,"['Array', 'Binary Search', 'Bit Manipulation', 'Two Pointers']","[('First Missing Positive', 'Hard'), ('Linked List Cycle II', 'Medium'), ('Missing Number', 'Easy'), ('Set Mismatch', 'Easy'), ('Single Number', 'Easy')]"
288,Unique Word Abbreviation,Medium,1528,145,59.1K,249.8K,23.7%,"['Array', 'Design', 'Hash Table', 'String']","[('Generalized Abbreviation', 'Medium'), ('Two Sum III - Data structure design', 'Easy')]"
289,Game of Life,Medium,357,2906,249.5K,416.2K,59.9%,"['Array', 'Matrix', 'Simulation']","[('Set Matrix Zeroes', 'Medium')]"
290,Word Pattern,Easy,234,2021,264.5K,684.1K,38.7%,"['Hash Table', 'String']","[('Isomorphic Strings', 'Easy'), ('Word Pattern II', 'Medium')]"
291,Word Pattern II,Medium,41,561,51.8K,115.6K,44.8%,"['Backtracking', 'Hash Table', 'String']","[('Word Pattern', 'Easy')]"
292,Nim Game,Easy,1936,826,250K,453K,55.2%,"['Brainteaser', 'Game Theory', 'Math']","[('Flip Game II', 'Medium')]"
293,Flip Game,Easy,332,137,54.6K,88.5K,61.7%,['String'],"[('Flip Game II', 'Medium')]"
294,Flip Game II,Medium,42,474,58.8K,115.3K,51.0%,"['Backtracking', 'Dynamic Programming', 'Game Theory', 'Math', 'Memoization']","[('Can I Win', 'Medium'), ('Flip Game', 'Easy'), ('Guess Number Higher or Lower II', 'Medium'), ('Nim Game', 'Easy')]"
295,Find Median from Data Stream,Hard,83,4564,321.3K,663.4K,48.4%,"['Data Stream', 'Design', 'Heap (Priority Queue)', 'Sorting', 'Two Pointers']","[('Finding MK Average', 'Hard'), ('Sliding Window Median', 'Hard')]"
296,Best Meeting Point,Hard,51,642,44.6K,76.3K,58.5%,"['Array', 'Math', 'Matrix', 'Sorting']","[('Minimum Moves to Equal Array Elements II', 'Medium'), ('Shortest Distance from All Buildings', 'Hard')]"
297,Serialize and Deserialize Binary Tree,Hard,207,4625,468.6K,916.6K,51.1%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Design', 'String', 'Tree']","[('Encode and Decode Strings', 'Medium'), ('Find Duplicate Subtrees', 'Medium'), ('Serialize and Deserialize BST', 'Medium'), ('Serialize and Deserialize N-ary Tree', 'Hard')]"
298,Binary Tree Longest Consecutive Sequence,Medium,163,689,99K,203.2K,48.7%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Longest Consecutive Sequence II', 'Medium'), ('Longest Consecutive Sequence', 'Medium')]"
299,Bulls and Cows,Medium,1108,1022,220.9K,487.7K,45.3%,"['Counting', 'Hash Table', 'String']",[]
300,Longest Increasing Subsequence,Medium,172,8009,599.1K,1.3M,45.9%,"['Array', 'Binary Search', 'Dynamic Programming']","[('Increasing Triplet Subsequence', 'Medium'), ('Maximum Length of Pair Chain', 'Medium'), ('Minimum ASCII Delete Sum for Two Strings', 'Medium'), ('Minimum Number of Removals to Make Mountain Array', 'Hard'), ('Number of Longest Increasing Subsequence', 'Medium'), ('Russian Doll Envelopes', 'Hard')]"
301,Remove Invalid Parentheses,Hard,168,3591,278.7K,614.9K,45.3%,"['Backtracking', 'Breadth-First Search', 'String']","[('Valid Parentheses', 'Easy')]"
302,Smallest Rectangle Enclosing Black Pixels,Hard,60,261,31.2K,58.8K,53.1%,"['Array', 'Binary Search', 'Breadth-First Search', 'Depth-First Search', 'Matrix']",[]
303,Range Sum Query - Immutable,Easy,1426,1397,267.7K,538.7K,49.7%,"['Array', 'Design', 'Prefix Sum']","[('Maximum Size Subarray Sum Equals k', 'Medium'), ('Range Sum Query - Mutable', 'Medium'), ('Range Sum Query 2D - Immutable', 'Medium')]"
304,Range Sum Query 2D - Immutable,Medium,220,1858,176.9K,401.8K,44.0%,"['Array', 'Design', 'Matrix', 'Prefix Sum']","[('Range Sum Query - Immutable', 'Easy'), ('Range Sum Query 2D - Mutable', 'Hard')]"
305,Number of Islands II,Hard,29,1097,93.1K,236.1K,39.4%,"['Array', 'Union Find']","[('Number of Islands', 'Medium')]"
306,Additive Number,Medium,551,577,61.9K,207K,29.9%,"['Backtracking', 'String']","[('Split Array into Fibonacci Sequence', 'Medium')]"
307,Range Sum Query - Mutable,Medium,120,2157,154.4K,408.6K,37.8%,"['Array', 'Binary Indexed Tree', 'Design', 'Segment Tree']","[('Range Sum Query - Immutable', 'Easy'), ('Range Sum Query 2D - Mutable', 'Hard')]"
308,Range Sum Query 2D - Mutable,Hard,68,553,58.6K,149.9K,39.1%,"['Array', 'Binary Indexed Tree', 'Design', 'Matrix', 'Segment Tree']","[('Range Sum Query - Mutable', 'Medium'), ('Range Sum Query 2D - Immutable', 'Medium')]"
309,Best Time to Buy and Sell Stock with Cooldown,Medium,128,3891,201.2K,411.1K,48.9%,"['Array', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock', 'Easy'), ('Best Time to Buy and Sell Stock II', 'Easy')]"
310,Minimum Height Trees,Medium,139,3354,141.4K,400.2K,35.3%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']","[('Course Schedule', 'Medium'), ('Course Schedule II', 'Medium')]"
311,Sparse Matrix Multiplication,Medium,255,670,130.1K,201.5K,64.6%,"['Array', 'Hash Table', 'Matrix']",[]
312,Burst Balloons,Hard,116,3853,140.2K,258.5K,54.2%,"['Array', 'Dynamic Programming']","[('Minimum Cost to Merge Stones', 'Hard')]"
313,Super Ugly Number,Medium,176,967,90.7K,193.2K,46.9%,"['Array', 'Dynamic Programming', 'Hash Table', 'Heap (Priority Queue)', 'Math']","[('Ugly Number II', 'Medium')]"
314,Binary Tree Vertical Order Traversal,Medium,208,1561,171.6K,358.1K,47.9%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium')]"
315,Count of Smaller Numbers After Self,Hard,122,4124,190.3K,453K,42.0%,"['Array', 'Binary Indexed Tree', 'Binary Search', 'Divide and Conquer', 'Merge Sort', 'Ordered Set', 'Segment Tree']","[('Count of Range Sum', 'Hard'), ('How Many Numbers Are Smaller Than the Current Number', 'Easy'), ('Queue Reconstruction by Height', 'Medium'), ('Reverse Pairs', 'Hard')]"
316,Remove Duplicate Letters,Medium,204,2815,126.9K,318.4K,39.9%,"['Greedy', 'Monotonic Stack', 'Stack', 'String']",[]
317,Shortest Distance from All Buildings,Hard,67,1073,96.3K,221.5K,43.5%,"['Array', 'Breadth-First Search', 'Matrix']","[('As Far from Land as Possible', 'Medium'), ('Best Meeting Point', 'Hard'), ('Walls and Gates', 'Medium')]"
318,Maximum Product of Word Lengths,Medium,87,1369,129.9K,234.2K,55.4%,"['Array', 'Bit Manipulation', 'String']",[]
319,Bulb Switcher,Medium,1305,678,96.2K,209.8K,45.8%,"['Brainteaser', 'Math']","[('Bulb Switcher II', 'Medium'), ('Bulb Switcher III', 'Medium'), ('Minimum Number of K Consecutive Bit Flips', 'Hard')]"
320,Generalized Abbreviation,Medium,152,524,54.6K,100.3K,54.4%,"['Backtracking', 'Bit Manipulation', 'String']","[('Minimum Unique Word Abbreviation', 'Hard'), ('Subsets', 'Medium'), ('Unique Word Abbreviation', 'Medium')]"
321,Create Maximum Number,Hard,281,1023,45K,162.2K,27.8%,"['Greedy', 'Monotonic Stack', 'Stack']","[('Maximum Swap', 'Medium'), ('Remove K Digits', 'Medium')]"
322,Coin Change,Medium,207,7514,686.9K,1.8M,38.3%,"['Array', 'Breadth-First Search', 'Dynamic Programming']","[('Minimum Cost For Tickets', 'Medium')]"
323,Number of Connected Components in an Undirected Graph,Medium,41,1370,165.8K,281.7K,58.9%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']","[('Graph Valid Tree', 'Medium'), ('Number of Islands', 'Medium'), ('Number of Provinces', 'Medium')]"
324,Wiggle Sort II,Medium,695,1531,102.8K,330.5K,31.1%,"['Array', 'Divide and Conquer', 'Quickselect', 'Sorting']","[('Kth Largest Element in an Array', 'Medium'), ('Sort Colors', 'Medium'), ('Wiggle Sort', 'Medium')]"
325,Maximum Size Subarray Sum Equals k,Medium,39,1271,126.7K,264.2K,47.9%,"['Array', 'Hash Table']","[('Contiguous Array', 'Medium'), ('Minimum Size Subarray Sum', 'Medium'), ('Range Sum Query - Immutable', 'Easy'), ('Subarray Product Less Than K', 'Medium')]"
326,Power of Three,Easy,42,306,367.6K,863.9K,42.6%,"['Math', 'Recursion']","[('Check if Number is a Sum of Powers of Three', 'Medium'), ('Power of Four', 'Easy'), ('Power of Two', 'Easy')]"
327,Count of Range Sum,Hard,129,1163,52.2K,144K,36.2%,"['Array', 'Binary Indexed Tree', 'Binary Search', 'Divide and Conquer', 'Merge Sort', 'Ordered Set', 'Segment Tree']","[('Count of Smaller Numbers After Self', 'Hard'), ('Reverse Pairs', 'Hard')]"
328,Odd Even Linked List,Medium,346,3455,398K,689.7K,57.7%,['Linked List'],"[('Split Linked List in Parts', 'Medium')]"
329,Longest Increasing Path in a Matrix,Hard,61,3625,240.8K,510.1K,47.2%,"['Breadth-First Search', 'Depth-First Search', 'Dynamic Programming', 'Graph', 'Memoization', 'Topological Sort']",[]
330,Patching Array,Hard,86,670,40.4K,114.4K,35.3%,"['Array', 'Greedy']","[('Maximum Number of Consecutive Values You Can Make', 'Medium')]"
331,Verify Preorder Serialization of a Binary Tree,Medium,61,1043,82.7K,199.8K,41.4%,"['Binary Tree', 'Stack', 'String', 'Tree']",[]
332,Reconstruct Itinerary,Medium,1337,2935,223.6K,577.5K,38.7%,"['Depth-First Search', 'Eulerian Circuit', 'Graph']","[('Longest Common Subpath', 'Hard')]"
333,Largest BST Subtree,Medium,85,907,66K,169K,39.0%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']",[]
334,Increasing Triplet Subsequence,Medium,171,2667,212.7K,518.7K,41.0%,"['Array', 'Greedy']","[('Longest Increasing Subsequence', 'Medium')]"
335,Self Crossing,Hard,418,192,25.7K,89.1K,28.8%,"['Array', 'Geometry', 'Math']",[]
336,Palindrome Pairs,Hard,199,2178,132.6K,368.2K,36.0%,"['Array', 'Hash Table', 'String', 'Trie']","[('Longest Palindromic Substring', 'Medium'), ('Shortest Palindrome', 'Hard')]"
337,House Robber III,Medium,71,4370,219.9K,421.6K,52.2%,"['Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']","[('House Robber', 'Medium'), ('House Robber II', 'Medium')]"
338,Counting Bits,Easy,225,4366,382.7K,537.6K,71.2%,"['Bit Manipulation', 'Dynamic Programming']","[('Number of 1 Bits', 'Easy')]"
339,Nested List Weight Sum,Medium,224,881,130.4K,168.3K,77.5%,"['Breadth-First Search', 'Depth-First Search']","[('Array Nesting', 'Medium'), ('Employee Importance', 'Easy'), ('Nested List Weight Sum II', 'Medium')]"
340,Longest Substring with At Most K Distinct Characters,Medium,60,1736,210.4K,456K,46.1%,"['Hash Table', 'Sliding Window', 'String']","[('Longest Repeating Character Replacement', 'Medium'), ('Longest Substring Without Repeating Characters', 'Medium'), ('Longest Substring with At Most Two Distinct Characters', 'Medium'), ('Max Consecutive Ones III', 'Medium'), ('Subarrays with K Different Integers', 'Hard')]"
341,Flatten Nested List Iterator,Medium,891,2461,237.3K,419.6K,56.6%,"['Depth-First Search', 'Design', 'Iterator', 'Queue', 'Stack', 'Tree']","[('Array Nesting', 'Medium'), ('Flatten 2D Vector', 'Medium'), ('Mini Parser', 'Medium'), ('Zigzag Iterator', 'Medium')]"
342,Power of Four,Easy,261,958,238.7K,566.1K,42.2%,"['Bit Manipulation', 'Math', 'Recursion']","[('Power of Three', 'Easy'), ('Power of Two', 'Easy')]"
343,Integer Break,Medium,277,1815,141.9K,274.7K,51.6%,"['Dynamic Programming', 'Math']","[('Maximize Number of Nice Divisors', 'Hard')]"
344,Reverse String,Easy,798,2625,1.1M,1.5M,71.4%,"['Recursion', 'String', 'Two Pointers']","[('Reverse String II', 'Easy'), ('Reverse Vowels of a String', 'Easy')]"
345,Reverse Vowels of a String,Easy,1553,1136,291.1K,637K,45.7%,"['String', 'Two Pointers']","[('Remove Vowels from a String', 'Easy'), ('Reverse String', 'Easy')]"
346,Moving Average from Data Stream,Easy,94,928,195.3K,262.8K,74.3%,"['Array', 'Data Stream', 'Design', 'Queue']",[]
347,Top K Frequent Elements,Medium,286,5443,625K,991.6K,63.0%,"['Array', 'Bucket Sort', 'Counting', 'Divide and Conquer', 'Hash Table', 'Heap (Priority Queue)', 'Quickselect', 'Sorting']","[('K Closest Points to Origin', 'Medium'), ('Kth Largest Element in an Array', 'Medium'), ('Sort Characters By Frequency', 'Medium'), ('Sort Features by Popularity', 'Medium'), ('Split Array into Consecutive Subsequences', 'Medium'), ('Top K Frequent Words', 'Medium'), ('Word Frequency', 'Medium')]"
348,Design Tic-Tac-Toe,Medium,77,1239,139.9K,248.1K,56.4%,"['Array', 'Design', 'Hash Table', 'Matrix']","[('Valid Tic-Tac-Toe State', 'Medium')]"
349,Intersection of Two Arrays,Easy,1623,1604,508.4K,766.9K,66.3%,"['Array', 'Binary Search', 'Hash Table', 'Sorting', 'Two Pointers']","[('Intersection of Three Sorted Arrays', 'Easy'), ('Intersection of Two Arrays II', 'Easy')]"
350,Intersection of Two Arrays II,Easy,539,2468,532.8K,1M,52.6%,"['Array', 'Binary Search', 'Hash Table', 'Sorting', 'Two Pointers']","[('Find Common Characters', 'Easy'), ('Intersection of Two Arrays', 'Easy')]"
351,Android Unlock Patterns,Medium,5,7,55K,109.8K,50.1%,"['Backtracking', 'Dynamic Programming']",[]
352,Data Stream as Disjoint Intervals,Hard,122,499,44K,89.5K,49.2%,"['Binary Search', 'Design', 'Ordered Set']","[('Find Right Interval', 'Medium'), ('Range Module', 'Hard'), ('Summary Ranges', 'Easy')]"
353,Design Snake Game,Medium,225,576,49.2K,133.9K,36.8%,"['Array', 'Design', 'Matrix', 'Queue']",[]
354,Russian Doll Envelopes,Hard,62,2264,110.7K,288.2K,38.4%,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']","[('Longest Increasing Subsequence', 'Medium')]"
355,Design Twitter,Medium,242,1441,69.4K,213.8K,32.5%,"['Design', 'Hash Table', 'Heap (Priority Queue)', 'Linked List']","[('Design a File Sharing System', 'Medium')]"
356,Line Reflection,Medium,425,180,28K,83.8K,33.4%,"['Array', 'Hash Table', 'Math']","[('Max Points on a Line', 'Hard'), ('Number of Boomerangs', 'Medium')]"
357,Count Numbers with Unique Digits,Medium,1065,654,91K,184.3K,49.4%,"['Backtracking', 'Dynamic Programming', 'Math']",[]
358,Rearrange String k Distance Apart,Hard,26,605,44.4K,123.3K,36.0%,"['Counting', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sorting', 'String']","[('Reorganize String', 'Medium'), ('Task Scheduler', 'Medium')]"
359,Logger Rate Limiter,Easy,148,842,159.2K,217.4K,73.2%,"['Design', 'Hash Table']","[('Design Hit Counter', 'Medium')]"
360,Sort Transformed Array,Medium,124,427,42.1K,83.2K,50.6%,"['Array', 'Math', 'Sorting', 'Two Pointers']","[('Squares of a Sorted Array', 'Easy')]"
361,Bomb Enemy,Medium,82,616,54.7K,114.6K,47.7%,"['Array', 'Dynamic Programming', 'Matrix']",[]
362,Design Hit Counter,Medium,105,1140,125.5K,190K,66.0%,"['Array', 'Binary Search', 'Design', 'Hash Table', 'Queue']","[('Logger Rate Limiter', 'Easy')]"
363,Max Sum of Rectangle No Larger Than K,Hard,98,1592,70.2K,175.9K,39.9%,"['Array', 'Binary Search', 'Dynamic Programming', 'Matrix', 'Ordered Set']",[]
364,Nested List Weight Sum II,Medium,224,761,84K,129.3K,64.9%,"['Breadth-First Search', 'Depth-First Search', 'Stack']","[('Array Nesting', 'Medium'), ('Nested List Weight Sum', 'Medium')]"
365,Water and Jug Problem,Medium,929,496,50.5K,157.4K,32.1%,"['Breadth-First Search', 'Depth-First Search', 'Math']",[]
366,Find Leaves of Binary Tree,Medium,22,1494,98.1K,133.3K,73.6%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
367,Valid Perfect Square,Easy,196,1383,283.6K,668.8K,42.4%,"['Binary Search', 'Math']","[('Sqrt(x)', 'Easy'), ('Sum of Square Numbers', 'Medium')]"
368,Largest Divisible Subset,Medium,95,2014,115.9K,299.8K,38.7%,"['Array', 'Dynamic Programming', 'Math', 'Sorting']",[]
369,Plus One Linked List,Medium,38,681,60.6K,101.4K,59.7%,"['Linked List', 'Math']","[('Plus One', 'Easy')]"
370,Range Addition,Medium,27,686,34.7K,54.1K,64.0%,"['Array', 'Prefix Sum']","[('Range Addition II', 'Easy')]"
371,Sum of Two Integers,Medium,2891,1819,234.8K,463.7K,50.6%,"['Bit Manipulation', 'Math']","[('Add Two Numbers', 'Medium')]"
372,Super Pow,Medium,929,341,41.9K,113.2K,37.0%,"['Divide and Conquer', 'Math']","[('Pow(x, n)', 'Medium')]"
373,Find K Pairs with Smallest Sums,Medium,142,2148,136.1K,350.2K,38.9%,"['Array', 'Heap (Priority Queue)']","[('Find K-th Smallest Pair Distance', 'Hard'), ('Kth Smallest Element in a Sorted Matrix', 'Medium')]"
374,Guess Number Higher or Lower,Easy,2167,686,210K,458.7K,45.8%,"['Binary Search', 'Interactive']","[('Find K Closest Elements', 'Medium'), ('First Bad Version', 'Easy'), ('Guess Number Higher or Lower II', 'Medium')]"
375,Guess Number Higher or Lower II,Medium,1549,1112,79.1K,183K,43.2%,"['Dynamic Programming', 'Game Theory', 'Math']","[('Can I Win', 'Medium'), ('Find K Closest Elements', 'Medium'), ('Flip Game II', 'Medium'), ('Guess Number Higher or Lower', 'Easy')]"
376,Wiggle Subsequence,Medium,81,1900,108.6K,254.4K,42.7%,"['Array', 'Dynamic Programming', 'Greedy']",[]
377,Combination Sum IV,Medium,274,2453,182K,384.5K,47.3%,"['Array', 'Dynamic Programming']","[('Combination Sum', 'Medium')]"
378,Kth Smallest Element in a Sorted Matrix,Medium,201,4254,300K,519.1K,57.8%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Matrix', 'Sorting']","[('Find K Pairs with Smallest Sums', 'Medium'), ('Find K-th Smallest Pair Distance', 'Hard'), ('K-th Smallest Prime Fraction', 'Hard'), ('Kth Smallest Number in Multiplication Table', 'Hard')]"
379,Design Phone Directory,Medium,343,243,47.4K,96.5K,49.1%,"['Array', 'Design', 'Hash Table', 'Linked List', 'Queue']","[('Seat Reservation Manager', 'Medium')]"
382,Linked List Random Node,Medium,242,953,107.8K,197.2K,54.7%,"['Linked List', 'Math', 'Randomized', 'Reservoir Sampling']","[('Random Pick Index', 'Medium')]"
383,Ransom Note,Easy,247,958,271.4K,505.1K,53.7%,"['Counting', 'Hash Table', 'String']","[('Stickers to Spell Word', 'Hard')]"
384,Shuffle an Array,Medium,249,203,181.7K,333.6K,54.5%,"['Array', 'Math', 'Randomized']",[]
385,Mini Parser,Medium,1006,302,43.8K,125.4K,34.9%,"['Depth-First Search', 'Stack', 'String']","[('Flatten Nested List Iterator', 'Medium'), ('Remove Comments', 'Medium'), ('Ternary Expression Parser', 'Medium')]"
386,Lexicographical Numbers,Medium,99,820,68.2K,122.7K,55.6%,"['Depth-First Search', 'Trie']",[]
387,First Unique Character in a String,Easy,153,3193,775.9K,1.4M,54.6%,"['Counting', 'Hash Table', 'Queue', 'String']","[('Sort Characters By Frequency', 'Medium')]"
388,Longest Absolute File Path,Medium,1787,769,106K,242.5K,43.7%,"['Depth-First Search', 'Stack', 'String']",[]
389,Find the Difference,Easy,324,1387,272K,466.4K,58.3%,"['Bit Manipulation', 'Hash Table', 'Sorting', 'String']","[('Single Number', 'Easy')]"
390,Elimination Game,Medium,436,615,40K,87.5K,45.7%,['Math'],[]
391,Perfect Rectangle,Hard,90,494,30.6K,97.4K,31.4%,"['Array', 'Line Sweep']",[]
392,Is Subsequence,Easy,249,2774,317.7K,638K,49.8%,"['Dynamic Programming', 'String', 'Two Pointers']","[('Number of Matching Subsequences', 'Medium'), ('Shortest Way to Form String', 'Medium')]"
393,UTF-8 Validation,Medium,1308,312,59.9K,155.7K,38.5%,"['Array', 'Bit Manipulation']",[]
394,Decode String,Medium,249,5414,347.3K,646.7K,53.7%,"['Recursion', 'Stack', 'String']","[('Brace Expansion', 'Medium'), ('Encode String with Shortest Length', 'Hard'), ('Number of Atoms', 'Hard')]"
395,Longest Substring with At Least K Repeating Characters,Medium,281,2856,128.6K,292.8K,43.9%,"['Divide and Conquer', 'Hash Table', 'Sliding Window', 'String']",[]
396,Rotate Function,Medium,189,580,52.3K,140.6K,37.2%,"['Dynamic Programming', 'Math']",[]
397,Integer Replacement,Medium,376,573,68K,201.5K,33.8%,"['Bit Manipulation', 'Dynamic Programming', 'Memoization']",[]
398,Random Pick Index,Medium,875,698,127.5K,214.1K,59.6%,"['Hash Table', 'Math', 'Randomized', 'Reservoir Sampling']","[('Linked List Random Node', 'Medium'), ('Random Pick with Blacklist', 'Hard'), ('Random Pick with Weight', 'Medium')]"
399,Evaluate Division,Medium,287,3668,193K,349.6K,55.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Graph', 'Shortest Path', 'Union Find']",[]
400,Nth Digit,Medium,1280,499,67.6K,207.2K,32.6%,"['Binary Search', 'Math']",[]
401,Binary Watch,Easy,1402,781,98.4K,200.6K,49.1%,"['Backtracking', 'Bit Manipulation']","[('Letter Combinations of a Phone Number', 'Medium'), ('Number of 1 Bits', 'Easy')]"
402,Remove K Digits,Medium,155,3581,187.5K,651.4K,28.8%,"['Greedy', 'Monotonic Stack', 'Stack', 'String']","[('Create Maximum Number', 'Hard'), ('Find the Most Competitive Subsequence', 'Medium'), ('Monotone Increasing Digits', 'Medium')]"
403,Frog Jump,Hard,137,1725,127.2K,302.8K,42.0%,"['Array', 'Dynamic Programming']","[('Minimum Sideway Jumps', 'Medium')]"
404,Sum of Left Leaves,Easy,189,2030,257.4K,488.4K,52.7%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
405,Convert a Number to Hexadecimal,Easy,140,674,83.6K,186.4K,44.9%,"['Bit Manipulation', 'Math']",[]
406,Queue Reconstruction by Height,Medium,464,4209,200.7K,290.7K,69.0%,"['Array', 'Greedy', 'Sorting']","[('Count of Smaller Numbers After Self', 'Hard')]"
407,Trapping Rain Water II,Hard,43,1986,55.5K,123.1K,45.1%,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']","[('Trapping Rain Water', 'Hard')]"
408,Valid Word Abbreviation,Easy,866,206,42.5K,133.6K,31.8%,"['String', 'Two Pointers']","[('Minimum Unique Word Abbreviation', 'Hard'), ('Word Abbreviation', 'Hard')]"
409,Longest Palindrome,Easy,107,1716,209.3K,398.9K,52.5%,"['Greedy', 'Hash Table', 'String']","[('Palindrome Permutation', 'Easy')]"
410,Split Array Largest Sum,Hard,97,2913,129.3K,272.8K,47.4%,"['Array', 'Binary Search', 'Dynamic Programming', 'Greedy']",[]
411,Minimum Unique Word Abbreviation,Hard,133,151,12.3K,32.8K,37.6%,"['Backtracking', 'Bit Manipulation', 'String']","[('Generalized Abbreviation', 'Medium'), ('Valid Word Abbreviation', 'Easy'), ('Word Abbreviation', 'Hard')]"
412,Fizz Buzz,Easy,1651,1455,493.6K,765.7K,64.5%,"['Math', 'Simulation', 'String']","[('Fizz Buzz Multithreaded', 'Medium')]"
413,Arithmetic Slices,Medium,208,1923,137.5K,228.2K,60.3%,"['Array', 'Dynamic Programming']","[('Arithmetic Slices II - Subsequence', 'Hard'), ('Arithmetic Subarrays', 'Medium')]"
414,Third Maximum Number,Easy,1880,1137,244K,792.2K,30.8%,"['Array', 'Sorting']","[('Kth Largest Element in an Array', 'Medium')]"
415,Add Strings,Easy,407,1969,317.6K,643.8K,49.3%,"['Math', 'Simulation', 'String']","[('Add Two Numbers', 'Medium'), ('Add to Array-Form of Integer', 'Easy'), ('Multiply Strings', 'Medium')]"
416,Partition Equal Subset Sum,Medium,94,4808,304.5K,672.3K,45.3%,"['Array', 'Dynamic Programming']","[('Partition to K Equal Sum Subsets', 'Medium')]"
417,Pacific Atlantic Water Flow,Medium,607,2383,131.2K,290.4K,45.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']",[]
418,Sentence Screen Fitting,Medium,304,625,58.8K,172K,34.2%,"['Dynamic Programming', 'String']",[]
419,Battleships in a Board,Medium,641,1036,119.9K,166.9K,71.8%,"['Array', 'Depth-First Search', 'Matrix']",[]
420,Strong Password Checker,Hard,1041,363,19.5K,142.7K,13.6%,"['Greedy', 'Heap (Priority Queue)', 'String']",[]
421,Maximum XOR of Two Numbers in an Array,Medium,223,2251,85.5K,156.3K,54.7%,"['Array', 'Bit Manipulation', 'Hash Table', 'Trie']","[('Maximum XOR With an Element From Array', 'Hard')]"
422,Valid Word Square,Easy,140,237,34.7K,90.4K,38.3%,"['Array', 'Matrix']","[('Toeplitz Matrix', 'Easy'), ('Word Squares', 'Hard')]"
423,Reconstruct Original Digits from English,Medium,1042,354,42.7K,83.5K,51.2%,"['Hash Table', 'Math', 'String']",[]
424,Longest Repeating Character Replacement,Medium,127,2720,124.5K,254K,49.0%,"['Hash Table', 'Sliding Window', 'String']","[('Longest Substring with At Most K Distinct Characters', 'Medium'), ('Max Consecutive Ones III', 'Medium')]"
425,Word Squares,Hard,48,766,50.8K,100.2K,50.7%,"['Array', 'Backtracking', 'String', 'Trie']","[('Valid Word Square', 'Easy')]"
426,Convert Binary Search Tree to Sorted Doubly Linked List,Medium,127,1473,130.5K,209.6K,62.3%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Doubly-Linked List', 'Linked List', 'Stack', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy')]"
427,Construct Quad Tree,Medium,521,355,30.2K,47.7K,63.4%,"['Array', 'Divide and Conquer', 'Matrix', 'Tree']",[]
428,Serialize and Deserialize N-ary Tree,Hard,37,667,50.8K,81.2K,62.5%,"['Breadth-First Search', 'Depth-First Search', 'String', 'Tree']","[('Encode N-ary Tree to Binary Tree', 'Hard'), ('Serialize and Deserialize BST', 'Medium'), ('Serialize and Deserialize Binary Tree', 'Hard')]"
429,N-ary Tree Level Order Traversal,Medium,67,1084,111.5K,165.4K,67.4%,"['Breadth-First Search', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium'), ('N-ary Tree Postorder Traversal', 'Easy'), ('N-ary Tree Preorder Traversal', 'Easy')]"
430,Flatten a Multilevel Doubly Linked List,Medium,196,2475,168.2K,294K,57.2%,"['Depth-First Search', 'Doubly-Linked List', 'Linked List']","[('Correct a Binary Tree', 'Medium'), ('Flatten Binary Tree to Linked List', 'Medium')]"
431,Encode N-ary Tree to Binary Tree,Hard,17,314,12.4K,16.4K,75.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Design', 'Tree']","[('Serialize and Deserialize N-ary Tree', 'Hard')]"
433,Minimum Genetic Mutation,Medium,77,597,41.1K,93.3K,44.1%,"['Breadth-First Search', 'Hash Table', 'String']","[('Word Ladder', 'Hard')]"
434,Number of Segments in a String,Easy,892,330,97.4K,258K,37.8%,['String'],[]
435,Non-overlapping Intervals,Medium,69,2308,151K,336.8K,44.8%,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']","[('Minimum Number of Arrows to Burst Balloons', 'Medium')]"
436,Find Right Interval,Medium,204,795,65.7K,134.7K,48.8%,"['Array', 'Binary Search', 'Sorting']","[('Data Stream as Disjoint Intervals', 'Hard')]"
437,Path Sum III,Medium,325,5509,281.2K,578K,48.7%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Longest Univalue Path', 'Medium'), ('Path Sum', 'Easy'), ('Path Sum II', 'Medium'), ('Path Sum IV', 'Medium')]"
438,Find All Anagrams in a String,Medium,207,4494,372.9K,815K,45.8%,"['Hash Table', 'Sliding Window', 'String']","[('Permutation in String', 'Medium'), ('Valid Anagram', 'Easy')]"
439,Ternary Expression Parser,Medium,39,296,22.5K,39.3K,57.2%,"['Recursion', 'Stack', 'String']","[('Mini Parser', 'Medium'), ('Parse Lisp Expression', 'Hard'), ('Remove Comments', 'Medium')]"
440,K-th Smallest in Lexicographical Order,Hard,64,437,15.6K,52K,30.0%,['Trie'],[]
441,Arranging Coins,Easy,815,1051,200.5K,467.1K,42.9%,"['Binary Search', 'Math']",[]
442,Find All Duplicates in an Array,Medium,188,3869,286.1K,410.1K,69.8%,"['Array', 'Hash Table']","[('Find All Numbers Disappeared in an Array', 'Easy')]"
443,String Compression,Medium,3442,1413,182.8K,405.1K,45.1%,"['String', 'Two Pointers']","[('Count and Say', 'Medium'), ('Decompress Run-Length Encoded List', 'Easy'), ('Design Compressed String Iterator', 'Easy'), ('Encode and Decode Strings', 'Medium')]"
444,Sequence Reconstruction,Medium,1259,385,38.5K,161.4K,23.9%,"['Array', 'Graph', 'Topological Sort']","[('Course Schedule II', 'Medium')]"
445,Add Two Numbers II,Medium,203,2555,251.2K,440.1K,57.1%,"['Linked List', 'Math', 'Stack']","[('Add Two Numbers', 'Medium'), ('Add Two Polynomials Represented as Linked Lists', 'Medium')]"
446,Arithmetic Slices II - Subsequence,Hard,73,760,26.5K,77.4K,34.2%,"['Array', 'Dynamic Programming']","[('Arithmetic Slices', 'Medium')]"
447,Number of Boomerangs,Medium,779,485,74.9K,142.1K,52.7%,"['Array', 'Hash Table', 'Math']","[('Line Reflection', 'Medium')]"
448,Find All Numbers Disappeared in an Array,Easy,312,4470,398.7K,703.9K,56.6%,"['Array', 'Hash Table']","[('Find All Duplicates in an Array', 'Medium'), ('First Missing Positive', 'Hard')]"
449,Serialize and Deserialize BST,Medium,99,2078,159.9K,291.6K,54.8%,"['Binary Search Tree', 'Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Design', 'String', 'Tree']","[('Find Duplicate Subtrees', 'Medium'), ('Serialize and Deserialize Binary Tree', 'Hard'), ('Serialize and Deserialize N-ary Tree', 'Hard')]"
450,Delete Node in a BST,Medium,114,3273,182.6K,396K,46.1%,"['Binary Search Tree', 'Binary Tree', 'Tree']","[('Split BST', 'Medium')]"
451,Sort Characters By Frequency,Medium,155,2597,267.4K,410K,65.2%,"['Bucket Sort', 'Counting', 'Hash Table', 'Heap (Priority Queue)', 'Sorting', 'String']","[('First Unique Character in a String', 'Easy'), ('Sort Array by Increasing Frequency', 'Easy'), ('Top K Frequent Elements', 'Medium')]"
452,Minimum Number of Arrows to Burst Balloons,Medium,66,1912,120K,239.2K,50.2%,"['Array', 'Greedy', 'Sorting']","[('Meeting Rooms II', 'Medium'), ('Non-overlapping Intervals', 'Medium')]"
453,Minimum Moves to Equal Array Elements,Easy,1287,946,97.9K,189.3K,51.7%,"['Array', 'Math']","[('Minimum Moves to Equal Array Elements II', 'Medium')]"
454,4Sum II,Medium,85,2148,173.7K,315.7K,55.0%,"['Array', 'Hash Table']","[('4Sum', 'Medium')]"
455,Assign Cookies,Easy,130,933,128.8K,255.4K,50.4%,"['Array', 'Greedy', 'Sorting']",[]
456,132 Pattern,Medium,150,2465,91.7K,299K,30.7%,"['Array', 'Binary Search', 'Monotonic Stack', 'Ordered Set', 'Stack']",[]
457,Circular Array Loop,Medium,112,132,48.5K,158.5K,30.6%,"['Array', 'Hash Table', 'Two Pointers']",[]
458,Poor Pigs,Hard,1055,559,31.4K,57.3K,54.8%,"['Combinatorics', 'Dynamic Programming', 'Math']",[]
459,Repeated Substring Pattern,Easy,255,2576,200.7K,462.4K,43.4%,"['String', 'String Matching']","[('Implement strStr()', 'Easy'), ('Repeated String Match', 'Medium')]"
460,LFU Cache,Hard,157,2214,115.5K,309.3K,37.3%,"['Design', 'Doubly-Linked List', 'Hash Table', 'Linked List']","[('Design In-Memory File System', 'Hard'), ('LRU Cache', 'Medium')]"
461,Hamming Distance,Easy,179,2317,406.2K,553K,73.4%,['Bit Manipulation'],"[('Number of 1 Bits', 'Easy'), ('Total Hamming Distance', 'Medium')]"
462,Minimum Moves to Equal Array Elements II,Medium,63,968,72K,129.3K,55.7%,"['Array', 'Math', 'Sorting']","[('Best Meeting Point', 'Hard'), ('Minimum Moves to Equal Array Elements', 'Easy')]"
463,Island Perimeter,Easy,150,2948,281.5K,418.6K,67.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']","[('Coloring A Border', 'Medium'), ('Flood Fill', 'Easy'), ('Max Area of Island', 'Medium')]"
464,Can I Win,Medium,228,1427,64.7K,217.6K,29.7%,"['Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Game Theory', 'Math', 'Memoization']","[('Flip Game II', 'Medium'), ('Guess Number Higher or Lower II', 'Medium'), ('Predict the Winner', 'Medium')]"
465,Optimal Account Balancing,Hard,79,830,50.9K,104.7K,48.7%,"['Array', 'Backtracking']",[]
466,Count The Repetitions,Hard,216,234,12.8K,44.5K,28.8%,"['Dynamic Programming', 'String']",[]
467,Unique Substrings in Wraparound String,Medium,112,842,30.9K,84.6K,36.5%,"['Dynamic Programming', 'String']",[]
468,Validate IP Address,Medium,2088,517,104.6K,411.7K,25.4%,['String'],"[('IP to CIDR', 'Medium')]"
469,Convex Polygon,Medium,201,76,9K,23.8K,37.7%,"['Geometry', 'Math']",[]
470,Implement Rand10() Using Rand7(),Medium,244,728,51.5K,111.5K,46.2%,"['Math', 'Probability and Statistics', 'Randomized', 'Rejection Sampling']",[]
471,Encode String with Shortest Length,Hard,27,492,24.6K,49.1K,50.1%,"['Dynamic Programming', 'String']","[('Decode String', 'Medium'), ('Number of Atoms', 'Hard')]"
472,Concatenated Words,Hard,160,1309,100.4K,227.1K,44.2%,"['Depth-First Search', 'Dynamic Programming', 'String', 'Trie']","[('Word Break II', 'Hard')]"
473,Matchsticks to Square,Medium,104,1213,64K,160.3K,40.0%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
474,Ones and Zeroes,Medium,298,2050,87.5K,201K,43.5%,"['Array', 'Dynamic Programming', 'String']","[('Non-negative Integers without Consecutive Ones', 'Hard')]"
475,Heaters,Medium,955,979,76.1K,223.5K,34.0%,"['Array', 'Binary Search', 'Sorting']",[]
476,Number Complement,Easy,88,1251,216.6K,331.8K,65.3%,['Bit Manipulation'],[]
477,Total Hamming Distance,Medium,68,1207,74.9K,147K,51.0%,"['Array', 'Bit Manipulation', 'Math']","[('Hamming Distance', 'Easy')]"
478,Generate Random Point in a Circle,Medium,615,318,30.2K,77.2K,39.1%,"['Geometry', 'Math', 'Randomized', 'Rejection Sampling']","[('Random Point in Non-overlapping Rectangles', 'Medium')]"
479,Largest Palindrome Product,Hard,1390,104,18.5K,61.7K,30.0%,['Math'],[]
480,Sliding Window Median,Hard,103,1554,81.6K,206K,39.6%,"['Array', 'Hash Table', 'Heap (Priority Queue)', 'Sliding Window']","[('Find Median from Data Stream', 'Hard')]"
481,Magical String,Medium,789,134,24.9K,51.4K,48.4%,"['String', 'Two Pointers']",[]
482,License Key Formatting,Easy,914,626,172.8K,400.5K,43.2%,['String'],[]
483,Smallest Good Base,Hard,380,216,14.9K,40.7K,36.7%,"['Binary Search', 'Math']",[]
484,Find Permutation,Medium,70,444,25.5K,39.6K,64.3%,"['Array', 'Greedy', 'Stack']",[]
485,Max Consecutive Ones,Easy,388,1480,441K,829.1K,53.2%,['Array'],"[('Consecutive Characters', 'Easy'), ('Longer Contiguous Segments of Ones than Zeros', 'Easy'), ('Max Consecutive Ones II', 'Medium'), ('Max Consecutive Ones III', 'Medium')]"
486,Predict the Winner,Medium,115,2105,91.2K,184.8K,49.3%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math', 'Recursion']","[('Can I Win', 'Medium')]"
487,Max Consecutive Ones II,Medium,13,784,61.6K,128.2K,48.1%,"['Array', 'Dynamic Programming', 'Sliding Window']","[('Max Consecutive Ones', 'Easy'), ('Max Consecutive Ones III', 'Medium')]"
488,Zuma Game,Hard,327,298,17.9K,47K,38.0%,"['Backtracking', 'String']",[]
489,Robot Room Cleaner,Hard,99,1644,85.5K,116.1K,73.7%,"['Backtracking', 'Interactive']","[('Minimum Path Cost in a Hidden Grid', 'Medium'), ('Shortest Path in a Hidden Grid', 'Medium'), ('Walls and Gates', 'Medium')]"
490,The Maze,Medium,124,1101,92.9K,174K,53.4%,"['Breadth-First Search', 'Depth-First Search', 'Graph']","[('The Maze II', 'Medium'), ('The Maze III', 'Hard')]"
491,Increasing Subsequences,Medium,142,1060,60.3K,124.3K,48.5%,"['Array', 'Backtracking', 'Bit Manipulation', 'Hash Table']","[('Maximum Length of Pair Chain', 'Medium')]"
492,Construct the Rectangle,Easy,295,307,67.5K,132.1K,51.1%,['Math'],[]
493,Reverse Pairs,Hard,154,1643,59.5K,213K,27.9%,"['Array', 'Binary Indexed Tree', 'Binary Search', 'Divide and Conquer', 'Merge Sort', 'Ordered Set', 'Segment Tree']","[('Count of Range Sum', 'Hard'), ('Count of Smaller Numbers After Self', 'Hard')]"
494,Target Sum,Medium,182,4575,252.6K,554.8K,45.5%,"['Array', 'Backtracking', 'Dynamic Programming']","[('Expression Add Operators', 'Hard')]"
495,Teemo Attacking,Easy,7,56,78.6K,139.8K,56.2%,"['Array', 'Simulation']","[('Can Place Flowers', 'Easy'), ('Dota2 Senate', 'Medium'), ('Merge Intervals', 'Medium')]"
496,Next Greater Element I,Easy,16,171,231.9K,348K,66.6%,"['Array', 'Hash Table', 'Monotonic Stack', 'Stack']","[('Daily Temperatures', 'Medium'), ('Next Greater Element II', 'Medium'), ('Next Greater Element III', 'Medium')]"
497,Random Point in Non-overlapping Rectangles,Medium,543,344,31.5K,80.4K,39.1%,"['Binary Search', 'Math', 'Ordered Set', 'Prefix Sum', 'Randomized', 'Reservoir Sampling']","[('Generate Random Point in a Circle', 'Medium'), ('Random Pick with Weight', 'Medium')]"
498,Diagonal Traverse,Medium,429,1392,134.8K,261.4K,51.6%,"['Array', 'Matrix', 'Simulation']",[]
499,The Maze III,Hard,50,268,18.6K,43.1K,43.1%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']","[('The Maze', 'Medium'), ('The Maze II', 'Medium')]"
500,Keyboard Row,Easy,783,689,129.9K,195.7K,66.4%,"['Array', 'Hash Table', 'String']",[]
501,Find Mode in Binary Search Tree,Easy,444,1489,116.5K,261.3K,44.6%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Validate Binary Search Tree', 'Medium')]"
502,IPO,Hard,53,559,24.5K,58K,42.3%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Sorting']",[]
503,Next Greater Element II,Medium,97,2810,149.6K,251.3K,59.5%,"['Array', 'Monotonic Stack', 'Stack']","[('Next Greater Element I', 'Easy'), ('Next Greater Element III', 'Medium')]"
504,Base 7,Easy,171,351,70.1K,150.1K,46.7%,['Math'],[]
505,The Maze II,Medium,41,850,66.3K,133.4K,49.7%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']","[('The Maze', 'Medium'), ('The Maze III', 'Hard')]"
506,Relative Ranks,Easy,3,77,65K,124.2K,52.4%,"['Array', 'Heap (Priority Queue)', 'Sorting']",[]
507,Perfect Number,Easy,760,419,84.5K,230K,36.7%,['Math'],"[('Self Dividing Numbers', 'Easy')]"
508,Most Frequent Subtree Sum,Medium,161,986,89K,148K,60.1%,"['Binary Tree', 'Depth-First Search', 'Hash Table', 'Tree']","[('Subtree of Another Tree', 'Easy')]"
509,Fibonacci Number,Easy,230,1562,408.6K,602.6K,67.8%,"['Dynamic Programming', 'Math', 'Memoization', 'Recursion']","[('Climbing Stairs', 'Easy'), ('Length of Longest Fibonacci Subsequence', 'Medium'), ('N-th Tribonacci Number', 'Easy'), ('Split Array into Fibonacci Sequence', 'Medium')]"
510,Inorder Successor in BST II,Medium,27,527,35.4K,58.2K,60.9%,"['Binary Search Tree', 'Binary Tree', 'Tree']","[('Inorder Successor in BST', 'Medium')]"
511,Game Play Analysis I,Easy,6,76,34K,41.7K,81.7%,['Database'],"[('Game Play Analysis II', 'Easy')]"
512,Game Play Analysis II,Easy,19,105,31.6K,56.2K,56.1%,['Database'],"[('Game Play Analysis I', 'Easy'), ('Game Play Analysis III', 'Medium')]"
513,Find Bottom Left Tree Value,Medium,178,1493,138.5K,218.6K,63.4%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
514,Freedom Trail,Hard,28,562,23.5K,51.8K,45.3%,"['Breadth-First Search', 'Depth-First Search', 'Dynamic Programming', 'String']",[]
515,Find Largest Value in Each Tree Row,Medium,73,1446,144.4K,229.5K,62.9%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
516,Longest Palindromic Subsequence,Medium,222,3466,182.7K,322K,56.8%,"['Dynamic Programming', 'String']","[('Count Different Palindromic Subsequences', 'Hard'), ('Longest Common Subsequence', 'Medium'), ('Longest Palindromic Subsequence II', 'Medium'), ('Longest Palindromic Substring', 'Medium'), ('Maximize Palindrome Length From Subsequences', 'Hard'), ('Palindromic Substrings', 'Medium')]"
517,Super Washing Machines,Hard,168,440,19.6K,50.4K,38.8%,"['Array', 'Greedy']",[]
518,Coin Change 2,Medium,79,3400,205.2K,385.2K,53.3%,"['Array', 'Dynamic Programming']",[]
519,Random Flip Matrix,Medium,80,230,10.9K,28.5K,38.0%,"['Hash Table', 'Math', 'Randomized', 'Reservoir Sampling']",[]
520,Detect Capital,Easy,299,875,197.5K,364.5K,54.2%,['String'],[]
521,Longest Uncommon Subsequence I,Easy,4889,441,73.2K,123.5K,59.2%,['String'],"[('Longest Uncommon Subsequence II', 'Medium')]"
522,Longest Uncommon Subsequence II,Medium,691,235,25.5K,74.1K,34.4%,"['Array', 'Hash Table', 'Sorting', 'String', 'Two Pointers']","[('Longest Uncommon Subsequence I', 'Easy')]"
523,Continuous Subarray Sum,Medium,84,461,204.9K,807.9K,25.4%,"['Array', 'Hash Table', 'Math', 'Prefix Sum']","[('Subarray Sum Equals K', 'Medium')]"
524,Longest Word in Dictionary through Deleting,Medium,303,1081,109.5K,217.6K,50.3%,"['Array', 'Sorting', 'String', 'Two Pointers']","[('Longest Word in Dictionary', 'Medium')]"
525,Contiguous Array,Medium,148,3017,193.7K,440.4K,44.0%,"['Array', 'Hash Table', 'Prefix Sum']","[('Maximum Size Subarray Sum Equals k', 'Medium')]"
526,Beautiful Arrangement,Medium,226,1419,96K,153.7K,62.4%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']","[('Beautiful Arrangement II', 'Medium')]"
527,Word Abbreviation,Hard,176,262,19.8K,34.8K,56.9%,"['Array', 'Greedy', 'Sorting', 'String', 'Trie']","[('Minimum Unique Word Abbreviation', 'Hard'), ('Valid Word Abbreviation', 'Easy')]"
528,Random Pick with Weight,Medium,2956,1349,187.1K,415K,45.1%,"['Binary Search', 'Math', 'Prefix Sum', 'Randomized']","[('Random Pick Index', 'Medium'), ('Random Pick with Blacklist', 'Hard'), ('Random Point in Non-overlapping Rectangles', 'Medium')]"
529,Minesweeper,Medium,695,976,89K,142.7K,62.3%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']",[]
530,Minimum Absolute Difference in BST,Easy,99,1389,120.5K,217.6K,55.4%,"['Binary Search Tree', 'Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('K-diff Pairs in an Array', 'Medium')]"
531,Lonely Pixel I,Medium,33,252,26.5K,44.2K,60.0%,"['Array', 'Hash Table', 'Matrix']","[('Lonely Pixel II', 'Medium')]"
532,K-diff Pairs in an Array,Medium,1616,1239,172.9K,478.7K,36.1%,"['Array', 'Binary Search', 'Hash Table', 'Sorting', 'Two Pointers']","[('Minimum Absolute Difference in BST', 'Easy')]"
533,Lonely Pixel II,Medium,628,59,11.3K,23.5K,48.2%,"['Array', 'Hash Table', 'Matrix']","[('Lonely Pixel I', 'Medium')]"
534,Game Play Analysis III,Medium,7,160,28.1K,34.8K,80.6%,['Database'],"[('Game Play Analysis II', 'Easy'), ('Game Play Analysis IV', 'Medium')]"
535,Encode and Decode TinyURL,Medium,1919,950,149.2K,180.4K,82.7%,"['Design', 'Hash Function', 'Hash Table', 'String']",[]
536,Construct Binary Tree from String,Medium,115,665,49.7K,93.7K,53.0%,"['Binary Tree', 'Depth-First Search', 'String', 'Tree']","[('Construct String from Binary Tree', 'Easy')]"
537,Complex Number Multiplication,Medium,855,327,56.5K,82.3K,68.6%,"['Math', 'Simulation', 'String']",[]
538,Convert BST to Greater Tree,Medium,146,2759,173.6K,285.8K,60.7%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']",[]
539,Minimum Time Difference,Medium,176,720,63.7K,121K,52.6%,"['Array', 'Math', 'Sorting', 'String']",[]
540,Single Element in a Sorted Array,Medium,88,2787,200.2K,345.1K,58.0%,"['Array', 'Binary Search']",[]
541,Reverse String II,Easy,1779,645,120.9K,243.1K,49.8%,"['String', 'Two Pointers']","[('Reverse String', 'Easy'), ('Reverse Words in a String III', 'Easy')]"
542,01 Matrix,Medium,136,2603,136K,326.5K,41.7%,"['Array', 'Breadth-First Search', 'Dynamic Programming', 'Matrix']","[('Shortest Path to Get Food', 'Medium')]"
543,Diameter of Binary Tree,Easy,316,5160,507K,1M,50.6%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Diameter of N-Ary Tree', 'Medium')]"
544,Output Contest Matches,Medium,103,319,23.4K,30.7K,76.1%,"['Recursion', 'Simulation', 'String']",[]
545,Boundary of Binary Tree,Medium,1370,818,77.2K,187.6K,41.2%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Right Side View', 'Medium')]"
546,Remove Boxes,Hard,62,929,19.8K,45K,44.1%,"['Array', 'Dynamic Programming', 'Memoization']","[('Strange Printer', 'Hard')]"
547,Number of Provinces,Medium,190,3324,291.2K,473.9K,61.4%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']","[('Number of Connected Components in an Undirected Graph', 'Medium'), ('Robot Return to Origin', 'Easy'), ('Sentence Similarity', 'Easy'), ('Sentence Similarity II', 'Medium'), ('The Earliest Moment When Everyone Become Friends', 'Medium')]"
548,Split Array with Equal Sum,Medium,114,323,18.4K,37.5K,49.2%,"['Array', 'Prefix Sum']","[('Number of Ways to Split a String', 'Medium')]"
549,Binary Tree Longest Consecutive Sequence II,Medium,51,731,33.3K,70K,47.6%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Longest Consecutive Sequence', 'Medium')]"
550,Game Play Analysis IV,Medium,36,126,23.4K,51.6K,45.2%,['Database'],"[('Game Play Analysis III', 'Medium'), ('Game Play Analysis V', 'Hard')]"
551,Student Attendance Record I,Easy,9,94,115.6K,248.7K,46.5%,['String'],"[('Student Attendance Record II', 'Hard')]"
552,Student Attendance Record II,Hard,139,788,32K,83.5K,38.3%,['Dynamic Programming'],"[('Student Attendance Record I', 'Easy')]"
553,Optimal Division,Medium,1243,208,28.4K,49.1K,57.9%,"['Array', 'Dynamic Programming', 'Math']",[]
554,Brick Wall,Medium,76,1532,90.2K,173.9K,51.9%,"['Array', 'Hash Table']",[]
555,Split Concatenated Strings,Medium,216,60,5.6K,12.9K,43.0%,"['Array', 'Greedy', 'String']",[]
556,Next Greater Element III,Medium,275,1319,71.4K,213.9K,33.4%,"['Math', 'String', 'Two Pointers']","[('Next Greater Element I', 'Easy'), ('Next Greater Element II', 'Medium'), ('Next Palindrome Using Same Digits', 'Hard')]"
557,Reverse Words in a String III,Easy,109,1551,269.8K,368.5K,73.2%,"['String', 'Two Pointers']","[('Reverse String II', 'Easy')]"
558,Logical OR of Two Binary Grids Represented as Quad-Trees,Medium,373,115,9.9K,21.5K,46.0%,"['Divide and Conquer', 'Tree']",[]
559,Maximum Depth of N-ary Tree,Easy,62,1495,171.3K,244.9K,70.0%,"['Breadth-First Search', 'Depth-First Search', 'Tree']","[('Maximum Depth of Binary Tree', 'Easy')]"
560,Subarray Sum Equals K,Medium,272,8089,514.8K,1.2M,43.7%,"['Array', 'Hash Table', 'Prefix Sum']","[('Continuous Subarray Sum', 'Medium'), ('Find Pivot Index', 'Easy'), ('Minimum Operations to Reduce X to Zero', 'Medium'), ('Subarray Product Less Than K', 'Medium'), ('Subarray Sums Divisible by K', 'Medium'), ('Two Sum', 'Easy')]"
561,Array Partition I,Easy,67,325,275.6K,372.1K,74.1%,"['Array', 'Counting Sort', 'Greedy', 'Sorting']",[]
562,Longest Line of Consecutive One in Matrix,Medium,89,519,42K,89K,47.2%,"['Array', 'Dynamic Programming', 'Matrix']",[]
563,Binary Tree Tilt,Easy,1624,969,122.7K,226.9K,54.1%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Find All The Lonely Nodes', 'Easy')]"
564,Find the Closest Palindrome,Hard,1008,382,27K,131.4K,20.5%,"['Math', 'String']","[('Next Palindrome Using Same Digits', 'Hard')]"
565,Array Nesting,Medium,120,1128,66.8K,118.9K,56.2%,"['Array', 'Depth-First Search']","[('Flatten Nested List Iterator', 'Medium'), ('Nested List Weight Sum', 'Medium'), ('Nested List Weight Sum II', 'Medium')]"
566,Reshape the Matrix,Easy,135,1229,142.8K,230.5K,62.0%,"['Array', 'Matrix', 'Simulation']",[]
567,Permutation in String,Medium,82,2664,199.5K,447.3K,44.6%,"['Hash Table', 'Sliding Window', 'String', 'Two Pointers']","[('Find All Anagrams in a String', 'Medium'), ('Minimum Window Substring', 'Hard')]"
568,Maximum Vacation Days,Hard,64,380,28.5K,67.8K,42.0%,"['Array', 'Dynamic Programming', 'Matrix']","[('Cheapest Flights Within K Stops', 'Medium')]"
569,Median Employee Salary,Hard,88,151,18.4K,29K,63.4%,['Database'],"[('Find Median Given Frequency of Numbers', 'Hard')]"
570,Managers with at Least 5 Direct Reports,Medium,20,154,39K,58K,67.2%,['Database'],[]
571,Find Median Given Frequency of Numbers,Hard,54,152,13.2K,28.8K,45.6%,['Database'],"[('Median Employee Salary', 'Hard')]"
572,Subtree of Another Tree,Easy,182,3726,333.2K,745.6K,44.7%,"['Binary Tree', 'Depth-First Search', 'Hash Function', 'String Matching', 'Tree']","[('Count Univalue Subtrees', 'Medium'), ('Most Frequent Subtree Sum', 'Medium')]"
573,Squirrel Simulation,Medium,30,282,16.1K,29.6K,54.3%,"['Array', 'Math']",[]
574,Winning Candidate,Medium,345,94,32.7K,60.5K,54.1%,['Database'],[]
575,Distribute Candies,Easy,1047,778,173.8K,268.7K,64.7%,"['Array', 'Hash Table']",[]
576,Out of Boundary Paths,Medium,173,1179,55.2K,139.8K,39.5%,['Dynamic Programming'],"[('Knight Probability in Chessboard', 'Medium')]"
577,Employee Bonus,Easy,61,119,40.4K,55.5K,72.9%,['Database'],"[('Combine Two Tables', 'Easy')]"
578,Get Highest Answer Rate Question,Medium,640,56,28.3K,66.3K,42.6%,['Database'],[]
579,Find Cumulative Salary of an Employee,Hard,307,140,19.9K,51.5K,38.7%,['Database'],[]
580,Count Student Number in Departments,Medium,26,134,29.9K,56.3K,53.1%,['Database'],[]
581,Shortest Unsorted Continuous Subarray,Medium,187,4113,185.3K,557.9K,33.2%,"['Array', 'Greedy', 'Monotonic Stack', 'Sorting', 'Stack', 'Two Pointers']",[]
582,Kill Process,Medium,14,701,51.1K,79.3K,64.5%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
583,Delete Operation for Two Strings,Medium,38,1926,86.1K,164.5K,52.3%,"['Dynamic Programming', 'String']","[('Edit Distance', 'Hard'), ('Longest Common Subsequence', 'Medium'), ('Minimum ASCII Delete Sum for Two Strings', 'Medium')]"
584,Find Customer Referee,Easy,66,109,37.4K,50.1K,74.7%,['Database'],[]
585,Investments in 2016,Medium,126,138,23.4K,40.6K,57.7%,['Database'],[]
586,Customer Placing the Largest Number of Orders,Easy,14,153,44.2K,58.4K,75.8%,['Database'],[]
587,Erect the Fence,Hard,204,298,11.2K,30.6K,36.7%,"['Array', 'Geometry', 'Math']","[('Erect the Fence II', 'Hard')]"
588,Design In-Memory File System,Hard,82,643,36.8K,78.5K,47.0%,"['Design', 'Hash Table', 'String', 'Trie']","[('Design Log Storage System', 'Medium'), ('LFU Cache', 'Hard'), ('LRU Cache', 'Medium')]"
589,N-ary Tree Preorder Traversal,Easy,68,1176,175.5K,234.9K,74.7%,"['Depth-First Search', 'Stack', 'Tree']","[('Binary Tree Preorder Traversal', 'Easy'), ('N-ary Tree Level Order Traversal', 'Medium'), ('N-ary Tree Postorder Traversal', 'Easy')]"
590,N-ary Tree Postorder Traversal,Easy,75,1115,141.3K,189.7K,74.5%,"['Depth-First Search', 'Stack', 'Tree']","[('Binary Tree Postorder Traversal', 'Easy'), ('N-ary Tree Level Order Traversal', 'Medium'), ('N-ary Tree Preorder Traversal', 'Easy')]"
591,Tag Validator,Hard,487,111,9.4K,26.5K,35.3%,"['Stack', 'String']","[('Add Bold Tag in String', 'Medium')]"
592,Fraction Addition and Subtraction,Medium,379,246,24.2K,47.6K,50.8%,"['Math', 'Simulation', 'String']","[('Solve the Equation', 'Medium')]"
593,Valid Square,Medium,635,509,65.4K,150.8K,43.4%,"['Geometry', 'Math']",[]
594,Longest Harmonious Subsequence,Easy,129,1238,99.6K,193.2K,51.6%,"['Array', 'Hash Table', 'Sorting']",[]
595,Big Countries,Easy,782,614,227.4K,287.7K,79.0%,['Database'],[]
596,Classes More Than 5 Students,Easy,805,310,116.5K,297.7K,39.2%,['Database'],[]
597,Friend Requests I: Overall Acceptance Rate,Easy,457,192,41.9K,99.4K,42.2%,['Database'],[]
598,Range Addition II,Easy,632,391,48.4K,95.8K,50.5%,"['Array', 'Math']","[('Range Addition', 'Medium')]"
599,Minimum Index Sum of Two Lists,Easy,255,861,119.5K,228.1K,52.4%,"['Array', 'Hash Table', 'String']","[('Intersection of Two Linked Lists', 'Easy')]"
600,Non-negative Integers without Consecutive Ones,Hard,81,584,15.4K,44.6K,34.6%,['Dynamic Programming'],"[('House Robber', 'Medium'), ('House Robber II', 'Medium'), ('Ones and Zeroes', 'Medium')]"
601,Human Traffic of Stadium,Hard,433,257,45.7K,97.5K,46.9%,['Database'],[]
602,Friend Requests II: Who Has the Most Friends,Medium,61,197,35.9K,61.1K,58.7%,['Database'],[]
603,Consecutive Available Seats,Easy,25,339,35.9K,53.7K,66.7%,['Database'],[]
604,Design Compressed String Iterator,Easy,108,309,22.6K,58.7K,38.5%,"['Array', 'Design', 'Hash Table', 'Iterator', 'String']","[('LRU Cache', 'Medium'), ('String Compression', 'Medium')]"
605,Can Place Flowers,Easy,497,1594,184.3K,584.1K,31.6%,"['Array', 'Greedy']","[('Asteroid Collision', 'Medium'), ('Teemo Attacking', 'Easy')]"
606,Construct String from Binary Tree,Easy,1408,1032,108.1K,192.1K,56.2%,"['Binary Tree', 'Depth-First Search', 'String', 'Tree']","[('Construct Binary Tree from String', 'Medium'), ('Find Duplicate Subtrees', 'Medium')]"
607,Sales Person,Easy,35,178,33.6K,50.8K,66.2%,['Database'],[]
608,Tree Node,Medium,16,245,29.1K,41.2K,70.6%,['Database'],[]
609,Find Duplicate File in System,Medium,833,696,83.8K,132.8K,63.1%,"['Array', 'Hash Table', 'String']",[]
610,Triangle Judgement,Easy,34,159,35.8K,51.4K,69.7%,['Database'],[]
611,Valid Triangle Number,Medium,112,1514,89.1K,179.1K,49.8%,"['Array', 'Binary Search', 'Greedy', 'Sorting', 'Two Pointers']","[('3Sum Smaller', 'Medium')]"
612,Shortest Distance in a Plane,Medium,47,129,22.2K,35.7K,62.1%,['Database'],[]
613,Shortest Distance in a Line,Easy,27,203,37.1K,46.2K,80.3%,['Database'],[]
614,Second Degree Follower,Medium,615,88,30.4K,91K,33.4%,['Database'],[]
615,Average Salary: Departments VS Company,Hard,42,128,18.1K,33.5K,54.1%,['Database'],"[('Countries You Can Safely Invest In', 'Medium')]"
616,Add Bold Tag in String,Medium,103,690,52.2K,115.1K,45.4%,"['Array', 'Hash Table', 'String', 'String Matching', 'Trie']","[('Merge Intervals', 'Medium'), ('Tag Validator', 'Hard')]"
617,Merge Two Binary Trees,Easy,203,4680,411.1K,540.7K,76.0%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
618,Students Report By Geography,Hard,106,96,12K,19.5K,61.6%,['Database'],[]
619,Biggest Single Number,Easy,83,95,33.8K,73.6K,45.9%,['Database'],[]
620,Not Boring Movies,Easy,340,377,146.5K,206.6K,70.9%,['Database'],[]
621,Task Scheduler,Medium,964,5140,278.2K,526.4K,52.8%,"['Array', 'Counting', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sorting']","[('Rearrange String k Distance Apart', 'Hard'), ('Reorganize String', 'Medium')]"
622,Design Circular Queue,Medium,145,1169,127.7K,266.8K,47.9%,"['Array', 'Design', 'Linked List', 'Queue']","[('Design Circular Deque', 'Medium'), ('Design Front Middle Back Queue', 'Medium')]"
623,Add One Row to Tree,Medium,166,984,72.7K,136.5K,53.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
624,Maximum Distance in Arrays,Medium,59,505,31.1K,78.1K,39.8%,"['Array', 'Greedy']",[]
625,Minimum Factorization,Medium,95,107,9.5K,28.8K,33.1%,"['Greedy', 'Math']",[]
626,Exchange Seats,Medium,316,484,77.1K,114.7K,67.2%,['Database'],[]
627,Swap Salary,Easy,319,643,150.2K,190.4K,78.9%,['Database'],[]
628,Maximum Product of Three Numbers,Easy,460,1787,161.5K,346.1K,46.7%,"['Array', 'Math', 'Sorting']","[('Maximum Product Subarray', 'Medium')]"
629,K Inverse Pairs Array,Hard,103,675,23K,62.3K,37.0%,['Dynamic Programming'],[]
630,Course Schedule III,Hard,48,1483,46.3K,132.5K,34.9%,"['Array', 'Greedy', 'Heap (Priority Queue)']","[('Course Schedule', 'Medium'), ('Course Schedule II', 'Medium')]"
631,Design Excel Sum Formula,Hard,120,109,5.5K,16.2K,33.8%,"['Design', 'Graph', 'Topological Sort']",[]
632,Smallest Range Covering Elements from K Lists,Hard,28,1535,49.7K,89.8K,55.4%,"['Array', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sliding Window', 'Sorting']","[('Minimum Window Substring', 'Hard')]"
633,Sum of Square Numbers,Medium,396,742,87.4K,265.5K,32.9%,"['Binary Search', 'Math', 'Two Pointers']","[('Valid Perfect Square', 'Easy')]"
634,Find the Derangement of An Array,Medium,126,148,7.5K,18.5K,40.6%,"['Dynamic Programming', 'Math']",[]
635,Design Log Storage System,Medium,150,350,24.1K,39.6K,60.8%,"['Design', 'Hash Table', 'Ordered Set', 'String']","[('Design In-Memory File System', 'Hard')]"
636,Exclusive Time of Functions,Medium,1885,1150,117.8K,209.5K,56.2%,"['Array', 'Stack']",[]
637,Average of Levels in Binary Tree,Easy,210,2161,206.6K,309.8K,66.7%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium'), ('Binary Tree Level Order Traversal II', 'Medium')]"
638,Shopping Offers,Medium,549,793,39.5K,73.5K,53.7%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Memoization']",[]
639,Decode Ways II,Hard,614,637,40.7K,146.8K,27.8%,"['Dynamic Programming', 'String']","[('Decode Ways', 'Medium')]"
640,Solve the Equation,Medium,612,306,29.1K,67.7K,43.0%,"['Math', 'Simulation', 'String']","[('Fraction Addition and Subtraction', 'Medium')]"
641,Design Circular Deque,Medium,48,467,30.9K,54.7K,56.6%,"['Array', 'Design', 'Linked List', 'Queue']","[('Design Circular Queue', 'Medium'), ('Design Front Middle Back Queue', 'Medium')]"
642,Design Search Autocomplete System,Hard,94,1400,87.8K,186.6K,47.0%,"['Data Stream', 'Design', 'String', 'Trie']","[('Implement Trie (Prefix Tree)', 'Medium')]"
643,Maximum Average Subarray I,Easy,141,1089,106.3K,251.3K,42.3%,"['Array', 'Sliding Window']","[('Maximum Average Subarray II', 'Hard')]"
644,Maximum Average Subarray II,Hard,54,496,15.9K,46.2K,34.5%,"['Array', 'Binary Search']","[('Maximum Average Subarray I', 'Easy')]"
645,Set Mismatch,Easy,461,1229,135.4K,331K,40.9%,"['Array', 'Bit Manipulation', 'Hash Table', 'Sorting']","[('Find the Duplicate Number', 'Medium')]"
646,Maximum Length of Pair Chain,Medium,91,1568,83.9K,155.5K,54.0%,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']","[('Increasing Subsequences', 'Medium'), ('Longest Increasing Subsequence', 'Medium')]"
647,Palindromic Substrings,Medium,141,4637,301.6K,478.2K,63.1%,"['Dynamic Programming', 'String']","[('Longest Palindromic Subsequence', 'Medium'), ('Longest Palindromic Substring', 'Medium')]"
648,Replace Words,Medium,146,1073,75.4K,125.8K,59.9%,"['Array', 'Hash Table', 'String', 'Trie']","[('Implement Trie (Prefix Tree)', 'Medium')]"
649,Dota2 Senate,Medium,267,353,15.9K,40.1K,39.6%,"['Greedy', 'Queue', 'String']","[('Teemo Attacking', 'Easy')]"
650,2 Keys Keyboard,Medium,138,1949,82.1K,161.5K,50.8%,"['Dynamic Programming', 'Math']","[('4 Keys Keyboard', 'Medium'), ('Broken Calculator', 'Medium')]"
651,4 Keys Keyboard,Medium,65,455,19K,35.7K,53.3%,"['Dynamic Programming', 'Math']","[('2 Keys Keyboard', 'Medium')]"
652,Find Duplicate Subtrees,Medium,252,2224,103.2K,191.5K,53.9%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Construct String from Binary Tree', 'Easy'), ('Serialize and Deserialize BST', 'Medium'), ('Serialize and Deserialize Binary Tree', 'Hard')]"
653,Two Sum IV - Input is a BST,Easy,161,2248,204.2K,360.3K,56.7%,"['Binary Search Tree', 'Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree', 'Two Pointers']","[('Two Sum', 'Easy'), ('Two Sum BSTs', 'Medium'), ('Two Sum II - Input array is sorted', 'Easy'), ('Two Sum III - Data structure design', 'Easy')]"
654,Maximum Binary Tree,Medium,275,2733,172.9K,210.9K,82.0%,"['Array', 'Binary Tree', 'Divide and Conquer', 'Monotonic Stack', 'Stack', 'Tree']","[('Maximum Binary Tree II', 'Medium')]"
655,Print Binary Tree,Medium,31,24,41.3K,72.5K,57.0%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
656,Coin Path,Hard,91,192,11K,36.7K,30.1%,"['Array', 'Dynamic Programming']","[('House Robber', 'Medium'), ('House Robber II', 'Medium')]"
657,Robot Return to Origin,Easy,699,1368,293.5K,394.7K,74.4%,"['Simulation', 'String']","[('Number of Provinces', 'Medium')]"
658,Find K Closest Elements,Medium,347,2866,196.4K,452.8K,43.4%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Sorting', 'Two Pointers']","[('Find K-th Smallest Pair Distance', 'Hard'), ('Guess Number Higher or Lower', 'Easy'), ('Guess Number Higher or Lower II', 'Medium')]"
659,Split Array into Consecutive Subsequences,Medium,500,1701,59.7K,133.5K,44.7%,"['Array', 'Greedy', 'Hash Table', 'Heap (Priority Queue)']","[('Divide Array in Sets of K Consecutive Numbers', 'Medium'), ('Top K Frequent Elements', 'Medium')]"
660,Remove 9,Hard,151,118,7.7K,14.1K,54.5%,['Math'],[]
661,Image Smoother,Easy,1329,312,56.5K,107.3K,52.7%,"['Array', 'Matrix']",[]
662,Maximum Width of Binary Tree,Medium,422,2427,116.4K,294.6K,39.5%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
663,Equal Tree Partition,Medium,24,335,21.1K,53K,39.9%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
664,Strange Printer,Hard,57,614,19.1K,44.9K,42.4%,"['Dynamic Programming', 'String']","[('Remove Boxes', 'Hard'), ('Strange Printer II', 'Hard')]"
665,Non-decreasing Array,Medium,644,3162,154.7K,738.9K,20.9%,['Array'],[]
666,Path Sum IV,Medium,326,232,16.7K,29.1K,57.5%,"['Array', 'Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Maximum Path Sum', 'Hard'), ('Path Sum', 'Easy'), ('Path Sum II', 'Medium'), ('Path Sum III', 'Medium')]"
667,Beautiful Arrangement II,Medium,905,588,44.1K,74.8K,59.0%,"['Array', 'Math']","[('Beautiful Arrangement', 'Medium')]"
668,Kth Smallest Number in Multiplication Table,Hard,25,774,27.9K,57.7K,48.4%,['Binary Search'],"[('Find K-th Smallest Pair Distance', 'Hard'), ('K-th Smallest Prime Fraction', 'Hard'), ('Kth Smallest Element in a Sorted Matrix', 'Medium')]"
669,Trim a Binary Search Tree,Medium,212,2978,163.8K,254.5K,64.4%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']",[]
670,Maximum Swap,Medium,97,1637,104.1K,228.4K,45.6%,"['Greedy', 'Math']","[('Create Maximum Number', 'Hard')]"
671,Second Minimum Node In a Binary Tree,Easy,1164,895,108.1K,251.7K,42.9%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Kth Smallest Element in a BST', 'Medium')]"
672,Bulb Switcher II,Medium,1007,178,14.8K,29.1K,51.0%,"['Bit Manipulation', 'Breadth-First Search', 'Depth-First Search', 'Math']","[('Bulb Switcher', 'Medium'), ('Bulb Switcher III', 'Medium')]"
673,Number of Longest Increasing Subsequence,Medium,128,2448,82.9K,212.9K,38.9%,"['Array', 'Binary Indexed Tree', 'Dynamic Programming', 'Segment Tree']","[('Longest Continuous Increasing Subsequence', 'Easy'), ('Longest Increasing Subsequence', 'Medium')]"
674,Longest Continuous Increasing Subsequence,Easy,149,1265,155.5K,334K,46.6%,['Array'],"[('Minimum Window Subsequence', 'Hard'), ('Number of Longest Increasing Subsequence', 'Medium')]"
675,Cut Off Trees for Golf Event,Hard,425,715,45.5K,128.1K,35.5%,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']",[]
676,Implement Magic Dictionary,Medium,166,782,52K,93.5K,55.7%,"['Design', 'Hash Table', 'String', 'Trie']","[('Implement Trie (Prefix Tree)', 'Medium'), ('Longest Word in Dictionary', 'Medium')]"
677,Map Sum Pairs,Medium,96,700,54.1K,99.6K,54.3%,"['Design', 'Hash Table', 'String', 'Trie']",[]
678,Valid Parenthesis String,Medium,69,2524,138.6K,432.7K,32.0%,"['Dynamic Programming', 'Greedy', 'Stack', 'String']","[('Special Binary String', 'Hard')]"
679,24 Game,Hard,189,961,52.2K,109.6K,47.6%,"['Array', 'Backtracking', 'Math']",[]
680,Valid Palindrome II,Easy,182,2850,286.9K,767.5K,37.4%,"['Greedy', 'String', 'Two Pointers']","[('Valid Palindrome', 'Easy')]"
681,Next Closest Time,Medium,846,579,81K,175.8K,46.1%,"['Enumeration', 'String']",[]
682,Baseball Game,Easy,1257,785,121.4K,178.5K,68.0%,"['Array', 'Simulation', 'Stack']","[('Crawler Log Folder', 'Easy')]"
683,K Empty Slots,Hard,627,673,52.4K,144.1K,36.4%,"['Array', 'Binary Indexed Tree', 'Ordered Set', 'Sliding Window']",[]
684,Redundant Connection,Medium,265,2606,154.6K,258.3K,59.9%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']","[('Accounts Merge', 'Medium'), ('Redundant Connection II', 'Hard')]"
685,Redundant Connection II,Hard,252,1191,44.7K,134.5K,33.2%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']","[('Redundant Connection', 'Medium')]"
686,Repeated String Match,Medium,855,1098,109.2K,331K,33.0%,"['String', 'String Matching']","[('Repeated Substring Pattern', 'Easy')]"
687,Longest Univalue Path,Medium,568,2434,119.3K,313.8K,38.0%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Maximum Path Sum', 'Hard'), ('Count Univalue Subtrees', 'Medium'), ('Path Sum III', 'Medium')]"
688,Knight Probability in Chessboard,Medium,249,1428,64.6K,127.2K,50.8%,['Dynamic Programming'],"[('Out of Boundary Paths', 'Medium')]"
689,Maximum Sum of 3 Non-Overlapping Subarrays,Hard,86,1320,55.8K,117K,47.7%,"['Array', 'Dynamic Programming']","[('Best Time to Buy and Sell Stock III', 'Hard')]"
690,Employee Importance,Easy,974,1155,129K,214.5K,60.1%,"['Breadth-First Search', 'Depth-First Search', 'Hash Table']","[('Nested List Weight Sum', 'Medium')]"
691,Stickers to Spell Word,Hard,55,556,23.1K,50.4K,45.8%,"['Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']","[('Ransom Note', 'Easy')]"
692,Top K Frequent Words,Medium,212,3253,295.5K,551.8K,53.5%,"['Bucket Sort', 'Counting', 'Hash Table', 'Heap (Priority Queue)', 'Sorting', 'String', 'Trie']","[('K Closest Points to Origin', 'Medium'), ('Sort Features by Popularity', 'Medium'), ('Top K Frequent Elements', 'Medium')]"
693,Binary Number with Alternating Bits,Easy,95,690,78.7K,130.5K,60.3%,['Bit Manipulation'],"[('Number of 1 Bits', 'Easy')]"
694,Number of Distinct Islands,Medium,83,1374,96.2K,164.3K,58.6%,"['Breadth-First Search', 'Depth-First Search', 'Hash Function', 'Hash Table', 'Union Find']","[('Count Sub Islands', 'Medium'), ('Number of Distinct Islands II', 'Hard'), ('Number of Islands', 'Medium')]"
695,Max Area of Island,Medium,114,3769,295K,441.8K,66.8%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']","[('Island Perimeter', 'Easy'), ('Largest Submatrix With Rearrangements', 'Medium'), ('Number of Islands', 'Medium')]"
696,Count Binary Substrings,Easy,300,1794,84.7K,137.5K,61.6%,"['String', 'Two Pointers']","[('Encode and Decode Strings', 'Medium')]"
697,Degree of an Array,Easy,1007,1452,116.2K,212.1K,54.8%,"['Array', 'Hash Table']","[('Maximum Subarray', 'Easy')]"
698,Partition to K Equal Sum Subsets,Medium,202,3267,135.2K,300.1K,45.1%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Memoization']","[('Partition Equal Subset Sum', 'Medium')]"
699,Falling Squares,Hard,66,353,16.9K,38.9K,43.4%,"['Array', 'Ordered Set', 'Segment Tree']","[('The Skyline Problem', 'Hard')]"
700,Search in a Binary Search Tree,Easy,135,1599,299.9K,406.8K,73.7%,"['Binary Search Tree', 'Binary Tree', 'Tree']","[('Closest Binary Search Tree Value', 'Easy'), ('Insert into a Binary Search Tree', 'Medium')]"
701,Insert into a Binary Search Tree,Medium,103,1708,190.4K,253.6K,75.1%,"['Binary Search Tree', 'Binary Tree', 'Tree']","[('Search in a Binary Search Tree', 'Easy')]"
702,Search in a Sorted Array of Unknown Size,Medium,31,532,49.2K,70.9K,69.4%,"['Array', 'Binary Search', 'Interactive']","[('Binary Search', 'Easy'), ('Find the Index of the Large Integer', 'Medium')]"
703,Kth Largest Element in a Stream,Easy,862,1363,142.2K,276.5K,51.4%,"['Binary Search Tree', 'Binary Tree', 'Data Stream', 'Design', 'Heap (Priority Queue)', 'Tree']","[('Finding MK Average', 'Hard'), ('Kth Largest Element in an Array', 'Medium')]"
704,Binary Search,Easy,68,1554,289.7K,528.8K,54.8%,"['Array', 'Binary Search']","[('Search in a Sorted Array of Unknown Size', 'Medium')]"
705,Design HashSet,Easy,113,786,130.5K,204.1K,64.0%,"['Array', 'Design', 'Hash Function', 'Hash Table', 'Linked List']","[('Design HashMap', 'Easy'), ('Design Skiplist', 'Hard')]"
706,Design HashMap,Easy,186,1690,197.3K,308.7K,63.9%,"['Array', 'Design', 'Hash Function', 'Hash Table', 'Linked List']","[('Design HashSet', 'Easy'), ('Design Skiplist', 'Hard')]"
707,Design Linked List,Medium,942,935,124.6K,473.4K,26.3%,"['Design', 'Linked List']","[('Design Skiplist', 'Hard')]"
708,Insert into a Sorted Circular Linked List,Medium,455,599,70K,212.8K,32.9%,['Linked List'],"[('Insertion Sort List', 'Medium')]"
709,To Lower Case,Easy,2046,780,294.9K,365.6K,80.7%,['String'],[]
710,Random Pick with Blacklist,Hard,79,451,19.8K,59.7K,33.2%,"['Binary Search', 'Hash Table', 'Math', 'Randomized', 'Sorting']","[('Random Pick Index', 'Medium'), ('Random Pick with Weight', 'Medium')]"
711,Number of Distinct Islands II,Hard,200,183,7.3K,14.6K,50.2%,"['Breadth-First Search', 'Depth-First Search', 'Hash Function', 'Hash Table', 'Union Find']","[('Number of Distinct Islands', 'Medium')]"
712,Minimum ASCII Delete Sum for Two Strings,Medium,57,1459,49.6K,82.5K,60.0%,"['Dynamic Programming', 'String']","[('Delete Operation for Two Strings', 'Medium'), ('Edit Distance', 'Hard'), ('Longest Increasing Subsequence', 'Medium')]"
713,Subarray Product Less Than K,Medium,96,2546,109.4K,267.2K,40.9%,"['Array', 'Sliding Window']","[('Maximum Product Subarray', 'Medium'), ('Maximum Size Subarray Sum Equals k', 'Medium'), ('Subarray Sum Equals K', 'Medium'), ('Two Sum Less Than K', 'Easy')]"
714,Best Time to Buy and Sell Stock with Transaction Fee,Medium,77,2760,116.3K,198K,58.7%,"['Array', 'Dynamic Programming', 'Greedy']","[('Best Time to Buy and Sell Stock II', 'Easy')]"
715,Range Module,Hard,55,721,32.6K,78.1K,41.7%,"['Design', 'Ordered Set', 'Segment Tree']","[('Data Stream as Disjoint Intervals', 'Hard'), ('Insert Interval', 'Medium'), ('Merge Intervals', 'Medium')]"
716,Max Stack,Easy,275,1047,81.5K,186.9K,43.6%,"['Design', 'Doubly-Linked List', 'Linked List', 'Ordered Set', 'Stack']","[('Min Stack', 'Easy')]"
717,1-bit and 2-bit Characters,Easy,1531,598,91.6K,197.9K,46.3%,['Array'],"[('Gray Code', 'Medium')]"
718,Maximum Length of Repeated Subarray,Medium,64,2666,125.5K,245K,51.2%,"['Array', 'Binary Search', 'Dynamic Programming', 'Hash Function', 'Rolling Hash', 'Sliding Window']","[('Minimum Size Subarray Sum', 'Medium')]"
719,Find K-th Smallest Pair Distance,Hard,52,1479,46.2K,140.1K,33.0%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']","[('Find K Closest Elements', 'Medium'), ('Find K Pairs with Smallest Sums', 'Medium'), ('K-th Smallest Prime Fraction', 'Hard'), ('Kth Smallest Element in a Sorted Matrix', 'Medium'), ('Kth Smallest Number in Multiplication Table', 'Hard')]"
720,Longest Word in Dictionary,Medium,1141,986,90.3K,181.6K,49.7%,"['Array', 'Hash Table', 'Sorting', 'String', 'Trie']","[('Implement Magic Dictionary', 'Medium'), ('Longest Word With All Prefixes', 'Medium'), ('Longest Word in Dictionary through Deleting', 'Medium')]"
721,Accounts Merge,Medium,470,2668,157.4K,296.1K,53.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'String', 'Union Find']","[('Redundant Connection', 'Medium'), ('Sentence Similarity', 'Easy'), ('Sentence Similarity II', 'Medium')]"
722,Remove Comments,Medium,1286,479,45.5K,123.8K,36.8%,"['Array', 'String']","[('Mini Parser', 'Medium'), ('Ternary Expression Parser', 'Medium')]"
723,Candy Crush,Medium,248,603,38.1K,51.8K,73.5%,"['Array', 'Matrix', 'Simulation', 'Two Pointers']",[]
724,Find Pivot Index,Easy,325,1955,212.9K,448.3K,47.5%,"['Array', 'Prefix Sum']","[('Subarray Sum Equals K', 'Medium')]"
725,Split Linked List in Parts,Medium,159,1088,64.1K,119.5K,53.6%,['Linked List'],"[('Odd Even Linked List', 'Medium'), ('Rotate List', 'Medium')]"
726,Number of Atoms,Hard,181,700,35.5K,69.4K,51.2%,"['Hash Table', 'Stack', 'String']","[('Decode String', 'Medium'), ('Encode String with Shortest Length', 'Hard'), ('Parse Lisp Expression', 'Hard')]"
727,Minimum Window Subsequence,Hard,62,987,61.9K,145K,42.7%,"['Dynamic Programming', 'Sliding Window', 'String']","[('Longest Continuous Increasing Subsequence', 'Easy'), ('Minimum Window Substring', 'Hard')]"
728,Self Dividing Numbers,Easy,328,941,158.7K,208.4K,76.1%,['Math'],"[('Perfect Number', 'Easy')]"
729,My Calendar I,Medium,50,1445,116.7K,215.6K,54.1%,"['Design', 'Ordered Set', 'Segment Tree']","[('My Calendar II', 'Medium'), ('My Calendar III', 'Hard')]"
730,Count Different Palindromic Subsequences,Hard,53,882,21.1K,48.5K,43.5%,"['Dynamic Programming', 'String']","[('Longest Palindromic Subsequence', 'Medium')]"
731,My Calendar II,Medium,107,881,58.4K,113K,51.6%,"['Design', 'Ordered Set', 'Segment Tree']","[('My Calendar I', 'Medium'), ('My Calendar III', 'Hard')]"
732,My Calendar III,Hard,127,533,30.8K,48.3K,63.7%,"['Design', 'Ordered Set', 'Segment Tree']","[('My Calendar I', 'Medium'), ('My Calendar II', 'Medium')]"
733,Flood Fill,Easy,263,2191,245.6K,437.2K,56.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']","[('Island Perimeter', 'Easy')]"
734,Sentence Similarity,Easy,375,238,43.5K,102.2K,42.6%,"['Array', 'Hash Table', 'String']","[('Accounts Merge', 'Medium'), ('Number of Provinces', 'Medium'), ('Sentence Similarity II', 'Medium')]"
735,Asteroid Collision,Medium,176,2098,122.3K,281.1K,43.5%,"['Array', 'Stack']","[('Can Place Flowers', 'Easy')]"
736,Parse Lisp Expression,Hard,254,343,15.8K,31.6K,50.1%,"['Hash Table', 'Recursion', 'Stack', 'String']","[('Basic Calculator IV', 'Hard'), ('Number of Atoms', 'Hard'), ('Ternary Expression Parser', 'Medium')]"
737,Sentence Similarity II,Medium,39,619,51.3K,109.3K,46.9%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'String', 'Union Find']","[('Accounts Merge', 'Medium'), ('Number of Provinces', 'Medium'), ('Sentence Similarity', 'Easy')]"
738,Monotone Increasing Digits,Medium,78,663,30.7K,66.7K,46.0%,"['Greedy', 'Math']","[('Remove K Digits', 'Medium')]"
739,Daily Temperatures,Medium,135,4647,262.3K,401.1K,65.4%,"['Array', 'Monotonic Stack', 'Stack']","[('Next Greater Element I', 'Easy'), ('Online Stock Span', 'Medium')]"
740,Delete and Earn,Medium,133,1738,61.3K,118.9K,51.6%,"['Array', 'Dynamic Programming', 'Hash Table']","[('House Robber', 'Medium')]"
741,Cherry Pickup,Hard,100,1743,40.4K,113.6K,35.6%,"['Array', 'Dynamic Programming', 'Matrix']","[('Dungeon Game', 'Hard'), ('Minimum Path Sum', 'Medium')]"
742,Closest Leaf in a Binary Tree,Medium,119,623,30.7K,68.5K,44.8%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
743,Network Delay Time,Medium,253,2809,159.2K,344.7K,46.2%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']",[]
744,Find Smallest Letter Greater Than Target,Easy,822,746,114.1K,249.4K,45.7%,"['Array', 'Binary Search']",[]
745,Prefix and Suffix Search,Hard,293,788,40.4K,114.8K,35.2%,"['Design', 'String', 'Trie']","[('Design Add and Search Words Data Structure', 'Medium')]"
746,Min Cost Climbing Stairs,Easy,763,3704,274.4K,511.5K,53.7%,"['Array', 'Dynamic Programming']","[('Climbing Stairs', 'Easy')]"
747,Largest Number At Least Twice of Others,Easy,692,479,121.9K,278.9K,43.7%,"['Array', 'Sorting']",[]
748,Shortest Completing Word,Easy,742,245,41.6K,71.8K,58.0%,"['Hash Table', 'String']",[]
749,Contain Virus,Hard,325,155,6.9K,14.1K,49.0%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Simulation']",[]
750,Number Of Corner Rectangles,Medium,78,532,33.2K,49.3K,67.3%,"['Array', 'Dynamic Programming', 'Math', 'Matrix']",[]
751,IP to CIDR,Medium,12,2,12K,20.7K,57.9%,"['Bit Manipulation', 'String']","[('Restore IP Addresses', 'Medium'), ('Validate IP Address', 'Medium')]"
752,Open the Lock,Medium,71,2082,122.1K,223.1K,54.7%,"['Array', 'Breadth-First Search', 'Hash Table', 'String']",[]
753,Cracking the Safe,Hard,869,591,38.4K,72.5K,52.9%,"['Depth-First Search', 'Eulerian Circuit', 'Graph']",[]
754,Reach a Number,Medium,559,758,32.3K,79.2K,40.7%,"['Binary Search', 'Math']",[]
755,Pour Water,Medium,515,226,25.5K,57.4K,44.5%,"['Array', 'Simulation']","[('Trapping Rain Water', 'Hard')]"
756,Pyramid Transition Matrix,Medium,393,389,24.8K,44.4K,55.9%,"['Bit Manipulation', 'Breadth-First Search', 'Depth-First Search']",[]
757,Set Intersection Size At Least Two,Hard,47,376,13.3K,31.2K,42.8%,"['Array', 'Greedy', 'Sorting']",[]
758,Bold Words in String,Medium,106,201,14.1K,29K,48.4%,"['Array', 'Hash Table', 'String', 'String Matching', 'Trie']",[]
759,Employee Free Time,Hard,67,956,72.1K,104.2K,69.3%,"['Array', 'Heap (Priority Queue)', 'Sorting']","[('Interval List Intersections', 'Medium'), ('Merge Intervals', 'Medium')]"
760,Find Anagram Mappings,Easy,181,430,71.9K,87.5K,82.2%,"['Array', 'Hash Table']",[]
761,Special Binary String,Hard,146,434,11.7K,19.8K,59.2%,"['Recursion', 'String']","[('Valid Parenthesis String', 'Medium')]"
762,Prime Number of Set Bits in Binary Representation,Easy,412,349,57.8K,88.8K,65.1%,"['Bit Manipulation', 'Math']","[('Number of 1 Bits', 'Easy')]"
763,Partition Labels,Medium,202,4946,270.2K,345.3K,78.3%,"['Greedy', 'Hash Table', 'String', 'Two Pointers']","[('Merge Intervals', 'Medium')]"
764,Largest Plus Sign,Medium,128,638,27K,57.3K,47.1%,"['Array', 'Dynamic Programming']","[('Maximal Square', 'Medium')]"
765,Couples Holding Hands,Hard,72,1189,35.9K,64.2K,55.9%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Greedy', 'Union Find']","[('First Missing Positive', 'Hard'), ('K-Similar Strings', 'Hard'), ('Missing Number', 'Easy')]"
766,Toeplitz Matrix,Easy,96,1471,133.2K,201.7K,66.0%,"['Array', 'Matrix']","[('Valid Word Square', 'Easy')]"
767,Reorganize String,Medium,150,3180,152.6K,301K,50.7%,"['Counting', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sorting', 'String']","[('Rearrange String k Distance Apart', 'Hard'), ('Task Scheduler', 'Medium')]"
768,Max Chunks To Make Sorted II,Hard,25,667,28.4K,56.3K,50.4%,"['Array', 'Greedy', 'Monotonic Stack', 'Sorting', 'Stack']","[('Max Chunks To Make Sorted', 'Medium')]"
769,Max Chunks To Make Sorted,Medium,148,1169,52.1K,92.6K,56.3%,"['Array', 'Greedy', 'Monotonic Stack', 'Sorting', 'Stack']","[('Max Chunks To Make Sorted II', 'Hard')]"
770,Basic Calculator IV,Hard,920,94,6.8K,12.5K,54.6%,"['Hash Table', 'Math', 'Recursion', 'Stack', 'String']","[('Basic Calculator III', 'Hard'), ('Parse Lisp Expression', 'Hard')]"
771,Jewels and Stones,Easy,434,2825,647.9K,742.9K,87.2%,"['Hash Table', 'String']",[]
772,Basic Calculator III,Hard,231,632,60.9K,135K,45.1%,"['Math', 'Recursion', 'Stack', 'String']","[('Basic Calculator', 'Hard'), ('Basic Calculator II', 'Medium'), ('Basic Calculator IV', 'Hard'), ('Build Binary Expression Tree From Infix Expression', 'Hard')]"
773,Sliding Puzzle,Hard,32,1062,56.7K,91.8K,61.8%,"['Array', 'Breadth-First Search', 'Matrix']",[]
774,Minimize Max Distance to Gas Station,Hard,67,457,20.1K,40.9K,49.1%,"['Array', 'Binary Search']","[('Koko Eating Bananas', 'Medium')]"
775,Global and Local Inversions,Medium,269,877,49.9K,108.6K,46.0%,"['Array', 'Math']",[]
776,Split BST,Medium,74,774,22.6K,39.6K,57.1%,"['Binary Search Tree', 'Binary Tree', 'Recursion', 'Tree']","[('Delete Node in a BST', 'Medium')]"
777,Swap Adjacent in LR String,Medium,533,575,40.2K,112.3K,35.8%,"['String', 'Two Pointers']",[]
778,Swim in Rising Water,Hard,99,1288,51.1K,88.5K,57.7%,"['Array', 'Binary Search', 'Breadth-First Search', 'Depth-First Search', 'Heap (Priority Queue)', 'Matrix', 'Union Find']","[('Path With Minimum Effort', 'Medium')]"
779,K-th Symbol in Grammar,Medium,212,1007,58.9K,150.7K,39.1%,"['Bit Manipulation', 'Math', 'Recursion']",[]
780,Reaching Points,Hard,132,791,33.4K,109.4K,30.5%,['Math'],[]
781,Rabbits in Forest,Medium,402,465,28.4K,50.6K,56.2%,"['Greedy', 'Hash Table', 'Math']",[]
782,Transform to Chessboard,Hard,161,157,6.9K,14.7K,47.1%,"['Array', 'Bit Manipulation', 'Math', 'Matrix']",[]
783,Minimum Distance Between BST Nodes,Easy,270,1172,95.7K,175.1K,54.7%,"['Binary Search Tree', 'Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Inorder Traversal', 'Easy')]"
784,Letter Case Permutation,Medium,127,2227,148.2K,213.9K,69.3%,"['Backtracking', 'Bit Manipulation', 'String']","[('Brace Expansion', 'Medium'), ('Subsets', 'Medium')]"
785,Is Graph Bipartite?,Medium,237,2884,212.1K,431.7K,49.1%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']",[]
786,K-th Smallest Prime Fraction,Hard,33,557,20.5K,45.5K,45.1%,"['Array', 'Binary Search', 'Heap (Priority Queue)']","[('Find K-th Smallest Pair Distance', 'Hard'), ('Kth Smallest Element in a Sorted Matrix', 'Medium'), ('Kth Smallest Number in Multiplication Table', 'Hard')]"
787,Cheapest Flights Within K Stops,Medium,123,3307,161.3K,422.3K,38.2%,"['Breadth-First Search', 'Depth-First Search', 'Dynamic Programming', 'Graph', 'Heap (Priority Queue)', 'Shortest Path']","[('Maximum Vacation Days', 'Hard')]"
788,Rotated Digits,Easy,1551,461,70.9K,123.6K,57.4%,"['Dynamic Programming', 'Math']",[]
789,Escape The Ghosts,Medium,380,237,18K,30.6K,58.9%,"['Array', 'Math']","[('Cat and Mouse II', 'Hard')]"
790,Domino and Tromino Tiling,Medium,314,602,20.9K,51K,40.9%,['Dynamic Programming'],[]
791,Custom Sort String,Medium,226,1138,96.5K,146.1K,66.1%,"['Hash Table', 'Sorting', 'String']",[]
792,Number of Matching Subsequences,Medium,114,1981,87.5K,179.1K,48.9%,"['Hash Table', 'Sorting', 'String', 'Trie']","[('Is Subsequence', 'Easy'), ('Shortest Way to Form String', 'Medium')]"
793,Preimage Size of Factorial Zeroes Function,Hard,64,237,10.1K,24.8K,40.6%,"['Binary Search', 'Math']","[('Factorial Trailing Zeroes', 'Easy')]"
794,Valid Tic-Tac-Toe State,Medium,810,294,36.2K,105.1K,34.4%,"['Array', 'String']","[('Design Tic-Tac-Toe', 'Medium')]"
795,Number of Subarrays with Bounded Maximum,Medium,79,1232,42.8K,82.8K,51.7%,"['Array', 'Two Pointers']",[]
796,Rotate String,Easy,72,1215,106.2K,217.3K,48.9%,"['String', 'String Matching']",[]
797,All Paths From Source to Target,Medium,99,2263,150.1K,190.2K,78.9%,"['Backtracking', 'Breadth-First Search', 'Depth-First Search', 'Graph']",[]
798,Smallest Rotation with Highest Score,Hard,18,277,7.4K,16.2K,46.0%,"['Array', 'Prefix Sum']",[]
799,Champagne Tower,Medium,62,847,35.2K,79.5K,44.2%,['Dynamic Programming'],[]
800,Similar RGB Color,Easy,442,72,11.6K,18.4K,62.8%,"['Enumeration', 'Math', 'String']",[]
801,Minimum Swaps To Make Sequences Increasing,Hard,118,1643,44.9K,115.8K,38.8%,"['Array', 'Dynamic Programming']",[]
802,Find Eventual Safe States,Medium,248,1301,56.7K,112.2K,50.6%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']",[]
803,Bricks Falling When Hit,Hard,155,586,19K,59K,32.3%,"['Array', 'Matrix', 'Union Find']",[]
804,Unique Morse Code Words,Easy,881,977,190.6K,240.5K,79.2%,"['Array', 'Hash Table', 'String']",[]
805,Split Array With Same Average,Hard,98,578,20.9K,78K,26.8%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Math']",[]
806,Number of Lines To Write String,Easy,1008,311,45.3K,69.1K,65.7%,"['Array', 'String']",[]
807,Max Increase to Keep City Skyline,Medium,356,1230,105.5K,124.5K,84.7%,"['Array', 'Greedy', 'Matrix']",[]
808,Soup Servings,Medium,652,211,12.7K,30.6K,41.6%,"['Dynamic Programming', 'Math', 'Probability and Statistics']",[]
809,Expressive Words,Medium,1185,486,69.6K,151K,46.1%,"['Array', 'String', 'Two Pointers']",[]
810,Chalkboard XOR Game,Hard,215,85,5.4K,10.6K,51.1%,"['Array', 'Bit Manipulation', 'Brainteaser', 'Game Theory', 'Math']",[]
811,Subdomain Visit Count,Easy,929,761,130.7K,180.8K,72.3%,"['Array', 'Hash Table', 'String']",[]
812,Largest Triangle Area,Easy,1170,266,27.3K,46.1K,59.2%,"['Array', 'Geometry', 'Math']","[('Largest Perimeter Triangle', 'Easy')]"
813,Largest Sum of Averages,Medium,64,1295,34K,65.9K,51.6%,"['Array', 'Dynamic Programming']",[]
814,Binary Tree Pruning,Medium,58,1571,93.6K,130.8K,71.6%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
815,Bus Routes,Hard,37,1230,53.3K,121.1K,44.0%,"['Array', 'Breadth-First Search', 'Hash Table']",[]
816,Ambiguous Coordinates,Medium,534,223,23.9K,43K,55.7%,"['Backtracking', 'String']",[]
817,Linked List Components,Medium,1497,547,59.2K,102.4K,57.9%,"['Hash Table', 'Linked List']",[]
818,Race Car,Hard,75,700,26.4K,64.6K,40.9%,['Dynamic Programming'],[]
819,Most Common Word,Easy,2180,1013,239.9K,528.5K,45.4%,"['Hash Table', 'String']",[]
820,Short Encoding of Words,Medium,231,613,41.7K,75.9K,55.0%,"['Array', 'Hash Table', 'String', 'Trie']",[]
821,Shortest Distance to a Character,Easy,110,1705,111.2K,158.2K,70.3%,"['Array', 'String', 'Two Pointers']",[]
822,Card Flipping Game,Medium,550,90,11.3K,25.7K,43.9%,"['Array', 'Hash Table']",[]
823,Binary Trees With Factors,Medium,93,710,33.4K,76.4K,43.6%,"['Array', 'Dynamic Programming', 'Hash Table']",[]
824,Goat Latin,Easy,979,554,122.9K,183.2K,67.1%,['String'],[]
825,Friends Of Appropriate Ages,Medium,868,430,51K,114.3K,44.6%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']",[]
826,Most Profit Assigning Work,Medium,87,573,27.9K,70.6K,39.6%,"['Array', 'Binary Search', 'Greedy', 'Sorting', 'Two Pointers']",[]
827,Making A Large Island,Hard,25,891,39.9K,85.4K,46.7%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
828,Count Unique Characters of All Substrings of a Given String,Hard,68,681,16.6K,35.5K,46.8%,"['Dynamic Programming', 'String']",[]
829,Consecutive Numbers Sum,Hard,833,664,49K,124.4K,39.4%,"['Enumeration', 'Math']",[]
830,Positions of Large Groups,Easy,106,522,60.2K,118.7K,50.7%,['String'],[]
831,Masking Personal Information,Medium,367,99,12.7K,28.2K,44.9%,['String'],[]
832,Flipping an Image,Easy,186,1450,247.8K,315K,78.7%,"['Array', 'Matrix', 'Simulation', 'Two Pointers']",[]
833,Find And Replace in String,Medium,577,509,66.8K,128.7K,51.9%,"['Array', 'Sorting', 'String']",[]
834,Sum of Distances in Tree,Hard,48,1447,22.3K,46.9K,47.6%,"['Depth-First Search', 'Dynamic Programming', 'Graph', 'Tree']","[('Distribute Coins in Binary Tree', 'Medium')]"
835,Image Overlap,Medium,786,604,44.4K,72.2K,61.4%,"['Array', 'Matrix']",[]
836,Rectangle Overlap,Easy,338,1101,80.5K,188.6K,42.7%,"['Geometry', 'Math']","[('Rectangle Area', 'Medium')]"
837,New 21 Game,Medium,465,768,24.7K,69.1K,35.7%,"['Dynamic Programming', 'Math', 'Probability and Statistics', 'Sliding Window']",[]
838,Push Dominoes,Medium,80,938,30.1K,59.5K,50.6%,"['Dynamic Programming', 'String', 'Two Pointers']",[]
839,Similar String Groups,Hard,152,582,39.2K,91.8K,42.7%,"['Breadth-First Search', 'Depth-First Search', 'String', 'Union Find']",[]
840,Magic Squares In Grid,Medium,1384,208,29.3K,77.1K,38.0%,"['Array', 'Math', 'Matrix']","[('Largest Magic Square', 'Medium')]"
841,Keys and Rooms,Medium,139,2060,139.4K,208K,67.0%,"['Breadth-First Search', 'Depth-First Search', 'Graph']","[('Graph Valid Tree', 'Medium')]"
842,Split Array into Fibonacci Sequence,Medium,216,685,26.8K,72.1K,37.2%,"['Backtracking', 'String']","[('Additive Number', 'Medium'), ('Fibonacci Number', 'Easy')]"
843,Guess the Word,Hard,923,874,82K,180.2K,45.5%,"['Array', 'Game Theory', 'Interactive', 'Math', 'String']",[]
844,Backspace String Compare,Easy,120,2668,307.9K,652K,47.2%,"['Simulation', 'Stack', 'String', 'Two Pointers']","[('Crawler Log Folder', 'Easy')]"
845,Longest Mountain in Array,Medium,49,1280,71.2K,182.9K,38.9%,"['Array', 'Dynamic Programming', 'Enumeration', 'Two Pointers']","[('Minimum Number of Removals to Make Mountain Array', 'Hard')]"
846,Hand of Straights,Medium,101,1034,72.6K,130.3K,55.7%,"['Array', 'Greedy', 'Hash Table', 'Sorting']",[]
847,Shortest Path Visiting All Nodes,Hard,91,936,24.6K,45K,54.7%,"['Bit Manipulation', 'Bitmask', 'Breadth-First Search', 'Dynamic Programming', 'Graph']",[]
848,Shifting Letters,Medium,76,440,32.2K,71.1K,45.2%,"['Array', 'String']","[('Replace All Digits with Characters', 'Easy')]"
849,Maximize Distance to Closest Person,Medium,135,1414,112.5K,251.4K,44.7%,['Array'],"[('Exam Room', 'Medium')]"
850,Rectangle Area II,Hard,34,491,16.1K,33.1K,48.8%,"['Array', 'Line Sweep', 'Ordered Set', 'Segment Tree']",[]
851,Loud and Rich,Medium,367,368,16.2K,30.4K,53.4%,"['Array', 'Depth-First Search', 'Graph', 'Topological Sort']",[]
852,Peak Index in a Mountain Array,Easy,1421,1242,241.8K,337.8K,71.6%,"['Array', 'Binary Search']","[('Find Peak Element', 'Medium'), ('Find in Mountain Array', 'Hard'), ('Minimum Number of Removals to Make Mountain Array', 'Hard')]"
853,Car Fleet,Medium,307,811,49.7K,110.6K,44.9%,"['Array', 'Sorting']","[('Car Fleet II', 'Hard')]"
854,K-Similar Strings,Hard,45,636,25.4K,65.6K,38.7%,"['Breadth-First Search', 'String']","[('Couples Holding Hands', 'Hard')]"
855,Exam Room,Medium,315,767,39.6K,91.3K,43.4%,"['Design', 'Ordered Set']","[('Maximize Distance to Closest Person', 'Medium')]"
856,Score of Parentheses,Medium,72,2416,79.4K,122K,65.1%,"['Stack', 'String']",[]
857,Minimum Cost to Hire K Workers,Hard,152,1289,41K,80.4K,50.9%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Sorting']",[]
858,Mirror Reflection,Medium,676,336,24.7K,41.6K,59.5%,"['Geometry', 'Math']",[]
859,Buddy Strings,Easy,743,1088,97K,337.3K,28.7%,"['Hash Table', 'String']","[('Check if One String Swap Can Make Strings Equal', 'Easy'), ('Determine if Two Strings Are Close', 'Medium')]"
860,Lemonade Change,Easy,103,910,76.3K,146.9K,52.0%,"['Array', 'Greedy']",[]
861,Score After Flipping Matrix,Medium,153,760,28.6K,38.6K,74.0%,"['Array', 'Bit Manipulation', 'Greedy', 'Matrix']",[]
862,Shortest Subarray with Sum at Least K,Hard,45,1957,49.6K,195.8K,25.3%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Monotonic Queue', 'Prefix Sum', 'Queue', 'Sliding Window']",[]
863,All Nodes Distance K in Binary Tree,Medium,80,4026,149.3K,253.7K,58.8%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
864,Shortest Path to Get All Keys,Hard,23,597,17.6K,41K,42.9%,"['Bit Manipulation', 'Breadth-First Search']",[]
865,Smallest Subtree with all the Deepest Nodes,Medium,305,1452,80.1K,121.8K,65.7%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
866,Prime Palindrome,Medium,662,261,22.5K,89.6K,25.1%,['Math'],[]
867,Transpose Matrix,Easy,342,730,105.1K,170.1K,61.8%,"['Array', 'Matrix', 'Simulation']",[]
868,Binary Gap,Easy,567,328,49.4K,80.6K,61.2%,"['Bit Manipulation', 'Math']",[]
869,Reordered Power of 2,Medium,155,467,37K,60.4K,61.3%,"['Counting', 'Enumeration', 'Math', 'Sorting']",[]
870,Advantage Shuffle,Medium,67,1055,47K,92.5K,50.8%,"['Array', 'Greedy', 'Sorting']",[]
871,Minimum Number of Refueling Stops,Hard,35,1712,46.4K,133.3K,34.8%,"['Array', 'Dynamic Programming', 'Greedy', 'Heap (Priority Queue)']",[]
872,Leaf-Similar Trees,Easy,51,1286,133.8K,207.2K,64.6%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
873,Length of Longest Fibonacci Subsequence,Medium,43,1109,40.7K,84K,48.4%,"['Array', 'Dynamic Programming', 'Hash Table']","[('Fibonacci Number', 'Easy')]"
874,Walking Robot Simulation,Easy,1041,266,26.8K,73K,36.7%,"['Array', 'Simulation']",[]
875,Koko Eating Bananas,Medium,101,1736,80.9K,150.6K,53.8%,"['Array', 'Binary Search']","[('Minimize Max Distance to Gas Station', 'Hard')]"
876,Middle of the Linked List,Easy,79,2705,353.4K,508.2K,69.5%,"['Linked List', 'Two Pointers']",[]
877,Stone Game,Medium,1472,1264,97K,143.2K,67.7%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math']","[('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
878,Nth Magical Number,Hard,72,311,12.7K,43.6K,29.1%,"['Binary Search', 'Math']",[]
879,Profitable Schemes,Hard,35,335,12.4K,30.7K,40.3%,"['Array', 'Dynamic Programming']",[]
880,Decoded String at Index,Medium,168,980,30.2K,107.1K,28.2%,"['Stack', 'String']",[]
881,Boats to Save People,Medium,51,1399,77.1K,156.4K,49.3%,"['Array', 'Greedy', 'Sorting', 'Two Pointers']",[]
882,Reachable Nodes In Subdivided Graph,Hard,162,203,7.9K,18.2K,43.5%,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']",[]
883,Projection Area of 3D Shapes,Easy,1012,320,35.4K,51.4K,68.9%,"['Array', 'Geometry', 'Math', 'Matrix']",[]
884,Uncommon Words from Two Sentences,Easy,110,666,78.1K,121.1K,64.5%,"['Hash Table', 'String']",[]
885,Spiral Matrix III,Medium,424,353,28.4K,39.9K,71.3%,"['Array', 'Matrix', 'Simulation']","[('Spiral Matrix', 'Medium'), ('Spiral Matrix II', 'Medium')]"
886,Possible Bipartition,Medium,39,1583,80.7K,175.9K,45.9%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']",[]
887,Super Egg Drop,Hard,103,1623,33.3K,123.8K,26.9%,"['Binary Search', 'Dynamic Programming', 'Math']","[('Egg Drop With 2 Eggs and N Floors', 'Medium')]"
888,Fair Candy Swap,Easy,172,825,65.2K,109.8K,59.4%,"['Array', 'Binary Search', 'Hash Table', 'Sorting']",[]
889,Construct Binary Tree from Preorder and Postorder Traversal,Medium,65,1372,54.7K,80K,68.3%,"['Array', 'Binary Tree', 'Divide and Conquer', 'Hash Table', 'Tree']",[]
890,Find and Replace Pattern,Medium,104,1374,84.9K,112.4K,75.5%,"['Array', 'Hash Table', 'String']",[]
891,Sum of Subsequence Widths,Hard,118,355,11.4K,34.1K,33.4%,"['Array', 'Math', 'Sorting']",[]
892,Surface Area of 3D Shapes,Easy,490,340,24.1K,39.9K,60.3%,"['Array', 'Geometry', 'Math', 'Matrix']",[]
893,Groups of Special-Equivalent Strings,Easy,1328,363,37.6K,53.8K,69.9%,"['Array', 'Hash Table', 'String']",[]
894,All Possible Full Binary Trees,Medium,138,1635,57.3K,73.4K,78.0%,"['Binary Tree', 'Dynamic Programming', 'Memoization', 'Recursion', 'Tree']",[]
895,Maximum Frequency Stack,Hard,37,1984,73.6K,115.6K,63.7%,"['Design', 'Hash Table', 'Ordered Set', 'Stack']",[]
896,Monotonic Array,Easy,45,1085,159.8K,276.3K,57.8%,['Array'],[]
897,Increasing Order Search Tree,Easy,545,1586,133.3K,177.6K,75.1%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Stack', 'Tree']",[]
898,Bitwise ORs of Subarrays,Medium,152,771,21.6K,61K,35.3%,"['Array', 'Bit Manipulation', 'Dynamic Programming']",[]
899,Orderly Queue,Hard,232,273,10K,18.7K,53.7%,"['Math', 'Sorting', 'String']",[]
900,RLE Iterator,Medium,112,369,35.4K,62.8K,56.4%,"['Array', 'Counting', 'Design', 'Iterator']",[]
901,Online Stock Span,Medium,180,1642,95.9K,155K,61.9%,"['Data Stream', 'Design', 'Monotonic Stack', 'Stack']","[('Daily Temperatures', 'Medium')]"
902,Numbers At Most N Given Digit Set,Hard,70,532,21K,58K,36.2%,"['Array', 'Binary Search', 'Dynamic Programming', 'Math']",[]
903,Valid Permutations for DI Sequence,Hard,33,385,9.3K,16.7K,55.9%,['Dynamic Programming'],[]
904,Fruit Into Baskets,Medium,5,71,142.2K,329.1K,43.2%,"['Array', 'Hash Table', 'Sliding Window']",[]
905,Sort Array By Parity,Easy,99,1888,347.6K,463.3K,75.0%,"['Array', 'Sorting', 'Two Pointers']",[]
906,Super Palindromes,Hard,357,278,20.1K,51.4K,39.0%,"['Enumeration', 'Math']",[]
907,Sum of Subarray Minimums,Medium,136,2208,43.8K,133.2K,32.9%,"['Array', 'Dynamic Programming', 'Monotonic Stack', 'Stack']",[]
908,Smallest Range I,Easy,1409,343,51.9K,78K,66.5%,"['Array', 'Math']",[]
909,Snakes and Ladders,Medium,2,7,51.9K,131.8K,39.4%,"['Array', 'Breadth-First Search', 'Matrix']",[]
910,Smallest Range II,Medium,293,757,27K,86K,31.4%,"['Array', 'Greedy', 'Math', 'Sorting']",[]
911,Online Election,Medium,427,520,32.6K,63K,51.8%,"['Array', 'Binary Search', 'Design', 'Hash Table']","[('Rank Teams by Votes', 'Medium')]"
912,Sort an Array,Medium,406,1025,163.4K,256.4K,63.7%,"['Array', 'Bucket Sort', 'Counting Sort', 'Divide and Conquer', 'Heap (Priority Queue)', 'Merge Sort', 'Radix Sort', 'Sorting']",[]
913,Cat and Mouse,Hard,93,491,12.4K,35.4K,35.1%,"['Breadth-First Search', 'Dynamic Programming', 'Game Theory', 'Graph', 'Math', 'Memoization']","[('Cat and Mouse II', 'Hard')]"
914,X of a Kind in a Deck of Cards,Easy,232,915,69.9K,207.5K,33.7%,"['Array', 'Counting', 'Hash Table', 'Math', 'Number Theory']",[]
915,Partition Array into Disjoint Intervals,Medium,39,544,29.8K,63K,47.2%,['Array'],[]
916,Word Subsets,Medium,113,772,45.1K,85.5K,52.7%,"['Array', 'Hash Table', 'String']",[]
917,Reverse Only Letters,Easy,45,916,86.8K,145.9K,59.5%,"['String', 'Two Pointers']",[]
918,Maximum Sum Circular Subarray,Medium,78,1766,73.9K,213K,34.7%,"['Array', 'Divide and Conquer', 'Dynamic Programming', 'Monotonic Queue', 'Queue']",[]
919,Complete Binary Tree Inserter,Medium,65,491,25.8K,43K,60.0%,"['Binary Tree', 'Breadth-First Search', 'Design', 'Tree']",[]
920,Number of Music Playlists,Hard,60,580,15.2K,31.4K,48.4%,"['Combinatorics', 'Dynamic Programming', 'Math']",[]
921,Minimum Add to Make Parentheses Valid,Medium,89,1371,111.9K,148.2K,75.5%,"['Greedy', 'Stack', 'String']",[]
922,Sort Array By Parity II,Easy,59,1148,134.6K,190.4K,70.7%,"['Array', 'Sorting', 'Two Pointers']",[]
923,3Sum With Multiplicity,Medium,128,738,41.3K,100.7K,41.0%,"['Array', 'Counting', 'Hash Table', 'Sorting', 'Two Pointers']",[]
924,Minimize Malware Spread,Hard,348,454,32K,76.5K,41.8%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
925,Long Pressed Name,Easy,198,1128,71K,196.2K,36.2%,"['String', 'Two Pointers']",[]
926,Flip String to Monotone Increasing,Medium,26,829,28.8K,53.6K,53.8%,"['Dynamic Programming', 'String']",[]
927,Three Equal Parts,Hard,67,327,9.8K,28.2K,34.8%,"['Array', 'Math']",[]
928,Minimize Malware Spread II,Hard,63,321,13.1K,31.6K,41.5%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
929,Unique Email Addresses,Easy,225,1241,269.3K,400.9K,67.2%,"['Array', 'Hash Table', 'String']",[]
930,Binary Subarrays With Sum,Medium,35,917,34.5K,75.1K,46.0%,"['Array', 'Hash Table', 'Prefix Sum', 'Sliding Window']",[]
931,Minimum Falling Path Sum,Medium,85,1352,79.6K,123.2K,64.6%,"['Array', 'Dynamic Programming', 'Matrix']","[('Minimum Falling Path Sum II', 'Hard')]"
932,Beautiful Array,Medium,619,512,16.8K,27.3K,61.6%,"['Array', 'Divide and Conquer', 'Math']",[]
933,Number of Recent Calls,Easy,2252,617,105.7K,145.5K,72.6%,"['Data Stream', 'Design', 'Queue']",[]
934,Shortest Bridge,Medium,95,1531,56.8K,111.9K,50.8%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']",[]
935,Knight Dialer,Medium,307,945,54.6K,115.4K,47.3%,['Dynamic Programming'],[]
936,Stamping The Sequence,Hard,114,458,22.6K,42.3K,53.3%,"['Greedy', 'Queue', 'Stack', 'String']",[]
937,Reorder Data in Log Files,Easy,3068,1187,222.2K,402.8K,55.2%,"['Array', 'Sorting', 'String']",[]
938,Range Sum of BST,Easy,301,2630,406.5K,486.4K,83.6%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']",[]
939,Minimum Area Rectangle,Medium,185,1052,74K,140.5K,52.7%,"['Array', 'Geometry', 'Hash Table', 'Math', 'Sorting']",[]
940,Distinct Subsequences II,Hard,19,613,15.6K,37.8K,41.3%,"['Dynamic Programming', 'String']",[]
941,Valid Mountain Array,Easy,102,1083,176.7K,541.4K,32.6%,['Array'],"[('Minimum Number of Removals to Make Mountain Array', 'Hard')]"
942,DI String Match,Easy,499,1254,86.6K,116.6K,74.3%,"['Array', 'Greedy', 'Math', 'String', 'Two Pointers']",[]
943,Find the Shortest Superstring,Hard,112,796,21K,45.8K,45.9%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'String']",[]
944,Delete Columns to Make Sorted,Easy,1891,270,56.6K,80.2K,70.6%,"['Array', 'String']",[]
945,Minimum Increment to Make Array Unique,Medium,31,722,39.9K,84.1K,47.4%,"['Array', 'Counting', 'Greedy', 'Sorting']",[]
946,Validate Stack Sequences,Medium,36,1889,109.8K,170.2K,64.5%,"['Array', 'Simulation', 'Stack']",[]
947,Most Stones Removed with Same Row or Column,Medium,473,1665,77.3K,138.1K,56.0%,"['Depth-First Search', 'Graph', 'Union Find']",[]
948,Bag of Tokens,Medium,272,541,34.8K,75.5K,46.1%,"['Array', 'Greedy', 'Sorting', 'Two Pointers']",[]
949,Largest Time for Given Digits,Medium,846,472,63.2K,175.5K,36.0%,"['Enumeration', 'String']",[]
950,Reveal Cards In Increasing Order,Medium,228,1408,48.6K,64K,75.9%,"['Array', 'Queue', 'Simulation', 'Sorting']",[]
951,Flip Equivalent Binary Trees,Medium,58,1135,81.4K,123.3K,66.0%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
952,Largest Component Size by Common Factor,Hard,69,611,27.1K,74.2K,36.5%,"['Array', 'Math', 'Union Find']",[]
953,Verifying an Alien Dictionary,Easy,747,1898,257.6K,493.7K,52.2%,"['Array', 'Hash Table', 'String']",[]
954,Array of Doubled Pairs,Medium,65,466,26.1K,74.9K,34.9%,"['Array', 'Greedy', 'Hash Table', 'Sorting']",[]
955,Delete Columns to Make Sorted II,Medium,56,361,13.2K,38.9K,34.0%,"['Array', 'Greedy', 'String']",[]
956,Tallest Billboard,Hard,19,497,10.6K,26.6K,39.8%,"['Array', 'Dynamic Programming']",[]
957,Prison Cells After N Days,Medium,1349,1048,126.6K,316.5K,40.0%,"['Array', 'Bit Manipulation', 'Hash Table', 'Math']",[]
958,Check Completeness of a Binary Tree,Medium,19,1404,86.8K,164.8K,52.6%,"['Binary Tree', 'Breadth-First Search', 'Tree']",[]
959,Regions Cut By Slashes,Medium,291,1476,29.1K,43K,67.7%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']",[]
960,Delete Columns to Make Sorted III,Hard,9,341,8.8K,15.7K,55.6%,"['Array', 'Dynamic Programming', 'String']",[]
961,N-Repeated Element in Size 2N Array,Easy,267,698,154.3K,205.9K,74.9%,"['Array', 'Hash Table']",[]
962,Maximum Width Ramp,Medium,25,834,26.9K,57.4K,46.9%,"['Array', 'Monotonic Stack', 'Stack']",[]
963,Minimum Area Rectangle II,Medium,337,241,18.5K,34.7K,53.2%,"['Array', 'Geometry', 'Math']",[]
964,Least Operators to Express Number,Hard,56,220,6.7K,14.7K,45.5%,"['Dynamic Programming', 'Math']",[]
965,Univalued Binary Tree,Easy,52,908,127.7K,187.4K,68.1%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Find All The Lonely Nodes', 'Easy')]"
966,Vowel Spellchecker,Medium,661,304,32.4K,62.6K,51.8%,"['Array', 'Hash Table', 'String']",[]
967,Numbers With Same Consecutive Differences,Medium,127,720,45K,98K,45.9%,"['Backtracking', 'Breadth-First Search']",[]
968,Binary Tree Cameras,Hard,29,1899,49.2K,120.7K,40.8%,"['Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']","[('Distribute Coins in Binary Tree', 'Medium')]"
969,Pancake Sorting,Medium,1067,846,62.6K,90.7K,69.0%,"['Array', 'Greedy', 'Sorting', 'Two Pointers']",[]
970,Powerful Integers,Medium,56,167,43K,99K,43.4%,"['Hash Table', 'Math']",[]
971,Flip Binary Tree To Match Preorder Traversal,Medium,220,579,31.2K,62.5K,49.9%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
972,Equal Rational Numbers,Hard,164,58,4.8K,11.3K,42.2%,"['Math', 'String']",[]
973,K Closest Points to Origin,Medium,167,3366,502.1K,771.5K,65.1%,"['Array', 'Divide and Conquer', 'Geometry', 'Heap (Priority Queue)', 'Math', 'Quickselect', 'Sorting']","[('Find Nearest Point That Has the Same X or Y Coordinate', 'Easy'), ('Kth Largest Element in an Array', 'Medium'), ('Top K Frequent Elements', 'Medium'), ('Top K Frequent Words', 'Medium')]"
974,Subarray Sums Divisible by K,Medium,122,1822,65.6K,126.9K,51.7%,"['Array', 'Hash Table', 'Prefix Sum']","[('Make Sum Divisible by P', 'Medium'), ('Subarray Sum Equals K', 'Medium')]"
975,Odd Even Jump,Hard,304,1023,44.4K,108K,41.1%,"['Array', 'Dynamic Programming', 'Monotonic Stack', 'Ordered Set', 'Stack']",[]
976,Largest Perimeter Triangle,Easy,59,578,48.8K,82K,59.5%,"['Array', 'Greedy', 'Math', 'Sorting']","[('Largest Triangle Area', 'Easy')]"
977,Squares of a Sorted Array,Easy,117,2693,529.2K,739.8K,71.5%,"['Array', 'Sorting', 'Two Pointers']","[('Merge Sorted Array', 'Easy'), ('Sort Transformed Array', 'Medium')]"
978,Longest Turbulent Subarray,Medium,133,715,42.6K,91.1K,46.8%,"['Array', 'Dynamic Programming', 'Sliding Window']","[('Maximum Subarray', 'Easy')]"
979,Distribute Coins in Binary Tree,Medium,86,2690,62.7K,89.3K,70.3%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Binary Tree Cameras', 'Hard'), ('Sum of Distances in Tree', 'Hard')]"
980,Unique Paths III,Hard,96,1628,75.5K,97.9K,77.2%,"['Array', 'Backtracking', 'Bit Manipulation', 'Matrix']","[('Sudoku Solver', 'Hard'), ('Unique Paths II', 'Medium'), ('Word Search II', 'Hard')]"
981,Time Based Key-Value Store,Medium,158,1367,119.6K,220.1K,54.3%,"['Binary Search', 'Design', 'Hash Table', 'String']",[]
982,Triples with Bitwise AND Equal To Zero,Hard,165,169,10.5K,18.4K,56.8%,"['Array', 'Bit Manipulation', 'Hash Table']",[]
983,Minimum Cost For Tickets,Medium,60,3132,108.7K,172.4K,63.0%,"['Array', 'Dynamic Programming']","[('Coin Change', 'Medium')]"
984,String Without AAA or BBB,Medium,299,332,23.9K,61K,39.2%,"['Greedy', 'String']",[]
985,Sum of Even Numbers After Queries,Easy,196,570,56.9K,94.2K,60.5%,"['Array', 'Simulation']",[]
986,Interval List Intersections,Medium,66,2483,194.7K,282.4K,69.0%,"['Array', 'Two Pointers']","[('Employee Free Time', 'Hard'), ('Merge Intervals', 'Medium'), ('Merge Sorted Array', 'Easy')]"
987,Vertical Order Traversal of a Binary Tree,Hard,2606,1733,150K,381.6K,39.3%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
988,Smallest String Starting From Leaf,Medium,131,710,40.1K,84.7K,47.3%,"['Binary Tree', 'Depth-First Search', 'String', 'Tree']","[('Binary Tree Paths', 'Easy'), ('Sum Root to Leaf Numbers', 'Medium')]"
989,Add to Array-Form of Integer,Easy,104,682,76.9K,170.8K,45.0%,"['Array', 'Math']","[('Add Binary', 'Easy'), ('Add Strings', 'Easy'), ('Add Two Numbers', 'Medium'), ('Plus One', 'Easy')]"
990,Satisfiability of Equality Equations,Medium,8,925,31.4K,65.8K,47.7%,"['Array', 'Graph', 'String', 'Union Find']",[]
991,Broken Calculator,Medium,134,927,43.8K,87.9K,49.8%,"['Greedy', 'Math']","[('2 Keys Keyboard', 'Medium')]"
992,Subarrays with K Different Integers,Hard,29,1949,48.7K,94.4K,51.6%,"['Array', 'Counting', 'Hash Table', 'Sliding Window']","[('Longest Substring Without Repeating Characters', 'Medium'), ('Longest Substring with At Most K Distinct Characters', 'Medium'), ('Longest Substring with At Most Two Distinct Characters', 'Medium')]"
993,Cousins in Binary Tree,Easy,94,1671,155.5K,296.7K,52.4%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Level Order Traversal', 'Medium')]"
994,Rotting Oranges,Medium,221,3708,229.1K,459K,49.9%,"['Array', 'Breadth-First Search', 'Matrix']","[('Walls and Gates', 'Medium')]"
995,Minimum Number of K Consecutive Bit Flips,Hard,45,589,21.1K,42K,50.4%,"['Array', 'Bit Manipulation', 'Prefix Sum', 'Sliding Window']","[('Bulb Switcher', 'Medium')]"
996,Number of Squareful Arrays,Hard,23,519,20.3K,41.8K,48.6%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Math']","[('Permutations II', 'Medium')]"
997,Find the Town Judge,Easy,138,1766,179.8K,360.3K,49.9%,"['Array', 'Graph', 'Hash Table']","[('Find the Celebrity', 'Medium')]"
998,Maximum Binary Tree II,Medium,545,282,22.5K,34.8K,64.5%,"['Binary Tree', 'Tree']","[('Maximum Binary Tree', 'Medium')]"
999,Available Captures for Rook,Easy,518,350,43.5K,64.3K,67.7%,"['Array', 'Matrix', 'Simulation']",[]
1000,Minimum Cost to Merge Stones,Hard,65,1042,21.6K,52.6K,41.0%,"['Array', 'Dynamic Programming']","[('Burst Balloons', 'Hard'), ('Minimum Cost to Connect Sticks', 'Medium')]"
1001,Grid Illumination,Hard,85,298,12.4K,34.7K,35.8%,"['Array', 'Hash Table']","[('N-Queens', 'Hard')]"
1002,Find Common Characters,Easy,152,1645,114.5K,166.6K,68.7%,"['Array', 'Hash Table', 'String']","[('Intersection of Two Arrays II', 'Easy')]"
1003,Check If Word Is Valid After Substitutions,Medium,402,405,33K,57.8K,57.1%,"['Stack', 'String']","[('Valid Parentheses', 'Easy')]"
1004,Max Consecutive Ones III,Medium,41,2730,131.7K,216.6K,60.8%,"['Array', 'Binary Search', 'Prefix Sum', 'Sliding Window']","[('Longest Repeating Character Replacement', 'Medium'), ('Longest Substring with At Most K Distinct Characters', 'Medium'), ('Max Consecutive Ones', 'Easy'), ('Max Consecutive Ones II', 'Medium')]"
1005,Maximize Sum Of Array After K Negations,Easy,61,643,41.1K,78.6K,52.3%,"['Array', 'Greedy', 'Sorting']",[]
1006,Clumsy Factorial,Medium,184,130,16.9K,31.3K,54.1%,"['Math', 'Simulation', 'Stack']",[]
1007,Minimum Domino Rotations For Equal Row,Medium,196,1328,124.8K,244.9K,51.0%,"['Array', 'Greedy']",[]
1008,Construct Binary Search Tree from Preorder Traversal,Medium,50,2127,171.2K,216.9K,78.9%,"['Array', 'Binary Search Tree', 'Binary Tree', 'Monotonic Stack', 'Stack', 'Tree']",[]
1009,Complement of Base 10 Integer,Easy,45,486,67.4K,110K,61.2%,['Bit Manipulation'],[]
1010,Pairs of Songs With Total Durations Divisible by 60,Medium,88,1522,110.4K,215.5K,51.2%,"['Array', 'Counting', 'Hash Table']",[]
1011,Capacity To Ship Packages Within D Days,Medium,61,2404,81.2K,133.9K,60.7%,"['Array', 'Binary Search', 'Greedy']","[('Cutting Ribbons', 'Medium')]"
1012,Numbers With Repeated Digits,Hard,55,309,7.5K,19.7K,38.0%,"['Dynamic Programming', 'Math']",[]
1013,Partition Array Into Three Parts With Equal Sum,Easy,93,784,50.2K,107.3K,46.7%,"['Array', 'Greedy']",[]
1014,Best Sightseeing Pair,Medium,27,675,24K,45.1K,53.2%,"['Array', 'Dynamic Programming']",[]
1015,Smallest Integer Divisible by K,Medium,397,390,28.2K,67.2K,42.0%,"['Hash Table', 'Math']",[]
1016,Binary String With Substrings Representing 1 To N,Medium,417,188,23.8K,40.7K,58.5%,['String'],[]
1017,Convert to Base -2,Medium,196,264,15.1K,25.5K,59.4%,['Math'],"[('Encode Number', 'Medium')]"
1018,Binary Prefix Divisible By 5,Easy,123,420,33.3K,70.1K,47.5%,['Array'],[]
1019,Next Greater Node In Linked List,Medium,78,1530,76.8K,131.6K,58.4%,"['Array', 'Linked List', 'Monotonic Stack', 'Stack']",[]
1020,Number of Enclaves,Medium,28,603,29.6K,49.5K,59.9%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
1021,Remove Outermost Parentheses,Easy,931,902,142.3K,179.3K,79.4%,"['Stack', 'String']",[]
1022,Sum of Root To Leaf Binary Numbers,Easy,98,1360,100.4K,139.6K,71.9%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1023,Camelcase Matching,Medium,181,400,24.6K,42.5K,57.9%,"['String', 'String Matching', 'Trie', 'Two Pointers']",[]
1024,Video Stitching,Medium,39,817,35.2K,71.7K,49.1%,"['Array', 'Dynamic Programming', 'Greedy']",[]
1025,Divisor Game,Easy,2354,910,115.1K,173.8K,66.3%,"['Brainteaser', 'Dynamic Programming', 'Game Theory', 'Math']",[]
1026,Maximum Difference Between Node and Ancestor,Medium,42,1370,87.4K,124.5K,70.2%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1027,Longest Arithmetic Subsequence,Medium,81,1433,66.7K,135.8K,49.1%,"['Array', 'Binary Search', 'Dynamic Programming', 'Hash Table']",[]
1028,Recover a Tree From Preorder Traversal,Hard,26,730,27.8K,38.9K,71.3%,"['Binary Tree', 'Depth-First Search', 'String', 'Tree']",[]
1029,Two City Scheduling,Medium,205,1967,117.2K,199.9K,58.6%,"['Array', 'Greedy', 'Sorting']",[]
1030,Matrix Cells in Distance Order,Easy,162,331,34.6K,50.5K,68.5%,"['Array', 'Geometry', 'Math', 'Matrix', 'Sorting']",[]
1031,Maximum Sum of Two Non-Overlapping Subarrays,Medium,55,1133,38.9K,65.9K,59.0%,"['Array', 'Dynamic Programming', 'Sliding Window']",[]
1032,Stream of Characters,Hard,123,858,48.8K,100.3K,48.7%,"['Array', 'Data Stream', 'Design', 'String', 'Trie']",[]
1033,Moving Stones Until Consecutive,Easy,544,118,17.5K,39.8K,43.8%,"['Brainteaser', 'Math']",[]
1034,Coloring A Border,Medium,403,218,14.8K,32.1K,46.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix']","[('Island Perimeter', 'Easy')]"
1035,Uncrossed Lines,Medium,24,1242,55.8K,98.9K,56.5%,"['Array', 'Dynamic Programming']","[('Edit Distance', 'Hard')]"
1036,Escape a Large Maze,Hard,121,324,12.9K,37.6K,34.3%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Hash Table']",[]
1037,Valid Boomerang,Easy,305,171,25.8K,68.9K,37.4%,"['Geometry', 'Math']",[]
1038,Binary Search Tree to Greater Sum Tree,Medium,117,1742,89.9K,108K,83.3%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Tree']",[]
1039,Minimum Score Triangulation of Polygon,Medium,94,727,16.7K,32.7K,51.1%,"['Array', 'Dynamic Programming']",[]
1040,Moving Stones Until Consecutive II,Medium,441,255,6.8K,12.4K,54.8%,"['Array', 'Math', 'Sorting', 'Two Pointers']",[]
1041,Robot Bounded In Circle,Medium,389,1437,98.7K,180K,54.8%,"['Math', 'Simulation', 'String']",[]
1042,Flower Planting With No Adjacent,Medium,585,610,43.8K,89.3K,49.0%,"['Breadth-First Search', 'Depth-First Search', 'Graph']",[]
1043,Partition Array for Maximum Sum,Medium,163,1440,35K,51.2K,68.3%,"['Array', 'Dynamic Programming']",[]
1044,Longest Duplicate Substring,Hard,266,922,35.6K,114.8K,31.0%,"['Binary Search', 'Hash Function', 'Rolling Hash', 'Sliding Window', 'String', 'Suffix Array']",[]
1045,Customers Who Bought All Products,Medium,27,122,23.7K,35K,67.7%,['Database'],[]
1046,Last Stone Weight,Easy,39,1488,178.2K,285.3K,62.5%,"['Array', 'Heap (Priority Queue)']",[]
1047,Remove All Adjacent Duplicates In String,Easy,114,1969,185.5K,259.1K,71.6%,"['Stack', 'String']","[('Remove All Adjacent Duplicates in String II', 'Medium')]"
1048,Longest String Chain,Medium,116,2174,127.3K,226.1K,56.3%,"['Array', 'Dynamic Programming', 'Hash Table', 'String', 'Two Pointers']",[]
1049,Last Stone Weight II,Medium,53,1405,36.4K,76.5K,47.6%,"['Array', 'Dynamic Programming']",[]
1050,Actors and Directors Who Cooperated At Least Three Times,Easy,18,85,28.5K,39.4K,72.4%,['Database'],[]
1051,Height Checker,Easy,20,131,139.4K,190.5K,73.2%,"['Array', 'Counting Sort', 'Sorting']",[]
1052,Grumpy Bookstore Owner,Medium,77,837,43.1K,76.8K,56.1%,"['Array', 'Sliding Window']",[]
1053,Previous Permutation With One Swap,Medium,8,64,23.4K,45.1K,51.8%,"['Array', 'Greedy']",[]
1054,Distant Barcodes,Medium,29,631,24.1K,54K,44.6%,"['Array', 'Counting', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sorting']",[]
1055,Shortest Way to Form String,Medium,42,674,46.3K,80.5K,57.5%,"['Dynamic Programming', 'Greedy', 'String']","[('Is Subsequence', 'Easy'), ('Number of Matching Subsequences', 'Medium')]"
1056,Confusing Number,Easy,86,129,20K,42.9K,46.6%,['Math'],"[('Confusing Number II', 'Hard'), ('Strobogrammatic Number', 'Easy')]"
1057,Campus Bikes,Medium,126,713,50.5K,87.1K,58.0%,"['Array', 'Greedy', 'Sorting']","[('Campus Bikes II', 'Medium')]"
1058,Minimize Rounding Error to Meet Target,Medium,100,112,5.9K,13.5K,43.9%,"['Array', 'Greedy', 'Math', 'String']",[]
1059,All Paths from Source Lead to Destination,Medium,56,333,20.5K,46.8K,43.8%,"['Depth-First Search', 'Graph']",[]
1060,Missing Element in Sorted Array,Medium,41,980,67.4K,122K,55.2%,"['Array', 'Binary Search']",[]
1061,Lexicographically Smallest Equivalent String,Medium,8,149,5.9K,8.8K,66.9%,"['String', 'Union Find']",[]
1062,Longest Repeating Substring,Medium,23,401,19.6K,33.3K,58.8%,"['Binary Search', 'Dynamic Programming', 'Hash Function', 'Rolling Hash', 'String', 'Suffix Array']",[]
1063,Number of Valid Subarrays,Hard,8,136,5.1K,7K,72.2%,"['Array', 'Monotonic Stack', 'Stack']",[]
1064,Fixed Point,Easy,50,216,25K,38.9K,64.2%,"['Array', 'Binary Search']",[]
1065,Index Pairs of a String,Easy,61,159,11.9K,19.5K,61.1%,"['Array', 'Sorting', 'String', 'Trie']",[]
1066,Campus Bikes II,Medium,43,548,30.6K,56.4K,54.3%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']","[('Campus Bikes', 'Medium')]"
1067,Digit Count in Range,Hard,13,50,2.3K,5.5K,41.7%,"['Dynamic Programming', 'Math']","[('Number of Digit One', 'Hard')]"
1068,Product Sales Analysis I,Easy,63,62,34.6K,42.4K,81.8%,['Database'],"[('Product Sales Analysis II', 'Easy')]"
1069,Product Sales Analysis II,Easy,108,39,29K,34.8K,83.2%,['Database'],"[('Product Sales Analysis I', 'Easy'), ('Product Sales Analysis III', 'Medium')]"
1070,Product Sales Analysis III,Medium,187,56,21K,41.8K,50.2%,['Database'],"[('Product Sales Analysis II', 'Easy')]"
1071,Greatest Common Divisor of Strings,Easy,202,880,52.1K,100.5K,51.8%,"['Math', 'String']",[]
1072,Flip Columns For Maximum Number of Equal Rows,Medium,32,397,14K,22.6K,62.0%,"['Array', 'Hash Table', 'Matrix']",[]
1073,Adding Two Negabinary Numbers,Medium,75,169,9.4K,27K,34.8%,"['Array', 'Math']",[]
1074,Number of Submatrices That Sum to Target,Hard,33,1233,40.3K,61.7K,65.3%,"['Array', 'Hash Table', 'Matrix', 'Prefix Sum']",[]
1075,Project Employees I,Easy,50,51,24.4K,36.7K,66.5%,['Database'],"[('Project Employees II', 'Easy')]"
1076,Project Employees II,Easy,28,95,25.3K,48.2K,52.5%,['Database'],"[('Project Employees I', 'Easy'), ('Project Employees III', 'Medium')]"
1077,Project Employees III,Medium,2,128,22.7K,28.9K,78.4%,['Database'],"[('Project Employees II', 'Easy')]"
1078,Occurrences After Bigram,Easy,258,263,42.3K,65.4K,64.7%,['String'],[]
1079,Letter Tile Possibilities,Medium,41,1177,52.7K,69.3K,76.1%,"['Backtracking', 'String']",[]
1080,Insufficient Nodes in Root to Leaf Paths,Medium,399,283,19.8K,39.2K,50.5%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1081,Smallest Subsequence of Distinct Characters,Medium,119,1036,25.4K,47.1K,53.8%,"['Greedy', 'Monotonic Stack', 'Stack', 'String']","[('Find the Most Competitive Subsequence', 'Medium')]"
1082,Sales Analysis I,Easy,37,114,27.2K,36.5K,74.5%,['Database'],"[('Sales Analysis II', 'Easy')]"
1083,Sales Analysis II,Easy,23,133,26.8K,52.5K,51.0%,['Database'],"[('Sales Analysis I', 'Easy'), ('Sales Analysis III', 'Easy')]"
1084,Sales Analysis III,Easy,37,115,27.1K,49.7K,54.5%,['Database'],"[('Sales Analysis II', 'Easy')]"
1085,Sum of Digits in the Minimum Number,Easy,124,62,17.5K,23.2K,75.4%,"['Array', 'Math']","[('Add Digits', 'Easy')]"
1086,High Five,Easy,84,502,62.8K,82.1K,76.5%,"['Array', 'Hash Table', 'Sorting']",[]
1087,Brace Expansion,Medium,34,370,30K,47.3K,63.5%,"['Backtracking', 'Breadth-First Search', 'String']","[('Brace Expansion II', 'Hard'), ('Decode String', 'Medium'), ('Letter Case Permutation', 'Medium')]"
1088,Confusing Number II,Hard,80,282,23.4K,50.8K,46.1%,"['Backtracking', 'Math']","[('Confusing Number', 'Easy')]"
1089,Duplicate Zeros,Easy,368,1078,174.6K,339.1K,51.5%,"['Array', 'Two Pointers']",[]
1090,Largest Values From Labels,Medium,478,212,21.9K,36.4K,60.3%,"['Array', 'Counting', 'Greedy', 'Hash Table', 'Sorting']",[]
1091,Shortest Path in Binary Matrix,Medium,82,1360,95.7K,235.5K,40.6%,"['Array', 'Breadth-First Search', 'Matrix']",[]
1092,Shortest Common Supersequence ,Hard,31,1241,27.7K,51.1K,54.2%,"['Dynamic Programming', 'String']","[('Longest Common Subsequence', 'Medium')]"
1093,Statistics from a Large Sample,Medium,25,19,11.3K,23.6K,47.6%,"['Math', 'Probability and Statistics', 'Two Pointers']",[]
1094,Car Pooling,Medium,42,1363,77.1K,129.4K,59.6%,"['Array', 'Heap (Priority Queue)', 'Prefix Sum', 'Simulation', 'Sorting']","[('Meeting Rooms II', 'Medium')]"
1095,Find in Mountain Array,Hard,44,592,29.4K,81.5K,36.1%,"['Array', 'Binary Search', 'Interactive']","[('Minimum Number of Removals to Make Mountain Array', 'Hard'), ('Peak Index in a Mountain Array', 'Easy')]"
1096,Brace Expansion II,Hard,174,293,14.7K,23.4K,63.0%,"['Backtracking', 'Breadth-First Search', 'Stack', 'String']","[('Brace Expansion', 'Medium')]"
1097,Game Play Analysis V,Hard,22,82,9.6K,16.9K,56.8%,['Database'],"[('Game Play Analysis IV', 'Medium')]"
1098,Unpopular Books,Medium,254,104,17.6K,38.6K,45.6%,['Database'],[]
1099,Two Sum Less Than K,Easy,63,575,66K,108.9K,60.6%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']","[('3Sum Smaller', 'Medium'), ('Subarray Product Less Than K', 'Medium'), ('Two Sum', 'Easy'), ('Two Sum II - Input array is sorted', 'Easy')]"
1100,Find K-Length Substrings With No Repeated Characters,Medium,6,287,19.8K,27K,73.2%,"['Hash Table', 'Sliding Window', 'String']",[]
1101,The Earliest Moment When Everyone Become Friends,Medium,6,191,10.5K,15.5K,67.8%,"['Array', 'Union Find']","[('Number of Provinces', 'Medium')]"
1102,Path With Maximum Minimum Value,Medium,79,739,34K,66.2K,51.4%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Heap (Priority Queue)', 'Matrix', 'Union Find']","[('Path With Minimum Effort', 'Medium')]"
1103,Distribute Candies to People,Easy,157,577,60.1K,94.9K,63.4%,"['Math', 'Simulation']",[]
1104,Path In Zigzag Labelled Binary Tree,Medium,208,716,26.3K,35.6K,73.7%,"['Binary Tree', 'Math', 'Tree']",[]
1105,Filling Bookcase Shelves,Medium,58,963,25.9K,44.9K,57.7%,"['Array', 'Dynamic Programming']",[]
1106,Parsing A Boolean Expression,Hard,22,409,14.7K,24.6K,59.6%,"['Recursion', 'Stack', 'String']",[]
1107,New Users Daily Count,Medium,68,74,16.8K,36.5K,45.9%,['Database'],[]
1108,Defanging an IP Address,Easy,1268,782,340.6K,384.9K,88.5%,['String'],[]
1109,Corporate Flight Bookings,Medium,128,747,27.3K,49.9K,54.6%,"['Array', 'Prefix Sum']",[]
1110,Delete Nodes And Return Forest,Medium,58,1981,110.4K,161.8K,68.2%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1111,Maximum Nesting Depth of Two Valid Parentheses Strings,Medium,982,217,15.5K,21.3K,72.7%,"['Stack', 'String']","[('Maximum Nesting Depth of the Parentheses', 'Easy')]"
1112,Highest Grade For Each Student,Medium,4,130,22.9K,31.5K,72.8%,['Database'],"[('Department Highest Salary', 'Medium')]"
1113,Reported Posts,Easy,208,48,22K,33.2K,66.4%,['Database'],[]
1114,Print in Order,Easy,139,781,84.7K,125.3K,67.6%,['Concurrency'],"[('Print FooBar Alternately', 'Medium')]"
1115,Print FooBar Alternately,Medium,30,395,41K,69.6K,59.0%,['Concurrency'],"[('Print Zero Even Odd', 'Medium'), ('Print in Order', 'Easy')]"
1116,Print Zero Even Odd,Medium,177,259,24.1K,41.5K,58.2%,['Concurrency'],"[('Fizz Buzz Multithreaded', 'Medium'), ('Print FooBar Alternately', 'Medium')]"
1117,Building H2O,Medium,77,268,22.3K,42K,53.1%,['Concurrency'],[]
1118,Number of Days in a Month,Easy,123,23,5.4K,9.4K,57.3%,['Math'],[]
1119,Remove Vowels from a String,Easy,94,206,70.8K,78.2K,90.5%,['String'],"[('Reverse Vowels of a String', 'Easy')]"
1120,Maximum Average Subtree,Medium,15,466,35.3K,54.7K,64.5%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1121,Divide Array Into Increasing Sequences,Hard,22,74,3.4K,5.8K,58.9%,"['Array', 'Greedy']",[]
1122,Relative Sort Array,Easy,82,1216,100.5K,147.9K,67.9%,"['Array', 'Counting Sort', 'Hash Table', 'Sorting']",[]
1123,Lowest Common Ancestor of Deepest Leaves,Medium,657,778,54.3K,79.3K,68.5%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']","[('Lowest Common Ancestor of a Binary Tree IV', 'Medium')]"
1124,Longest Well-Performing Interval,Medium,77,688,17.1K,51.2K,33.5%,"['Array', 'Hash Table', 'Monotonic Stack', 'Prefix Sum', 'Stack']",[]
1125,Smallest Sufficient Team,Hard,10,531,12.8K,27.1K,47.2%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1126,Active Businesses,Medium,14,136,20.7K,30.2K,68.3%,['Database'],[]
1127,User Purchase Platform,Hard,77,102,8.2K,16.2K,50.9%,['Database'],[]
1128,Number of Equivalent Domino Pairs,Easy,180,359,37.5K,81.6K,45.9%,"['Array', 'Counting', 'Hash Table']",[]
1129,Shortest Path with Alternating Colors,Medium,42,789,25.1K,61.6K,40.7%,"['Breadth-First Search', 'Graph']",[]
1130,Minimum Cost Tree From Leaf Values,Medium,173,2349,56.2K,83.4K,67.5%,"['Dynamic Programming', 'Greedy', 'Monotonic Stack', 'Stack']",[]
1131,Maximum of Absolute Value Expression,Medium,277,352,13.2K,25.7K,51.3%,"['Array', 'Math']",[]
1132,Reported Posts II,Medium,266,85,18.1K,52.6K,34.4%,['Database'],[]
1133,Largest Unique Number,Easy,15,192,26K,38.7K,67.2%,"['Array', 'Hash Table', 'Sorting']",[]
1134,Armstrong Number,Easy,15,125,23.6K,30.1K,78.5%,['Math'],[]
1135,Connecting Cities With Minimum Cost,Medium,28,557,32.2K,53.6K,60.1%,"['Graph', 'Heap (Priority Queue)', 'Minimum Spanning Tree', 'Union Find']",[]
1136,Parallel Courses,Medium,15,439,21.3K,35.1K,60.6%,"['Graph', 'Topological Sort']","[('Course Schedule II', 'Medium'), ('Parallel Courses II', 'Hard')]"
1137,N-th Tribonacci Number,Easy,60,668,84.4K,151.3K,55.8%,"['Dynamic Programming', 'Math', 'Memoization']","[('Climbing Stairs', 'Easy'), ('Fibonacci Number', 'Easy')]"
1138,Alphabet Board Path,Medium,118,498,30.7K,59.4K,51.6%,"['Hash Table', 'String']",[]
1139,Largest 1-Bordered Square,Medium,68,351,14.5K,29.7K,48.8%,"['Array', 'Dynamic Programming', 'Matrix']",[]
1140,Stone Game II,Medium,204,911,30.2K,46.8K,64.6%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math']","[('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1141,User Activity for the Past 30 Days I,Easy,47,57,21.6K,39.5K,54.6%,['Database'],[]
1142,User Activity for the Past 30 Days II,Easy,209,52,22.3K,62.6K,35.6%,['Database'],[]
1143,Longest Common Subsequence,Medium,41,3462,223.6K,380.2K,58.8%,"['Dynamic Programming', 'String']","[('Delete Operation for Two Strings', 'Medium'), ('Longest Palindromic Subsequence', 'Medium'), ('Shortest Common Supersequence ', 'Hard')]"
1144,Decrease Elements To Make Array Zigzag,Medium,127,202,12.1K,25.9K,46.5%,"['Array', 'Greedy']",[]
1145,Binary Tree Coloring Game,Medium,151,738,28.4K,55.6K,51.1%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1146,Snapshot Array,Medium,172,950,60.8K,164.3K,37.0%,"['Array', 'Binary Search', 'Design', 'Hash Table']",[]
1147,Longest Chunked Palindrome Decomposition,Hard,19,297,13.3K,22.3K,59.8%,"['Dynamic Programming', 'Greedy', 'Hash Function', 'Rolling Hash', 'String', 'Two Pointers']",[]
1148,Article Views I,Easy,10,53,23.8K,30.9K,77.1%,['Database'],[]
1149,Article Views II,Medium,19,57,15.9K,32.9K,48.2%,['Database'],[]
1150,Check If a Number Is Majority Element in a Sorted Array,Easy,28,219,23.7K,41.5K,57.1%,"['Array', 'Binary Search']","[('Majority Element', 'Easy'), ('Majority Element II', 'Medium')]"
1152,Analyze User Website Visit Pattern,Medium,1825,199,37.2K,86.2K,43.2%,"['Array', 'Hash Table', 'Sorting']",[]
1153,String Transforms Into Another String,Hard,233,632,38.6K,108.3K,35.7%,"['Hash Table', 'String']",[]
1154,Day of the Year,Easy,239,170,25.3K,51K,49.7%,"['Math', 'String']",[]
1155,Number of Dice Rolls With Target Sum,Medium,65,1414,77K,161.6K,47.7%,['Dynamic Programming'],"[('Equal Sum Arrays With Minimum Number of Operations', 'Medium')]"
1156,Swap For Longest Repeated Character Substring,Medium,52,526,18K,38.3K,47.1%,"['Sliding Window', 'String']",[]
1157,Online Majority Element In Subarray,Hard,39,346,10.7K,25.9K,41.4%,"['Array', 'Binary Indexed Tree', 'Binary Search', 'Design', 'Segment Tree']",[]
1158,Market Analysis I,Medium,27,69,16.4K,25.3K,64.8%,['Database'],[]
1159,Market Analysis II,Hard,27,63,9.6K,16.9K,56.9%,['Database'],[]
1160,Find Words That Can Be Formed by Characters,Easy,102,691,86.3K,127.3K,67.8%,"['Array', 'Hash Table', 'String']",[]
1161,Maximum Level Sum of a Binary Tree,Medium,44,938,76.2K,112.5K,67.8%,"['Binary Tree', 'Breadth-First Search', 'Tree']",[]
1162,As Far from Land as Possible,Medium,40,998,38K,82.2K,46.2%,"['Array', 'Breadth-First Search', 'Dynamic Programming', 'Matrix']","[('Shortest Distance from All Buildings', 'Hard')]"
1163,Last Substring in Lexicographical Order,Hard,379,347,26K,72.1K,36.1%,"['String', 'Two Pointers']",[]
1164,Product Price at a Given Date,Medium,40,164,18.7K,27.1K,69.0%,['Database'],[]
1165,Single-Row Keyboard,Easy,15,293,49.8K,58.3K,85.5%,"['Hash Table', 'String']",[]
1166,Design File System,Medium,18,166,12.7K,21.5K,58.9%,"['Design', 'Hash Table', 'String', 'Trie']",[]
1167,Minimum Cost to Connect Sticks,Medium,134,634,53.9K,82.3K,65.5%,"['Array', 'Greedy', 'Heap (Priority Queue)']","[('Minimum Cost to Merge Stones', 'Hard')]"
1168,Optimize Water Distribution in a Village,Hard,17,445,13.2K,21.5K,61.5%,"['Graph', 'Minimum Spanning Tree', 'Union Find']",[]
1169,Invalid Transactions,Medium,1065,182,29.2K,95.7K,30.5%,"['Array', 'Hash Table', 'Sorting', 'String']",[]
1170,Compare Strings by Frequency of the Smallest Character,Medium,828,393,58.6K,96.7K,60.6%,"['Array', 'Binary Search', 'Hash Table', 'Sorting', 'String']",[]
1171,Remove Zero Sum Consecutive Nodes from Linked List,Medium,60,987,27.3K,65.5K,41.7%,"['Hash Table', 'Linked List']","[('Delete N Nodes After M Nodes of a Linked List', 'Easy')]"
1172,Dinner Plate Stacks,Hard,38,253,11.6K,31.6K,36.8%,"['Design', 'Hash Table', 'Heap (Priority Queue)', 'Stack']",[]
1173,Immediate Food Delivery I,Easy,5,115,26.8K,32.3K,83.0%,['Database'],[]
1174,Immediate Food Delivery II,Medium,38,56,15.9K,25.4K,62.7%,['Database'],[]
1175,Prime Arrangements,Easy,304,176,16.7K,32.2K,51.8%,['Math'],[]
1176,Diet Plan Performance,Easy,222,93,19K,35.5K,53.7%,"['Array', 'Sliding Window']",[]
1177,Can Make Palindrome from Substring,Medium,201,395,16.8K,46.3K,36.3%,"['Bit Manipulation', 'Hash Table', 'Prefix Sum', 'String']",[]
1178,Number of Valid Words for Each Puzzle,Hard,36,346,10.3K,25.4K,40.6%,"['Array', 'Bit Manipulation', 'Hash Table', 'String', 'Trie']",[]
1179,Reformat Department Table,Easy,217,290,48.5K,59K,82.1%,['Database'],[]
1180,Count Substrings with Only One Distinct Letter,Easy,38,216,16.7K,21.4K,78.1%,"['Math', 'String']",[]
1181,Before and After Puzzle,Medium,130,60,8.4K,18.8K,44.6%,"['Array', 'Hash Table', 'Sorting', 'String']",[]
1182,Shortest Distance to Target Color,Medium,7,250,14.6K,27K,54.2%,"['Array', 'Binary Search', 'Dynamic Programming']",[]
1183,Maximum Number of Ones,Hard,9,85,1.9K,3.2K,58.2%,"['Greedy', 'Heap (Priority Queue)']",[]
1184,Distance Between Bus Stops,Easy,46,397,34.5K,64.1K,53.9%,['Array'],[]
1185,Day of the Week,Easy,1599,180,34.9K,57.9K,60.2%,['Math'],[]
1186,Maximum Subarray Sum with One Deletion,Medium,34,907,24.9K,62.8K,39.7%,"['Array', 'Dynamic Programming']",[]
1187,Make Array Strictly Increasing,Hard,11,440,9.1K,20.8K,43.5%,"['Array', 'Binary Search', 'Dynamic Programming']",[]
1188,Design Bounded Blocking Queue,Medium,28,304,24.7K,33.8K,73.3%,['Concurrency'],[]
1189,Maximum Number of Balloons,Easy,50,608,67.9K,109.6K,62.0%,"['Counting', 'Hash Table', 'String']",[]
1190,Reverse Substrings Between Each Pair of Parentheses,Medium,28,853,36.2K,55.8K,64.8%,"['Stack', 'String']",[]
1191,K-Concatenation Maximum Sum,Medium,55,613,18.8K,76.4K,24.7%,"['Array', 'Dynamic Programming']",[]
1192,Critical Connections in a Network,Hard,127,2652,121.1K,234.5K,51.6%,"['Biconnected Component', 'Depth-First Search', 'Graph']",[]
1193,Monthly Transactions I,Medium,15,73,14.5K,21.1K,68.7%,['Database'],"[('Monthly Transactions II', 'Medium')]"
1194,Tournament Winners,Hard,30,71,9.2K,17.5K,52.8%,['Database'],[]
1195,Fizz Buzz Multithreaded,Medium,200,272,21.1K,29.6K,71.2%,['Concurrency'],"[('Fizz Buzz', 'Easy'), ('Print Zero Even Odd', 'Medium')]"
1196,How Many Apples Can You Put into the Basket,Easy,13,116,14.8K,21.7K,68.2%,"['Array', 'Greedy', 'Sorting']",[]
1197,Minimum Knight Moves,Medium,262,793,76.2K,198.5K,38.4%,['Breadth-First Search'],[]
1198,Find Smallest Common Element in All Rows,Medium,20,276,21.5K,28.2K,76.3%,"['Array', 'Binary Search', 'Counting', 'Hash Table', 'Matrix']",[]
1199,Minimum Time to Build Blocks,Hard,15,122,2.9K,7.5K,39.1%,"['Greedy', 'Heap (Priority Queue)', 'Math']",[]
1200,Minimum Absolute Difference,Easy,35,681,69K,102.6K,67.2%,"['Array', 'Sorting']",[]
1201,Ugly Number III,Medium,316,492,14.6K,54.7K,26.8%,"['Binary Search', 'Math', 'Number Theory']","[('Ugly Number II', 'Medium')]"
1202,Smallest String With Swaps,Medium,34,950,24.9K,50.2K,49.6%,"['Breadth-First Search', 'Depth-First Search', 'Hash Table', 'String', 'Union Find']","[('Minimize Hamming Distance After Swap Operations', 'Medium')]"
1203,Sort Items by Groups Respecting Dependencies,Hard,72,458,9.8K,20.3K,48.5%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']",[]
1204,Last Person to Fit in the Bus,Medium,12,142,20.3K,28K,72.5%,['Database'],"[('Running Total for Different Genders', 'Medium')]"
1205,Monthly Transactions II,Medium,254,80,10.2K,22.5K,45.4%,['Database'],"[('Monthly Transactions I', 'Medium')]"
1206,Design Skiplist,Hard,33,271,8.6K,14.5K,59.2%,"['Design', 'Linked List']","[('Design HashMap', 'Easy'), ('Design HashSet', 'Easy'), ('Design Linked List', 'Medium')]"
1207,Unique Number of Occurrences,Easy,27,773,89.8K,124.3K,72.2%,"['Array', 'Hash Table']",[]
1208,Get Equal Substrings Within Budget,Medium,34,450,23.2K,51.6K,44.9%,"['Binary Search', 'Prefix Sum', 'Sliding Window', 'String']",[]
1209,Remove All Adjacent Duplicates in String II,Medium,36,1760,108.2K,190.1K,56.9%,"['Stack', 'String']","[('Remove All Adjacent Duplicates In String', 'Easy')]"
1210,Minimum Moves to Reach Target with Rotations,Hard,49,165,6.3K,13.4K,47.0%,"['Array', 'Breadth-First Search', 'Matrix']",[]
1211,Queries Quality and Percentage,Easy,118,64,16.6K,23.6K,70.2%,['Database'],"[('Percentage of Users Attended a Contest', 'Easy')]"
1212,Team Scores in Football Tournament,Medium,17,168,18.2K,32.1K,56.7%,['Database'],[]
1213,Intersection of Three Sorted Arrays,Easy,20,306,48.7K,61.2K,79.6%,"['Array', 'Binary Search', 'Counting', 'Hash Table']","[('Intersection of Two Arrays', 'Easy')]"
1214,Two Sum BSTs,Medium,29,287,23.9K,35.4K,67.6%,"['Binary Search', 'Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Stack', 'Tree', 'Two Pointers']","[('Two Sum IV - Input is a BST', 'Easy')]"
1215,Stepping Numbers,Medium,16,144,6.6K,15K,44.2%,"['Backtracking', 'Breadth-First Search']",[]
1216,Valid Palindrome III,Hard,6,267,16.9K,33.5K,50.5%,"['Dynamic Programming', 'String']",[]
1217,Minimum Cost to Move Chips to The Same Position,Easy,73,489,58.8K,83.3K,70.6%,"['Array', 'Greedy', 'Math']","[('Minimum Number of Operations to Move All Balls to Each Box', 'Medium')]"
1218,Longest Arithmetic Subsequence of Given Difference,Medium,33,607,27.7K,58.2K,47.6%,"['Array', 'Dynamic Programming', 'Hash Table']",[]
1219,Path with Maximum Gold,Medium,41,1220,60.5K,91.6K,66.0%,"['Array', 'Backtracking', 'Matrix']",[]
1220,Count Vowels Permutation,Hard,82,729,37.5K,65.7K,57.1%,['Dynamic Programming'],[]
1221,Split a String in Balanced Strings,Easy,649,1229,160.7K,190.2K,84.5%,"['Counting', 'Greedy', 'String']",[]
1222,Queens That Can Attack the King,Medium,101,516,26.7K,38.2K,69.9%,"['Array', 'Matrix', 'Simulation']",[]
1223,Dice Roll Simulation,Hard,166,559,18.4K,39.2K,47.1%,"['Array', 'Dynamic Programming']",[]
1224,Maximum Equal Frequency,Hard,30,274,8.9K,25K,35.8%,"['Array', 'Hash Table']",[]
1225,Report Contiguous Dates,Hard,12,144,8.8K,13.9K,63.2%,['Database'],"[('Find the Missing IDs', 'Medium'), ('Find the Start and End Number of Continuous Ranges', 'Medium')]"
1226,The Dining Philosophers,Medium,154,137,13.5K,22.4K,60.4%,['Concurrency'],[]
1227,Airplane Seat Assignment Probability,Medium,520,284,19.1K,30.5K,62.7%,"['Brainteaser', 'Dynamic Programming', 'Math', 'Probability and Statistics']",[]
1228,Missing Number In Arithmetic Progression,Easy,24,201,16.8K,32.8K,51.2%,"['Array', 'Math']",[]
1229,Meeting Scheduler,Medium,22,469,36.1K,66.1K,54.6%,"['Array', 'Sorting', 'Two Pointers']",[]
1230,Toss Strange Coins,Medium,9,141,6.2K,12.3K,50.5%,"['Dynamic Programming', 'Math', 'Probability and Statistics']",[]
1231,Divide Chocolate,Hard,35,482,25.3K,46.9K,53.9%,"['Array', 'Binary Search']",[]
1232,Check If It Is a Straight Line,Easy,98,624,96.3K,225.7K,42.7%,"['Array', 'Geometry', 'Math']",[]
1233,Remove Sub-Folders from the Filesystem,Medium,65,411,32.4K,51.2K,63.3%,"['Array', 'String', 'Trie']",[]
1234,Replace the Substring for Balanced String,Medium,121,559,17.8K,51.2K,34.9%,"['Sliding Window', 'String']",[]
1235,Maximum Profit in Job Scheduling,Hard,16,1538,48.4K,100.3K,48.2%,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']",[]
1236,Web Crawler,Medium,164,140,17.2K,26.5K,65.0%,"['Breadth-First Search', 'Depth-First Search', 'Interactive', 'String']","[('Web Crawler Multithreaded', 'Medium')]"
1237,Find Positive Integer Solution for a Given Equation,Medium,972,256,39.8K,56.5K,70.4%,"['Binary Search', 'Interactive', 'Math', 'Two Pointers']",[]
1238,Circular Permutation in Binary Representation,Medium,139,162,9.9K,14.7K,67.2%,"['Backtracking', 'Bit Manipulation', 'Math']",[]
1239,Maximum Length of a Concatenated String with Unique Characters,Medium,96,1040,65.9K,130.4K,50.5%,"['Array', 'Backtracking', 'Bit Manipulation', 'String']",[]
1240,Tiling a Rectangle with the Fewest Squares,Hard,335,347,12.6K,23.8K,52.7%,"['Backtracking', 'Dynamic Programming']",[]
1241,Number of Comments per Post,Easy,264,104,18.9K,27.9K,67.9%,['Database'],[]
1242,Web Crawler Multithreaded,Medium,58,287,23.1K,48.1K,48.1%,"['Breadth-First Search', 'Concurrency', 'Depth-First Search']","[('Web Crawler', 'Medium')]"
1243,Array Transformation,Easy,42,91,8.8K,17.6K,49.9%,"['Array', 'Simulation']",[]
1244,Design A Leaderboard,Medium,60,288,24.2K,36.1K,66.9%,"['Design', 'Hash Table', 'Sorting']",[]
1245,Tree Diameter,Medium,11,489,19.8K,32K,61.7%,"['Breadth-First Search', 'Depth-First Search', 'Tree']","[('Count Subtrees With Max Distance Between Cities', 'Hard')]"
1246,Palindrome Removal,Hard,9,234,7.5K,16.5K,45.8%,"['Array', 'Dynamic Programming']",[]
1247,Minimum Swaps to Make Strings Equal,Medium,184,613,22.5K,35.6K,63.2%,"['Greedy', 'Math', 'String']","[('Determine if Two Strings Are Close', 'Medium')]"
1248,Count Number of Nice Subarrays,Medium,27,998,34.1K,60K,56.8%,"['Array', 'Hash Table', 'Math', 'Sliding Window']",[]
1249,Minimum Remove to Make Valid Parentheses,Medium,50,2389,219.4K,340.2K,64.5%,"['Stack', 'String']",[]
1250,Check If It Is a Good Array,Hard,226,159,10.3K,18K,57.1%,"['Array', 'Math', 'Number Theory']",[]
1251,Average Selling Price,Easy,18,163,23.2K,27.9K,83.2%,['Database'],[]
1252,Cells with Odd Values in a Matrix,Easy,842,516,65.5K,83.5K,78.5%,"['Array', 'Math', 'Simulation']",[]
1253,Reconstruct a 2-Row Binary Matrix,Medium,19,233,15.9K,37.8K,42.2%,"['Array', 'Greedy', 'Matrix']","[('Find Valid Matrix Given Row and Column Sums', 'Medium')]"
1254,Number of Closed Islands,Medium,27,991,52.3K,84K,62.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
1255,Maximum Score Words Formed by Letters,Hard,28,355,14K,19.8K,70.5%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'String']",[]
1256,Encode Number,Medium,161,45,5K,7.3K,68.3%,"['Bit Manipulation', 'Math', 'String']","[('Convert to Base -2', 'Medium')]"
1257,Smallest Common Region,Medium,22,220,9.3K,15.2K,61.6%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'String', 'Tree']","[('Lowest Common Ancestor of a Binary Search Tree', 'Easy'), ('Lowest Common Ancestor of a Binary Tree', 'Medium')]"
1258,Synonymous Sentences,Medium,52,147,8.8K,14.8K,59.8%,"['Array', 'Backtracking', 'Hash Table', 'String', 'Union Find']",[]
1260,Shift 2D Grid,Easy,126,362,27.9K,45.1K,61.9%,"['Array', 'Matrix', 'Simulation']",[]
1261,Find Elements in a Contaminated Binary Tree,Medium,65,404,33.9K,45.1K,75.1%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Design', 'Tree']",[]
1262,Greatest Sum Divisible by Three,Medium,26,828,30K,59.6K,50.3%,"['Array', 'Dynamic Programming', 'Greedy']",[]
1263,Minimum Moves to Move a Box to Their Target Location,Hard,20,354,9.1K,19.7K,46.3%,"['Array', 'Breadth-First Search', 'Heap (Priority Queue)', 'Matrix']",[]
1264,Page Recommendations,Medium,2,92,14.8K,21.5K,68.7%,['Database'],"[('Page Recommendations II', 'Hard')]"
1265,Print Immutable Linked List in Reverse,Medium,63,308,27.6K,29.3K,94.1%,"['Linked List', 'Recursion', 'Stack', 'Two Pointers']",[]
1266,Minimum Time Visiting All Points,Easy,136,895,95.9K,121K,79.3%,"['Array', 'Geometry', 'Math']",[]
1267,Count Servers that Communicate,Medium,63,654,33.5K,58K,57.8%,"['Array', 'Breadth-First Search', 'Counting', 'Depth-First Search', 'Matrix', 'Union Find']",[]
1268,Search Suggestions System,Medium,100,1318,93.7K,143.1K,65.5%,"['Array', 'String', 'Trie']",[]
1269,Number of Ways to Stay in the Same Place After Some Steps,Hard,24,396,21.3K,49.2K,43.3%,['Dynamic Programming'],[]
1270,All People Report to the Given Manager,Medium,17,213,27.4K,31K,88.3%,['Database'],[]
1271,Hexspeak,Easy,91,52,6.8K,12.2K,55.9%,"['Math', 'String']",[]
1272,Remove Interval,Medium,17,200,13.8K,23.4K,58.9%,['Array'],[]
1273,Delete Tree Nodes,Medium,50,164,7.2K,11.7K,61.3%,"['Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1274,Number of Ships in a Rectangle,Hard,29,191,10.4K,15.7K,66.0%,"['Array', 'Divide and Conquer', 'Interactive']",[]
1275,Find Winner on a Tic Tac Toe Game,Easy,112,377,30.9K,58.4K,52.9%,"['Array', 'Hash Table', 'Matrix', 'Simulation']",[]
1276,Number of Burgers with No Waste of Ingredients,Medium,168,162,15.1K,29.9K,50.5%,['Math'],[]
1277,Count Square Submatrices with All Ones,Medium,38,2216,110.8K,151.4K,73.2%,"['Array', 'Dynamic Programming', 'Matrix']",[]
1278,Palindrome Partitioning III,Hard,11,496,14.1K,22.9K,61.4%,"['Dynamic Programming', 'String']","[('Palindrome Partitioning IV', 'Hard')]"
1279,Traffic Light Controlled Intersection,Easy,215,39,6.6K,8.6K,76.4%,['Concurrency'],[]
1280,Students and Examinations,Easy,24,175,15.8K,20.9K,75.3%,['Database'],[]
1281,Subtract the Product and Sum of Digits of an Integer,Easy,156,608,156.6K,182.9K,85.6%,['Math'],[]
1282,Group the People Given the Group Size They Belong To,Medium,394,644,62.2K,73.5K,84.7%,"['Array', 'Hash Table']",[]
1283,Find the Smallest Divisor Given a Threshold,Medium,136,847,61K,120K,50.8%,"['Array', 'Binary Search']",[]
1284,Minimum Number of Flips to Convert Binary Matrix to Zero Matrix,Hard,36,343,12.4K,17.7K,70.3%,"['Array', 'Bit Manipulation', 'Breadth-First Search', 'Matrix']",[]
1285,Find the Start and End Number of Continuous Ranges,Medium,13,235,13.9K,15.8K,87.8%,['Database'],"[('Find the Missing IDs', 'Medium'), ('Report Contiguous Dates', 'Hard')]"
1286,Iterator for Combination,Medium,48,634,41.3K,58.2K,71.1%,"['Backtracking', 'Design', 'Iterator', 'String']",[]
1287,Element Appearing More Than 25% In Sorted Array,Easy,35,505,48.5K,81.1K,59.9%,['Array'],[]
1288,Remove Covered Intervals,Medium,27,696,48.8K,84.8K,57.6%,"['Array', 'Sorting']",[]
1289,Minimum Falling Path Sum II,Hard,48,446,19.1K,30.3K,63.0%,"['Array', 'Dynamic Programming', 'Matrix']","[('Minimum Falling Path Sum', 'Medium')]"
1290,Convert Binary Number in a Linked List to Integer,Easy,73,1383,193.8K,237.3K,81.7%,"['Linked List', 'Math']",[]
1291,Sequential Digits,Medium,56,610,39.5K,68.8K,57.4%,['Enumeration'],[]
1292,Maximum Side Length of a Square with Sum Less than or Equal to Threshold,Medium,43,567,19.3K,37.7K,51.3%,"['Array', 'Binary Search', 'Matrix', 'Prefix Sum']",[]
1293,Shortest Path in a Grid with Obstacles Elimination,Hard,14,873,31.6K,72.9K,43.3%,"['Array', 'Breadth-First Search', 'Matrix']","[('Shortest Path to Get Food', 'Medium')]"
1294,Weather Type in Each Country,Easy,14,54,15.4K,22.9K,67.2%,['Database'],[]
1295,Find Numbers with Even Number of Digits,Easy,84,746,299.7K,383.4K,78.2%,['Array'],[]
1296,Divide Array in Sets of K Consecutive Numbers,Medium,72,806,47.3K,84.7K,55.8%,"['Array', 'Greedy', 'Hash Table', 'Sorting']","[('Split Array into Consecutive Subsequences', 'Medium')]"
1297,Maximum Number of Occurrences of a Substring,Medium,224,405,23.8K,46.1K,51.6%,"['Hash Table', 'Sliding Window', 'String']",[]
1298,Maximum Candies You Can Get from Boxes,Hard,102,136,8.5K,14.1K,60.2%,"['Array', 'Breadth-First Search']",[]
1299,Replace Elements with Greatest Element on Right Side,Easy,151,856,144.9K,194.5K,74.5%,['Array'],[]
1300,Sum of Mutated Array Closest to Target,Medium,72,545,19.3K,45.3K,42.6%,"['Array', 'Binary Search', 'Sorting']",[]
1301,Number of Paths with Max Score,Hard,14,224,7.5K,19.6K,38.2%,"['Array', 'Dynamic Programming', 'Matrix']",[]
1302,Deepest Leaves Sum,Medium,62,1619,122.8K,143.8K,85.4%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1303,Find the Team Size,Easy,10,162,29K,32.2K,90.1%,['Database'],[]
1304,Find N Unique Integers Sum up to Zero,Easy,352,656,94.3K,123.3K,76.5%,"['Array', 'Math']",[]
1305,All Elements in Two Binary Search Trees,Medium,42,1072,93.7K,120.1K,78.0%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Sorting', 'Tree']",[]
1306,Jump Game III,Medium,40,1424,81.4K,132K,61.7%,"['Array', 'Breadth-First Search', 'Depth-First Search']","[('Jump Game', 'Medium'), ('Jump Game II', 'Medium'), ('Jump Game VII', 'Medium')]"
1307,Verbal Arithmetic Puzzle,Hard,67,236,5.9K,16.5K,35.9%,"['Array', 'Backtracking', 'Math', 'String']",[]
1308,Running Total for Different Genders,Medium,18,106,15.8K,18K,88.2%,['Database'],"[('Last Person to Fit in the Bus', 'Medium')]"
1309,Decrypt String from Alphabet to Integer Mapping,Easy,59,632,60.6K,77.8K,77.9%,['String'],[]
1310,XOR Queries of a Subarray,Medium,25,589,27.4K,39.2K,69.9%,"['Array', 'Bit Manipulation', 'Prefix Sum']",[]
1311,Get Watched Videos by Your Friends,Medium,248,157,13K,29.2K,44.4%,"['Array', 'Breadth-First Search', 'Hash Table', 'Sorting']",[]
1312,Minimum Insertion Steps to Make a String Palindrome,Hard,15,918,28.1K,46K,61.0%,"['Dynamic Programming', 'String']",[]
1313,Decompress Run-Length Encoded List,Easy,904,543,146.5K,171.3K,85.5%,['Array'],"[('String Compression', 'Medium')]"
1314,Matrix Block Sum,Medium,191,1125,41.1K,55.5K,74.0%,"['Array', 'Matrix', 'Prefix Sum']",[]
1315,Sum of Nodes with Even-Valued Grandparent,Medium,41,1161,74.8K,88.4K,84.6%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1316,Distinct Echo Substrings,Hard,141,118,9.3K,18.8K,49.6%,"['Dynamic Programming', 'Hash Function', 'Rolling Hash', 'Sliding Window', 'String', 'Trie']",[]
1317,Convert Integer to the Sum of Two No-Zero Integers,Easy,182,186,24.5K,42.9K,57.2%,['Math'],[]
1318,Minimum Flips to Make a OR b Equal to c,Medium,29,286,18.8K,29.2K,64.2%,['Bit Manipulation'],[]
1319,Number of Operations to Make Network Connected,Medium,18,1096,40.2K,72.3K,55.7%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Union Find']",[]
1320,Minimum Distance to Type a Word Using Two Fingers,Hard,25,594,19.4K,31.5K,61.5%,"['Dynamic Programming', 'String']",[]
1321,Restaurant Growth,Medium,25,172,13.6K,18.7K,72.6%,['Database'],[]
1322,Ads Performance,Easy,32,132,18K,30.6K,58.7%,['Database'],[]
1323,Maximum 69 Number,Easy,96,671,87.7K,112.3K,78.1%,"['Greedy', 'Math']",[]
1324,Print Words Vertically,Medium,76,288,21.1K,35.8K,58.9%,"['Array', 'Simulation', 'String']",[]
1325,Delete Leaves With a Given Value,Medium,18,878,45.5K,61.2K,74.3%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
1326,Minimum Number of Taps to Open to Water a Garden,Hard,70,764,31.3K,65.9K,47.6%,"['Array', 'Dynamic Programming', 'Greedy']",[]
1327,List the Products Ordered in a Period,Easy,15,55,19.5K,25K,78.0%,['Database'],[]
1328,Break a Palindrome,Medium,335,381,36.5K,74K,49.3%,"['Greedy', 'String']",[]
1329,Sort the Matrix Diagonally,Medium,156,1123,64K,78.6K,81.4%,"['Array', 'Matrix', 'Sorting']",[]
1330,Reverse Subarray To Maximize Array Value,Hard,30,261,3.2K,8.6K,37.3%,"['Array', 'Greedy', 'Math']",[]
1331,Rank Transform of an Array,Easy,41,517,36.3K,63.6K,57.1%,"['Array', 'Hash Table', 'Sorting']","[('Rank Transform of a Matrix', 'Hard')]"
1332,Remove Palindromic Subsequences,Easy,140,70,46.9K,68.3K,68.7%,"['String', 'Two Pointers']",[]
1333,"Filter Restaurants by Vegan-Friendly, Price and Distance",Medium,144,164,17.9K,30.9K,57.9%,"['Array', 'Sorting']",[]
1334,Find the City With the Smallest Number of Neighbors at a Threshold Distance,Medium,37,661,25.6K,52.8K,48.5%,"['Dynamic Programming', 'Graph', 'Shortest Path']",[]
1335,Minimum Difficulty of a Job Schedule,Hard,93,787,45K,79.4K,56.6%,"['Array', 'Dynamic Programming']",[]
1336,Number of Transactions per Visit,Hard,179,41,6.2K,12.2K,50.5%,['Database'],"[('Find the Missing IDs', 'Medium')]"
1337,The K Weakest Rows in a Matrix,Easy,69,979,80.4K,111.8K,71.9%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Matrix', 'Sorting']",[]
1338,Reduce Array Size to The Half,Medium,67,828,66.3K,97.5K,68.0%,"['Array', 'Greedy', 'Hash Table', 'Heap (Priority Queue)', 'Sorting']",[]
1339,Maximum Product of Splitted Binary Tree,Medium,48,634,27K,70K,38.6%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1340,Jump Game V,Hard,17,426,13.8K,22.9K,60.4%,"['Array', 'Dynamic Programming', 'Sorting']","[('Jump Game VII', 'Medium')]"
1341,Movie Rating,Medium,32,63,13.1K,22.1K,59.2%,['Database'],[]
1342,Number of Steps to Reduce a Number to Zero,Easy,90,1017,203.9K,238.3K,85.6%,"['Bit Manipulation', 'Math']",[]
1343,Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold,Medium,46,274,19.9K,30.3K,65.7%,"['Array', 'Sliding Window']",[]
1344,Angle Between Hands of a Clock,Medium,132,577,58.6K,95.2K,61.5%,['Math'],[]
1345,Jump Game IV,Hard,47,730,35.9K,85K,42.2%,"['Array', 'Breadth-First Search', 'Hash Table']","[('Jump Game VII', 'Medium')]"
1346,Check If N and Its Double Exist,Easy,65,422,118.8K,333.2K,35.7%,"['Array', 'Binary Search', 'Hash Table', 'Sorting', 'Two Pointers']",[]
1347,Minimum Number of Steps to Make Two Strings Anagram,Medium,46,718,60.5K,80.6K,75.1%,"['Hash Table', 'String']","[('Determine if Two Strings Are Close', 'Medium')]"
1348,Tweet Counts Per Frequency,Medium,83,43,18K,45.3K,39.8%,"['Binary Search', 'Design', 'Hash Table', 'Ordered Set', 'Sorting']",[]
1349,Maximum Students Taking Exam,Hard,11,430,8.1K,18K,45.0%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Matrix']",[]
1350,Students With Invalid Departments,Easy,7,95,29.9K,33.1K,90.4%,['Database'],[]
1351,Count Negative Numbers in a Sorted Matrix,Easy,58,1244,122.2K,161.9K,75.5%,"['Array', 'Binary Search', 'Matrix']",[]
1352,Product of the Last K Numbers,Medium,33,608,34K,74K,46.0%,"['Array', 'Data Stream', 'Design', 'Math', 'Queue']",[]
1353,Maximum Number of Events That Can Be Attended,Medium,142,1021,28K,91.7K,30.6%,"['Array', 'Greedy', 'Heap (Priority Queue)']","[('Maximum Number of Events That Can Be Attended II', 'Hard')]"
1354,Construct Target Array With Multiple Sums,Hard,68,560,23.2K,74.1K,31.3%,"['Array', 'Heap (Priority Queue)']",[]
1355,Activity Participants,Medium,25,70,15.2K,20.4K,74.8%,['Database'],[]
1356,Sort Integers by The Number of 1 Bits,Easy,26,581,45.5K,64.4K,70.6%,"['Array', 'Bit Manipulation', 'Counting', 'Sorting']",[]
1357,Apply Discount Every n Orders,Medium,136,82,11.6K,17.2K,67.3%,"['Array', 'Design', 'Hash Table']",[]
1358,Number of Substrings Containing All Three Characters,Medium,18,803,24.3K,39.9K,61.0%,"['Hash Table', 'Sliding Window', 'String']",[]
1359,Count All Valid Pickup and Delivery Options,Hard,42,354,15K,27.1K,55.5%,"['Combinatorics', 'Dynamic Programming', 'Math']",[]
1360,Number of Days Between Two Dates,Easy,575,117,21.1K,45.5K,46.5%,"['Math', 'String']",[]
1361,Validate Binary Tree Nodes,Medium,166,452,24.6K,57.6K,42.6%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Graph', 'Tree', 'Union Find']",[]
1362,Closest Divisors,Medium,72,123,13.2K,22.6K,58.4%,['Math'],[]
1363,Largest Multiple of Three,Hard,43,273,11.1K,32.3K,34.5%,"['Array', 'Dynamic Programming', 'Greedy']",[]
1364,Number of Trusted Contacts of a Customer,Medium,202,35,9K,11.3K,79.4%,['Database'],[]
1365,How Many Numbers Are Smaller Than the Current Number,Easy,45,1920,223.6K,260.2K,85.9%,"['Array', 'Counting', 'Hash Table', 'Sorting']","[('Count of Smaller Numbers After Self', 'Hard')]"
1366,Rank Teams by Votes,Medium,61,516,22.8K,40.7K,56.0%,"['Array', 'Counting', 'Hash Table', 'Sorting', 'String']","[('Online Election', 'Medium')]"
1367,Linked List in Binary Tree,Medium,36,928,33.3K,80.8K,41.2%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Linked List', 'Tree']",[]
1368,Minimum Cost to Make at Least One Valid Path in a Grid,Hard,6,611,18.7K,32.1K,58.3%,"['Array', 'Breadth-First Search', 'Graph', 'Heap (Priority Queue)', 'Matrix', 'Shortest Path']",[]
1369,Get the Second Most Recent Activity,Hard,7,70,8.4K,12.2K,69.0%,['Database'],[]
1370,Increasing Decreasing String,Easy,467,403,44.7K,57.6K,77.6%,"['Counting', 'Hash Table', 'String']",[]
1371,Find the Longest Substring Containing Vowels in Even Counts,Medium,30,765,14.1K,22.9K,61.5%,"['Bit Manipulation', 'Hash Table', 'Prefix Sum', 'String']",[]
1372,Longest ZigZag Path in a Binary Tree,Medium,14,675,22.4K,40.2K,55.7%,"['Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']",[]
1373,Maximum Sum BST in Binary Tree,Hard,78,551,18.4K,49.2K,37.4%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Dynamic Programming', 'Tree']",[]
1374,Generate a String With Characters That Have Odd Counts,Easy,834,219,55.3K,71.9K,76.9%,['String'],[]
1375,Bulb Switcher III,Medium,87,544,30.5K,47.3K,64.3%,['Array'],"[('Bulb Switcher', 'Medium'), ('Bulb Switcher II', 'Medium')]"
1376,Time Needed to Inform All Employees,Medium,78,936,58.3K,101.7K,57.3%,"['Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Maximum Path Sum', 'Hard'), ('Maximum Depth of Binary Tree', 'Easy')]"
1377,Frog Position After T Seconds,Hard,76,241,14.2K,39.6K,35.8%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Tree']",[]
1378,Replace Employee ID With The Unique Identifier,Easy,24,47,20.5K,22.7K,90.6%,['Database'],[]
1379,Find a Corresponding Node of a Binary Tree in a Clone of That Tree,Medium,712,536,83.2K,98.1K,84.8%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1380,Lucky Numbers in a Matrix,Easy,49,570,48.6K,69K,70.4%,"['Array', 'Matrix']",[]
1381,Design a Stack With Increment Operation,Medium,57,669,45.5K,59.4K,76.7%,"['Array', 'Design', 'Stack']",[]
1382,Balance a Binary Search Tree,Medium,36,889,45.6K,59K,77.3%,"['Binary Search Tree', 'Binary Tree', 'Depth-First Search', 'Divide and Conquer', 'Greedy', 'Tree']",[]
1383,Maximum Performance of a Team,Hard,37,966,32.8K,79.7K,41.2%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Sorting']",[]
1384,Total Sales Amount by Year,Hard,41,96,6K,9.2K,65.4%,['Database'],[]
1385,Find the Distance Value Between Two Arrays,Easy,834,193,29.4K,44.3K,66.5%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']",[]
1386,Cinema Seat Allocation,Medium,172,292,14K,37.7K,37.1%,"['Array', 'Bit Manipulation', 'Greedy', 'Hash Table']",[]
1387,Sort Integers by The Power Value,Medium,70,547,37K,52.4K,70.7%,"['Dynamic Programming', 'Memoization', 'Sorting']",[]
1388,Pizza With 3n Slices,Hard,5,398,6.2K,13.2K,46.8%,"['Array', 'Dynamic Programming', 'Greedy', 'Heap (Priority Queue)']",[]
1389,Create Target Array in the Given Order,Easy,804,598,107.6K,126.4K,85.1%,"['Array', 'Simulation']",[]
1390,Four Divisors,Medium,128,122,16.3K,40.9K,39.8%,"['Array', 'Math']",[]
1391,Check if There is a Valid Path in a Grid,Medium,191,378,16.2K,35.6K,45.5%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
1392,Longest Happy Prefix,Hard,20,396,14.3K,33.4K,42.9%,"['Hash Function', 'Rolling Hash', 'String', 'String Matching']",[]
1394,Find Lucky Integer in an Array,Easy,17,441,54.7K,86.6K,63.1%,"['Array', 'Counting', 'Hash Table']",[]
1395,Count Number of Teams,Medium,131,1198,63.4K,87.8K,72.1%,"['Array', 'Binary Indexed Tree', 'Dynamic Programming']",[]
1396,Design Underground System,Medium,60,830,69K,96.1K,71.8%,"['Design', 'Hash Table', 'String']",[]
1397,Find All Good Strings,Hard,90,198,3.1K,7.9K,39.2%,"['Dynamic Programming', 'String', 'String Matching']",[]
1398,Customers Who Bought Products A and B but Not C,Medium,4,103,19.1K,23.3K,81.7%,['Database'],[]
1399,Count Largest Group,Easy,547,199,25.1K,38.4K,65.5%,"['Hash Table', 'Math']",[]
1400,Construct K Palindrome Strings,Medium,50,425,23.9K,37.7K,63.4%,"['Counting', 'Greedy', 'Hash Table', 'String']",[]
1401,Circle and Rectangle Overlapping,Medium,48,179,8.1K,18.9K,42.8%,"['Geometry', 'Math']",[]
1402,Reducing Dishes,Hard,101,559,25.2K,35K,72.1%,"['Array', 'Dynamic Programming', 'Greedy', 'Sorting']",[]
1403,Minimum Subsequence in Non-Increasing Order,Easy,309,252,40.9K,57K,71.9%,"['Array', 'Greedy', 'Sorting']",[]
1404,Number of Steps to Reduce a Number in Binary Representation to One,Medium,26,348,19.3K,38.4K,50.2%,"['Bit Manipulation', 'String']",[]
1405,Longest Happy String,Medium,114,632,20.4K,38.3K,53.3%,"['Greedy', 'Heap (Priority Queue)', 'String']",[]
1406,Stone Game III,Hard,11,663,23.4K,39.7K,59.1%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math']","[('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1407,Top Travellers,Easy,5,68,16.8K,19.9K,84.2%,['Database'],[]
1408,String Matching in an Array,Easy,64,367,44K,69.1K,63.7%,"['String', 'String Matching']",[]
1409,Queries on a Permutation With Key,Medium,439,252,31.5K,38.4K,82.2%,"['Array', 'Binary Indexed Tree', 'Simulation']",[]
1410,HTML Entity Parser,Medium,234,107,16.8K,31.5K,53.5%,"['Hash Table', 'String']",[]
1412,Find the Quiet Students in All Exams,Hard,8,104,11.6K,18.3K,63.2%,['Database'],[]
1413,Minimum Value to Get Positive Step by Step Sum,Easy,122,403,32K,48.8K,65.5%,"['Array', 'Prefix Sum']",[]
1414,Find the Minimum Number of Fibonacci Numbers Whose Sum Is K,Medium,42,487,23.4K,37.1K,63.2%,['Greedy'],[]
1415,The k-th Lexicographical String of All Happy Strings of Length n,Medium,15,458,19.7K,28K,70.3%,"['Backtracking', 'String']",[]
1416,Restore The Array,Hard,8,267,9.8K,26.6K,36.9%,"['Dynamic Programming', 'String']",[]
1417,Reformat The String,Easy,61,305,35.3K,62.4K,56.6%,['String'],[]
1418,Display Table of Food Orders in a Restaurant,Medium,264,134,15.3K,21.7K,70.5%,"['Array', 'Hash Table', 'Ordered Set', 'Sorting', 'String']",[]
1419,Minimum Number of Frogs Croaking,Medium,32,480,18.7K,38.7K,48.3%,"['Counting', 'String']",[]
1420,Build Array Where You Can Find The Maximum Exactly K Comparisons,Hard,8,327,8.1K,12.5K,64.3%,['Dynamic Programming'],[]
1421,NPV Queries,Medium,195,14,10.1K,12.2K,82.2%,['Database'],[]
1422,Maximum Score After Splitting a String,Easy,21,375,32.6K,56.6K,57.6%,['String'],[]
1423,Maximum Points You Can Obtain from Cards,Medium,84,1889,87K,178.7K,48.7%,"['Array', 'Prefix Sum', 'Sliding Window']",[]
1424,Diagonal Traverse II,Medium,65,576,28.4K,60.4K,47.0%,"['Array', 'Heap (Priority Queue)', 'Sorting']",[]
1425,Constrained Subsequence Sum,Hard,25,560,13.5K,30K,45.1%,"['Array', 'Dynamic Programming', 'Heap (Priority Queue)', 'Monotonic Queue', 'Queue', 'Sliding Window']",[]
1426,Counting Elements,Easy,9,68,87.1K,147.1K,59.2%,"['Array', 'Hash Table']",[]
1427,Perform String Shifts,Easy,1,94,65.8K,122.7K,53.7%,"['Array', 'Math', 'String']",[]
1428,Leftmost Column with at Least a One,Medium,80,613,103.1K,205.2K,50.2%,"['Array', 'Binary Search', 'Interactive', 'Matrix']",[]
1429,First Unique Number,Medium,12,258,57.6K,114.1K,50.5%,"['Array', 'Data Stream', 'Design', 'Hash Table', 'Queue']",[]
1430,Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree,Medium,9,103,37.1K,81.9K,45.3%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1431,Kids With the Greatest Number of Candies,Easy,206,941,242K,274.8K,88.1%,['Array'],[]
1432,Max Difference You Can Get From Changing an Integer,Medium,152,113,10.7K,24.8K,43.1%,"['Greedy', 'Math']",[]
1433,Check If a String Can Break Another String,Medium,94,353,23.9K,35.3K,67.7%,"['Greedy', 'Sorting', 'String']",[]
1434,Number of Ways to Wear Different Hats to Each Other,Hard,5,428,6.9K,17.2K,40.3%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1435,Create a Session Bar Chart,Easy,127,73,10.5K,13.4K,78.5%,['Database'],"[('Count Salary Categories', 'Medium')]"
1436,Destination City,Easy,48,671,76.8K,99.5K,77.2%,"['Hash Table', 'String']",[]
1438,Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit,Medium,70,1430,58.9K,131.3K,44.9%,"['Array', 'Heap (Priority Queue)', 'Monotonic Queue', 'Ordered Set', 'Queue', 'Sliding Window']",[]
1439,Find the Kth Smallest Sum of a Matrix With Sorted Rows,Hard,7,581,18.4K,30.1K,61.2%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Matrix']",[]
1440,Evaluate Boolean Expression,Medium,3,76,7.8K,10.3K,75.3%,['Database'],[]
1441,Build an Array With Stack Operations,Easy,548,313,46K,65.3K,70.5%,"['Array', 'Simulation', 'Stack']",[]
1442,Count Triplets That Can Form Two Arrays of Equal XOR,Medium,35,637,20.5K,28.2K,73.0%,"['Array', 'Bit Manipulation', 'Hash Table', 'Math', 'Prefix Sum']",[]
1443,Minimum Time to Collect All Apples in a Tree,Medium,68,657,20.7K,37.7K,54.7%,"['Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
1444,Number of Ways of Cutting a Pizza,Hard,8,338,9.1K,16.9K,54.2%,"['Array', 'Dynamic Programming', 'Matrix', 'Memoization']",[]
1445,Apples & Oranges,Medium,13,90,17K,18.6K,91.3%,['Database'],[]
1446,Consecutive Characters,Easy,16,601,75.3K,123.1K,61.2%,['String'],"[('Count Number of Homogenous Substrings', 'Medium'), ('Max Consecutive Ones', 'Easy')]"
1447,Simplified Fractions,Medium,29,166,16.6K,26.4K,62.8%,['Math'],[]
1448,Count Good Nodes in Binary Tree,Medium,43,1041,67.2K,93.3K,72.0%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1449,Form Largest Integer With Digits That Add up to Target,Hard,6,376,9.9K,21.9K,45.3%,"['Array', 'Dynamic Programming']",[]
1450,Number of Students Doing Homework at a Given Time,Easy,108,428,69.5K,90.6K,76.7%,['Array'],[]
1451,Rearrange Words in a Sentence,Medium,56,335,30.8K,50.8K,60.6%,"['Sorting', 'String']",[]
1452,People Whose List of Favorite Companies Is Not a Subset of Another List,Medium,173,184,15.9K,28.7K,55.5%,"['Array', 'Hash Table', 'String']",[]
1453,Maximum Number of Darts Inside of a Circular Dartboard,Hard,219,96,4.1K,11.3K,36.0%,"['Array', 'Geometry', 'Math']",[]
1454,Active Users,Medium,22,187,14.1K,36.4K,38.7%,['Database'],[]
1455,Check If a Word Occurs As a Prefix of Any Word in a Sentence,Easy,13,359,39.3K,60.8K,64.7%,"['String', 'String Matching']",[]
1456,Maximum Number of Vowels in a Substring of Given Length,Medium,27,488,32.9K,59K,55.8%,"['Sliding Window', 'String']",[]
1457,Pseudo-Palindromic Paths in a Binary Tree,Medium,25,756,43.6K,63.4K,68.8%,"['Binary Tree', 'Bit Manipulation', 'Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1458,Max Dot Product of Two Subsequences,Hard,10,455,13.7K,31.2K,43.8%,"['Array', 'Dynamic Programming']",[]
1459,Rectangles Area,Medium,61,38,6.1K,9.1K,66.4%,['Database'],[]
1460,Make Two Arrays Equal by Reversing Sub-arrays,Easy,85,447,59.2K,81.9K,72.3%,"['Array', 'Hash Table', 'Sorting']",[]
1461,Check If a String Contains All Binary Codes of Size K,Medium,64,572,42.8K,78.9K,54.3%,"['Bit Manipulation', 'Hash Function', 'Hash Table', 'Rolling Hash', 'String']",[]
1462,Course Schedule IV,Medium,42,445,20.6K,44.4K,46.4%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Topological Sort']",[]
1463,Cherry Pickup II,Hard,11,852,28.9K,42.1K,68.6%,"['Array', 'Dynamic Programming', 'Matrix']",[]
1464,Maximum Product of Two Elements in an Array,Easy,96,540,91.5K,118.7K,77.1%,"['Array', 'Heap (Priority Queue)', 'Sorting']",[]
1465,Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts,Medium,180,711,66.1K,180.5K,36.6%,"['Array', 'Greedy', 'Sorting']",[]
1466,Reorder Routes to Make All Paths Lead to the City Zero,Medium,24,802,33.2K,53.9K,61.6%,"['Breadth-First Search', 'Depth-First Search', 'Graph']",[]
1467,Probability of a Two Boxes Having The Same Number of Distinct Balls,Hard,126,165,5.2K,8.6K,60.7%,"['Backtracking', 'Combinatorics', 'Dynamic Programming', 'Math', 'Probability and Statistics']",[]
1468,Calculate Salaries,Medium,10,52,9.6K,11.6K,82.4%,['Database'],[]
1469,Find All The Lonely Nodes,Easy,5,252,20.8K,25.7K,80.8%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Tree']","[('Binary Tree Tilt', 'Easy'), ('Univalued Binary Tree', 'Easy')]"
1470,Shuffle the Array,Easy,142,1369,232.6K,264.1K,88.1%,['Array'],[]
1471,The k Strongest Values in an Array,Medium,77,297,23.2K,39.4K,58.9%,"['Array', 'Sorting', 'Two Pointers']",[]
1472,Design Browser History,Medium,69,581,42.2K,58.1K,72.6%,"['Array', 'Data Stream', 'Design', 'Doubly-Linked List', 'Linked List', 'Stack']",[]
1473,Paint House III,Hard,20,375,9.6K,19.6K,49.1%,"['Array', 'Dynamic Programming']",[]
1474,Delete N Nodes After M Nodes of a Linked List,Easy,6,203,13.2K,18K,73.6%,['Linked List'],"[('Remove Nth Node From End of List', 'Medium'), ('Remove Zero Sum Consecutive Nodes from Linked List', 'Medium')]"
1475,Final Prices With a Special Discount in a Shop,Easy,43,567,50.8K,67.8K,74.8%,"['Array', 'Monotonic Stack', 'Stack']",[]
1476,Subrectangle Queries,Medium,660,240,49.6K,56.4K,87.9%,"['Array', 'Design', 'Matrix']",[]
1477,Find Two Non-overlapping Sub-arrays Each With Target Sum,Medium,48,837,27.4K,76.7K,35.7%,"['Array', 'Binary Search', 'Dynamic Programming', 'Hash Table', 'Sliding Window']",[]
1478,Allocate Mailboxes,Hard,8,494,10.3K,19.1K,54.2%,"['Array', 'Dynamic Programming', 'Math', 'Sorting']",[]
1479,Sales by Day of the Week,Hard,22,67,8.8K,10.7K,82.9%,['Database'],[]
1480,Running Sum of 1d Array,Easy,147,1637,393.6K,442.9K,88.9%,"['Array', 'Prefix Sum']",[]
1481,Least Number of Unique Integers after K Removals,Medium,45,433,36.9K,65.7K,56.2%,"['Array', 'Counting', 'Greedy', 'Hash Table', 'Sorting']",[]
1482,Minimum Number of Days to Make m Bouquets,Medium,25,992,24.2K,46.1K,52.4%,"['Array', 'Binary Search']",[]
1483,Kth Ancestor of a Tree Node,Hard,64,593,14.4K,43.6K,33.0%,"['Binary Search', 'Breadth-First Search', 'Depth-First Search', 'Design', 'Dynamic Programming', 'Tree']",[]
1484,Group Sold Products By The Date,Easy,7,137,13.4K,15.7K,85.0%,['Database'],[]
1485,Clone Binary Tree With Random Pointer,Medium,34,173,9.9K,12.4K,79.6%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']","[('Clone Graph', 'Medium'), ('Clone N-ary Tree', 'Medium'), ('Copy List with Random Pointer', 'Medium')]"
1486,XOR Operation in an Array,Easy,242,565,98.3K,117.1K,83.9%,"['Bit Manipulation', 'Math']",[]
1487,Making File Names Unique,Medium,394,246,15.5K,48.4K,32.0%,"['Array', 'Hash Table', 'String']",[]
1488,Avoid Flood in The City,Medium,144,658,18K,73.1K,24.6%,"['Array', 'Binary Search', 'Greedy', 'Hash Table', 'Heap (Priority Queue)']",[]
1489,Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree,Hard,34,270,5K,9.7K,51.7%,"['Graph', 'Minimum Spanning Tree', 'Sorting', 'Strongly Connected Component', 'Union Find']",[]
1490,Clone N-ary Tree,Medium,12,171,10.8K,13K,83.0%,"['Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']","[('Clone Binary Tree With Random Pointer', 'Medium'), ('Clone Graph', 'Medium'), ('Copy List with Random Pointer', 'Medium')]"
1491,Average Salary Excluding the Minimum and Maximum Salary,Easy,63,329,50.5K,74.4K,67.9%,"['Array', 'Sorting']",[]
1492,The kth Factor of n,Medium,145,363,49.6K,78.8K,62.9%,['Math'],[]
1494,Parallel Courses II,Hard,34,410,7.3K,23.5K,30.8%,"['Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Graph']","[('Parallel Courses', 'Medium')]"
1495,Friendly Movies Streamed Last Month,Easy,5,37,11.1K,21.7K,51.0%,['Database'],[]
1496,Path Crossing,Easy,7,359,28.1K,51.1K,55.1%,"['Hash Table', 'String']",[]
1497,Check If Array Pairs Are Divisible by k,Medium,47,545,22.2K,55.1K,40.3%,"['Array', 'Counting', 'Hash Table']",[]
1498,Number of Subsequences That Satisfy the Given Sum Condition,Medium,67,683,19.1K,48.7K,39.2%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']",[]
1499,Max Value of Equation,Hard,19,478,17.7K,38.6K,45.7%,"['Array', 'Heap (Priority Queue)', 'Monotonic Queue', 'Queue', 'Sliding Window']","[('Count Pairs in Two Arrays', 'Medium')]"
1500,Design a File Sharing System,Medium,66,28,2.2K,4.7K,46.5%,"['Data Stream', 'Design', 'Hash Table', 'Heap (Priority Queue)']","[('Design Twitter', 'Medium')]"
1501,Countries You Can Safely Invest In,Medium,15,87,8.6K,14.3K,60.0%,['Database'],"[('Average Salary: Departments VS Company', 'Hard')]"
1502,Can Make Arithmetic Progression From Sequence,Easy,33,404,53.9K,76.7K,70.3%,"['Array', 'Sorting']","[('Arithmetic Subarrays', 'Medium')]"
1503,Last Moment Before All Ants Fall Out of a Plank,Medium,157,255,13K,24.2K,53.8%,"['Array', 'Brainteaser', 'Simulation']",[]
1504,Count Submatrices With All Ones,Medium,77,1031,25.6K,42.2K,60.7%,"['Array', 'Dynamic Programming', 'Matrix', 'Monotonic Stack', 'Stack']",[]
1505,Minimum Possible Integer After at Most K Adjacent Swaps On Digits,Hard,14,240,6K,16.4K,36.4%,"['Binary Indexed Tree', 'Greedy', 'Segment Tree', 'String']",[]
1506,Find Root of N-Ary Tree,Medium,90,255,15.6K,19.7K,79.5%,"['Bit Manipulation', 'Depth-First Search', 'Hash Table', 'Tree']","[('Move Sub-Tree of N-Ary Tree', 'Hard')]"
1507,Reformat Date,Easy,229,151,23.4K,38.8K,60.4%,['String'],[]
1508,Range Sum of Sorted Subarray Sums,Medium,70,354,18.9K,31.7K,59.8%,"['Array', 'Binary Search', 'Sorting', 'Two Pointers']",[]
1509,Minimum Difference Between Largest and Smallest Value in Three Moves,Medium,61,501,23.6K,42.2K,56.0%,"['Array', 'Greedy', 'Sorting']",[]
1510,Stone Game IV,Hard,27,457,28.9K,48.8K,59.2%,"['Dynamic Programming', 'Game Theory', 'Math']","[('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1511,Customer Order Frequency,Easy,22,140,13.6K,18.4K,74.2%,['Database'],[]
1512,Number of Good Pairs,Easy,113,1416,199.5K,227.8K,87.6%,"['Array', 'Counting', 'Hash Table', 'Math']",[]
1513,Number of Substrings With Only 1s,Medium,17,350,23K,53.9K,42.6%,"['Math', 'String']","[('Count Number of Homogenous Substrings', 'Medium')]"
1514,Path with Maximum Probability,Medium,17,683,23.6K,55.8K,42.3%,"['Graph', 'Heap (Priority Queue)', 'Shortest Path']",[]
1515,Best Position for a Service Centre,Hard,167,126,7.5K,19K,39.5%,"['Geometry', 'Math', 'Randomized']",[]
1516,Move Sub-Tree of N-Ary Tree,Hard,28,17,1.3K,2K,64.5%,"['Depth-First Search', 'Tree']","[('Find Root of N-Ary Tree', 'Medium')]"
1517,Find Users With Valid E-Mails,Easy,38,68,12.8K,17.9K,71.4%,['Database'],[]
1518,Water Bottles,Easy,43,519,39.1K,64.7K,60.3%,"['Math', 'Simulation']",[]
1519,Number of Nodes in the Sub-Tree With the Same Label,Medium,272,277,13K,34.2K,38.0%,"['Breadth-First Search', 'Depth-First Search', 'Tree']",[]
1520,Maximum Number of Non-Overlapping Substrings,Hard,48,362,8.9K,24.2K,37.0%,"['Greedy', 'String']",[]
1521,Find a Value of a Mysterious Function Closest to Target,Hard,8,219,6.5K,14.7K,44.0%,"['Array', 'Binary Search', 'Bit Manipulation', 'Segment Tree']",[]
1522,Diameter of N-Ary Tree,Medium,2,197,10.8K,15.3K,70.5%,"['Depth-First Search', 'Tree']","[('Diameter of Binary Tree', 'Easy')]"
1523,Count Odd Numbers in an Interval Range,Easy,26,238,25.8K,47.8K,54.0%,['Math'],[]
1524,Number of Sub-arrays With Odd Sum,Medium,18,445,14.9K,36.4K,41.0%,"['Array', 'Dynamic Programming', 'Math', 'Prefix Sum']",[]
1525,Number of Good Ways to Split a String,Medium,17,623,31.8K,46K,69.1%,"['Bit Manipulation', 'Dynamic Programming', 'String']",[]
1526,Minimum Number of Increments on Subarrays to Form a Target Array,Hard,31,455,13.3K,20.6K,64.5%,"['Array', 'Dynamic Programming', 'Greedy', 'Monotonic Stack', 'Stack']",[]
1527,Patients With a Condition,Easy,66,26,10.9K,18.9K,57.7%,['Database'],[]
1528,Shuffle String,Easy,187,715,129.9K,151.5K,85.7%,"['Array', 'String']",[]
1529,Bulb Switcher IV,Medium,22,453,25.4K,35.4K,71.6%,"['Greedy', 'String']",[]
1530,Number of Good Leaf Nodes Pairs,Medium,15,765,18.3K,31.8K,57.5%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1531,String Compression II,Hard,32,324,7.1K,20.4K,34.6%,"['Dynamic Programming', 'String']",[]
1532,The Most Recent Three Orders,Medium,2,60,9.2K,12.8K,72.0%,['Database'],"[('The Most Recent Orders for Each Product', 'Medium')]"
1533,Find the Index of the Large Integer,Medium,8,58,2.5K,4.7K,54.0%,"['Array', 'Binary Search', 'Interactive']","[('Search in a Sorted Array of Unknown Size', 'Medium')]"
1534,Count Good Triplets,Easy,686,286,57.9K,72.1K,80.3%,"['Array', 'Enumeration']",[]
1535,Find the Winner of an Array Game,Medium,24,370,20.9K,43.3K,48.2%,"['Array', 'Simulation']",[]
1536,Minimum Swaps to Arrange a Binary Grid,Medium,54,311,9.3K,21K,44.2%,"['Array', 'Greedy', 'Matrix']",[]
1537,Get the Maximum Score,Hard,26,373,11.2K,30.1K,37.2%,"['Array', 'Dynamic Programming', 'Greedy', 'Two Pointers']",[]
1538,Guess the Majority in a Hidden Array,Medium,20,48,954,1.5K,61.6%,"['Array', 'Interactive', 'Math']",[]
1539,Kth Missing Positive Number,Easy,73,1185,93.2K,170.3K,54.7%,"['Array', 'Binary Search']",[]
1540,Can Convert String in K Moves,Medium,179,233,11.2K,35.3K,31.7%,"['Hash Table', 'String']",[]
1541,Minimum Insertions to Balance a Parentheses String,Medium,80,378,14.6K,32.6K,44.7%,"['Greedy', 'Stack', 'String']",[]
1542,Find Longest Awesome Substring,Hard,8,377,6.8K,17.5K,38.5%,"['Bit Manipulation', 'Hash Table', 'String']",[]
1543,Fix Product Name Format,Easy,21,37,8.3K,12.7K,65.4%,['Database'],[]
1544,Make The String Great,Easy,45,501,36.6K,65.7K,55.7%,"['Stack', 'String']",[]
1545,Find Kth Bit in Nth Binary String,Medium,22,253,16.6K,28.6K,58.0%,"['Recursion', 'String']",[]
1546,Maximum Number of Non-Overlapping Subarrays With Sum Equals Target,Medium,11,553,15.1K,33.6K,44.8%,"['Array', 'Greedy', 'Hash Table', 'Prefix Sum']",[]
1547,Minimum Cost to Cut a Stick,Hard,10,592,13.4K,25K,53.7%,"['Array', 'Dynamic Programming']",[]
1548,The Most Similar Path in a Graph,Hard,89,183,8K,14.4K,55.8%,"['Dynamic Programming', 'Graph']",[]
1549,The Most Recent Orders for Each Product,Medium,3,39,8K,11.8K,67.4%,['Database'],"[('The Most Frequently Ordered Products for Each Customer', 'Medium'), ('The Most Recent Three Orders', 'Medium')]"
1550,Three Consecutive Odds,Easy,39,253,39K,60.9K,64.1%,['Array'],[]
1551,Minimum Operations to Make Array Equal,Medium,103,560,53.6K,66.5K,80.5%,['Math'],[]
1552,Magnetic Force Between Two Balls,Medium,62,653,15.7K,31K,50.7%,"['Array', 'Binary Search', 'Sorting']",[]
1553,Minimum Number of Days to Eat N Oranges,Hard,37,466,16.9K,54.4K,31.0%,"['Dynamic Programming', 'Memoization']",[]
1554,Strings Differ by One Character,Medium,1,78,3K,4.6K,64.3%,"['Hash Function', 'Hash Table', 'Rolling Hash', 'String']",[]
1555,Bank Account Summary,Medium,13,59,6.7K,12.4K,53.5%,['Database'],[]
1556,Thousand Separator,Easy,8,238,25.3K,44.3K,57.0%,['String'],[]
1557,Minimum Number of Vertices to Reach All Nodes,Medium,48,733,33.2K,43.5K,76.2%,['Graph'],[]
1558,Minimum Numbers of Function Calls to Make Target Array,Medium,16,285,12.3K,19.4K,63.4%,"['Array', 'Greedy']",[]
1559,Detect Cycles in 2D Grid,Hard,9,318,11.2K,24.7K,45.2%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']",[]
1560,Most Visited Sector in  a Circular Track,Easy,333,144,16.8K,29.1K,57.5%,"['Array', 'Simulation']",[]
1561,Maximum Number of Coins You Can Get,Medium,61,326,29.8K,38.6K,77.3%,"['Array', 'Game Theory', 'Greedy', 'Math', 'Sorting']",[]
1562,Find Latest Group of Size M,Medium,80,356,10.5K,26.3K,40.0%,"['Array', 'Binary Search', 'Simulation']",[]
1563,Stone Game V,Hard,51,249,9.8K,24.4K,40.1%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math']","[('Stone Game', 'Medium'), ('Stone Game II', 'Medium'), ('Stone Game III', 'Hard'), ('Stone Game IV', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1564,Put Boxes Into the Warehouse I,Medium,15,182,8.7K,13.5K,64.3%,"['Array', 'Greedy', 'Sorting']","[('Put Boxes Into the Warehouse II', 'Medium')]"
1565,Unique Orders and Customers Per Month,Easy,15,38,9.2K,11.1K,82.9%,['Database'],[]
1566,Detect Pattern of Length M Repeated K or More Times,Easy,55,364,19.2K,44.6K,43.1%,"['Array', 'Enumeration']","[('Maximum Repeating Substring', 'Easy')]"
1567,Maximum Length of Subarray With Positive Product,Medium,7,464,14.8K,39.1K,37.9%,"['Array', 'Dynamic Programming', 'Greedy']",[]
1568,Minimum Number of Days to Disconnect Island,Hard,102,218,6.2K,12.4K,50.0%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Strongly Connected Component']",[]
1569,Number of Ways to Reorder Array to Get Same BST,Hard,34,240,6.5K,13K,50.0%,"['Array', 'Binary Search Tree', 'Binary Tree', 'Combinatorics', 'Divide and Conquer', 'Dynamic Programming', 'Math', 'Memoization', 'Tree', 'Union Find']",[]
1570,Dot Product of Two Sparse Vectors,Medium,46,321,53.5K,58.8K,91.0%,"['Array', 'Design', 'Hash Table', 'Two Pointers']",[]
1571,Warehouse Manager,Easy,6,62,13.2K,14.7K,89.7%,['Database'],[]
1572,Matrix Diagonal Sum,Easy,12,569,60.6K,77.6K,78.1%,"['Array', 'Matrix']",[]
1573,Number of Ways to Split a String,Medium,47,299,13.8K,44K,31.3%,"['Math', 'String']","[('Split Array with Equal Sum', 'Medium')]"
1574,Shortest Subarray to be Removed to Make Array Sorted,Medium,19,649,12.8K,37.2K,34.3%,"['Array', 'Binary Search', 'Monotonic Stack', 'Stack', 'Two Pointers']",[]
1575,Count All Possible Routes,Hard,12,254,7.4K,12.8K,57.4%,"['Array', 'Dynamic Programming', 'Memoization']",[]
1576,Replace All ?'s to Avoid Consecutive Repeating Characters,Easy,119,273,33.4K,66.2K,50.4%,['String'],[]
1577,Number of Ways Where Square of Number Is Equal to Product of Two Numbers,Medium,38,167,12.7K,33.1K,38.4%,"['Array', 'Hash Table', 'Math', 'Two Pointers']",[]
1578,Minimum Deletion Cost to Avoid Repeating Letters,Medium,25,513,35.6K,58.3K,61.1%,"['Array', 'Dynamic Programming', 'Greedy', 'String']",[]
1579,Remove Max Number of Edges to Keep Graph Fully Traversable,Hard,3,353,7.5K,16K,46.9%,"['Graph', 'Union Find']",[]
1580,Put Boxes Into the Warehouse II,Medium,1,107,2.3K,3.6K,63.6%,"['Array', 'Greedy', 'Sorting']","[('Put Boxes Into the Warehouse I', 'Medium')]"
1581,Customer Who Visited but Did Not Make Any Transactions,Easy,18,48,12.5K,14K,89.4%,['Database'],"[('Sellers With No Sales', 'Easy')]"
1582,Special Positions in a Binary Matrix,Easy,13,290,24.1K,37.5K,64.2%,"['Array', 'Matrix']",[]
1583,Count Unhappy Friends,Medium,449,119,11.9K,21.5K,55.2%,"['Array', 'Simulation']",[]
1584,Min Cost to Connect All Points,Medium,29,529,18.9K,33.8K,55.8%,"['Array', 'Minimum Spanning Tree', 'Union Find']",[]
1585,Check If String Is Transformable With Substring Sort Operations,Hard,4,266,5.1K,10.5K,48.4%,"['Greedy', 'Sorting', 'String']",[]
1586,Binary Search Tree Iterator II,Medium,12,97,4.2K,6.3K,66.7%,"['Binary Search Tree', 'Binary Tree', 'Design', 'Iterator', 'Stack', 'Tree']","[('Binary Search Tree Iterator', 'Medium')]"
1587,Bank Account Summary II,Easy,2,51,13.8K,15.4K,89.9%,['Database'],[]
1588,Sum of All Odd Length Subarrays,Easy,105,1025,55.9K,68.3K,81.8%,"['Array', 'Prefix Sum']",[]
1589,Maximum Sum Obtained of Any Permutation,Medium,20,357,9.2K,25.8K,35.7%,"['Array', 'Greedy', 'Prefix Sum', 'Sorting']",[]
1590,Make Sum Divisible by P,Medium,28,606,11.4K,41.8K,27.4%,"['Array', 'Hash Table', 'Prefix Sum']","[('Subarray Sums Divisible by K', 'Medium')]"
1591,Strange Printer II,Hard,7,211,4K,7.2K,55.7%,"['Array', 'Graph', 'Matrix', 'Topological Sort']","[('Strange Printer', 'Hard')]"
1592,Rearrange Spaces Between Words,Easy,162,170,22.6K,51.7K,43.6%,['String'],"[('Text Justification', 'Hard')]"
1593,Split a String Into the Max Number of Unique Substrings,Medium,13,368,13.8K,27.2K,50.9%,"['Backtracking', 'Hash Table', 'String']",[]
1594,Maximum Non Negative Product in a Matrix,Medium,21,373,13K,39.9K,32.7%,"['Array', 'Dynamic Programming', 'Matrix']",[]
1595,Minimum Cost to Connect Two Groups of Points,Hard,9,245,4.9K,11.1K,44.1%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Matrix']",[]
1596,The Most Frequently Ordered Products for Each Customer,Medium,7,94,11.4K,13.4K,85.3%,['Database'],"[('The Most Recent Orders for Each Product', 'Medium')]"
1597,Build Binary Expression Tree From Infix Expression,Hard,20,95,3.9K,6.6K,59.2%,"['Binary Tree', 'Stack', 'String', 'Tree']","[('Basic Calculator III', 'Hard'), ('Check If Two Expression Trees are Equivalent', 'Medium')]"
1598,Crawler Log Folder,Easy,24,288,27K,42.2K,63.9%,"['Array', 'Stack', 'String']","[('Backspace String Compare', 'Easy'), ('Baseball Game', 'Easy')]"
1599,Maximum Profit of Operating a Centennial Wheel,Medium,191,56,8.7K,19.8K,43.8%,"['Array', 'Simulation']",[]
1600,Throne Inheritance,Medium,197,129,9.3K,15.2K,61.6%,"['Depth-First Search', 'Design', 'Hash Table', 'Tree']",[]
1601,Maximum Number of Achievable Transfer Requests,Hard,25,187,6.1K,12.7K,48.4%,"['Bit Manipulation', 'Enumeration']",[]
1602,Find Nearest Right Node in Binary Tree,Medium,2,173,10.9K,14.8K,73.5%,"['Binary Tree', 'Breadth-First Search', 'Tree']",[]
1603,Design Parking System,Easy,190,369,73.2K,84.7K,86.5%,"['Counting', 'Design', 'Simulation']",[]
1604,Alert Using Same Key-Card Three or More Times in a One Hour Period,Medium,168,96,8.8K,20.1K,43.9%,"['Array', 'Hash Table', 'Sorting', 'String']",[]
1605,Find Valid Matrix Given Row and Column Sums,Medium,22,556,15.6K,20K,77.8%,"['Array', 'Greedy', 'Matrix']","[('Reconstruct a 2-Row Binary Matrix', 'Medium')]"
1606,Find Servers That Handled Most Number of Requests,Hard,8,211,4.5K,11.7K,38.2%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Ordered Set']",[]
1607,Sellers With No Sales,Easy,6,30,7.8K,14.2K,55.0%,['Database'],"[('Customer Who Visited but Did Not Make Any Transactions', 'Easy')]"
1608,Special Array With X Elements Greater Than or Equal X,Easy,53,309,22.3K,36.3K,61.5%,"['Array', 'Binary Search', 'Sorting']",[]
1609,Even Odd Tree,Medium,27,365,21.3K,40.8K,52.3%,"['Binary Tree', 'Breadth-First Search', 'Tree']",[]
1610,Maximum Number of Visible Points,Hard,269,200,11.5K,35.1K,32.8%,"['Array', 'Geometry', 'Math', 'Sliding Window', 'Sorting']",[]
1611,Minimum One Bit Operations to Make Integers Zero,Hard,130,184,5K,8.5K,59.3%,"['Bit Manipulation', 'Dynamic Programming', 'Memoization']",[]
1612,Check If Two Expression Trees are Equivalent,Medium,13,73,3.4K,4.9K,70.1%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Build Binary Expression Tree From Infix Expression', 'Hard')]"
1613,Find the Missing IDs,Medium,10,78,5.9K,7.8K,75.4%,['Database'],"[('Find the Start and End Number of Continuous Ranges', 'Medium'), ('Number of Transactions per Visit', 'Hard'), ('Report Contiguous Dates', 'Hard')]"
1614,Maximum Nesting Depth of the Parentheses,Easy,109,436,49.8K,60.3K,82.6%,"['Stack', 'String']","[('Maximum Nesting Depth of Two Valid Parentheses Strings', 'Medium')]"
1615,Maximal Network Rank,Medium,71,330,20.9K,38.5K,54.2%,['Graph'],[]
1616,Split Two Strings to Make Palindrome,Medium,172,358,13.1K,42.4K,30.9%,"['Greedy', 'String', 'Two Pointers']",[]
1617,Count Subtrees With Max Distance Between Cities,Hard,24,185,4.7K,7.3K,63.9%,"['Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Enumeration', 'Tree']","[('Tree Diameter', 'Medium')]"
1618,Maximum Font to Fit a Sentence in a Screen,Medium,8,57,2.8K,4.9K,57.7%,"['Array', 'Binary Search', 'Interactive', 'String']",[]
1619,Mean of Array After Removing Some Elements,Easy,51,168,21.4K,33.2K,64.6%,"['Array', 'Sorting']",[]
1620,Coordinate With Maximum Network Quality,Medium,159,48,5.4K,14.6K,37.0%,"['Array', 'Enumeration']",[]
1621,Number of Sets of K Non-Overlapping Line Segments,Medium,25,230,5.2K,12.3K,41.9%,"['Dynamic Programming', 'Math']",[]
1622,Fancy Sequence,Hard,66,194,4.9K,33K,14.7%,"['Design', 'Math', 'Segment Tree']",[]
1623,All Valid Triplets That Can Represent a Country,Easy,54,34,8.3K,9.3K,88.8%,['Database'],[]
1624,Largest Substring Between Two Equal Characters,Easy,15,260,22.5K,38.3K,58.7%,"['Hash Table', 'String']",[]
1625,Lexicographically Smallest String After Applying Operations,Medium,198,165,8.3K,12.7K,65.3%,"['Breadth-First Search', 'String']",[]
1626,Best Team With No Conflicts,Medium,21,516,13.1K,33.1K,39.5%,"['Array', 'Dynamic Programming', 'Sorting']",[]
1627,Graph Connectivity With Threshold,Hard,20,191,6.9K,16.7K,41.3%,"['Array', 'Math', 'Union Find']",[]
1628,Design an Expression Tree With Evaluate Function,Medium,29,136,5.6K,6.9K,81.1%,"['Binary Tree', 'Design', 'Math', 'Stack', 'Tree']",[]
1629,Slowest Key,Easy,49,256,37.5K,63.6K,59.0%,"['Array', 'String']",[]
1630,Arithmetic Subarrays,Medium,40,284,20.2K,26.1K,77.4%,"['Array', 'Sorting']","[('Arithmetic Slices', 'Medium'), ('Can Make Arithmetic Progression From Sequence', 'Easy')]"
1631,Path With Minimum Effort,Medium,68,1374,49.3K,98K,50.3%,"['Array', 'Binary Search', 'Breadth-First Search', 'Depth-First Search', 'Heap (Priority Queue)', 'Matrix', 'Union Find']","[('Path With Maximum Minimum Value', 'Medium'), ('Swim in Rising Water', 'Hard')]"
1632,Rank Transform of a Matrix,Hard,7,229,3.9K,12.2K,32.2%,"['Array', 'Graph', 'Greedy', 'Matrix', 'Topological Sort', 'Union Find']","[('Rank Transform of an Array', 'Easy')]"
1633,Percentage of Users Attended a Contest,Easy,6,28,6.7K,9.5K,70.8%,['Database'],"[('Queries Quality and Percentage', 'Easy')]"
1634,Add Two Polynomials Represented as Linked Lists,Medium,2,47,2.6K,4.9K,52.5%,"['Linked List', 'Math', 'Two Pointers']","[('Add Two Numbers', 'Medium'), ('Add Two Numbers II', 'Medium'), ('Merge Two Sorted Lists', 'Easy')]"
1635,Hopper Company Queries I,Hard,17,40,3.1K,5.5K,56.7%,['Database'],"[('Hopper Company Queries II', 'Hard'), ('Hopper Company Queries III', 'Hard'), ('Trips and Users', 'Hard')]"
1636,Sort Array by Increasing Frequency,Easy,30,601,30.4K,45.2K,67.3%,"['Array', 'Hash Table', 'Sorting']","[('Sort Characters By Frequency', 'Medium')]"
1637,Widest Vertical Area Between Two Points Containing No Points,Medium,319,87,18.9K,22.5K,84.0%,"['Array', 'Sorting']",[]
1638,Count Substrings That Differ by One Character,Medium,155,307,10.2K,14.3K,71.2%,"['Dynamic Programming', 'Hash Table', 'String']",[]
1639,Number of Ways to Form a Target String Given a Dictionary,Hard,10,153,4.5K,11K,40.4%,"['Array', 'Dynamic Programming', 'String']",[]
1640,Check Array Formation Through Concatenation,Easy,97,539,58.3K,105.1K,55.5%,"['Array', 'Hash Table']",[]
1641,Count Sorted Vowel Strings,Medium,29,1186,60.4K,80.5K,75.0%,['Dynamic Programming'],[]
1642,Furthest Building You Can Reach,Medium,41,1097,31.8K,73.2K,43.5%,"['Array', 'Greedy', 'Heap (Priority Queue)']",[]
1643,Kth Smallest Instructions,Hard,3,239,5.8K,12.7K,45.5%,"['Array', 'Combinatorics', 'Dynamic Programming', 'Math']",[]
1644,Lowest Common Ancestor of a Binary Tree II,Medium,7,182,14.8K,25.9K,57.0%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Lowest Common Ancestor of a Binary Search Tree', 'Easy'), ('Lowest Common Ancestor of a Binary Tree', 'Medium'), ('Lowest Common Ancestor of a Binary Tree III', 'Medium'), ('Lowest Common Ancestor of a Binary Tree IV', 'Medium')]"
1645,Hopper Company Queries II,Hard,7,29,2.4K,6K,39.2%,['Database'],"[('Hopper Company Queries I', 'Hard'), ('Hopper Company Queries III', 'Hard'), ('Trips and Users', 'Hard')]"
1646,Get Maximum in Generated Array,Easy,275,184,36.8K,70.1K,52.6%,"['Array', 'Dynamic Programming', 'Simulation']",[]
1647,Minimum Deletions to Make Character Frequencies Unique,Medium,17,561,36.3K,65K,55.8%,"['Greedy', 'Sorting', 'String']",[]
1648,Sell Diminishing-Valued Colored Balls,Medium,95,343,11.9K,37.8K,31.4%,"['Array', 'Binary Search', 'Greedy', 'Heap (Priority Queue)', 'Math', 'Sorting']",[]
1649,Create Sorted Array through Instructions,Hard,52,380,17.9K,48.5K,36.9%,"['Array', 'Binary Indexed Tree', 'Binary Search', 'Divide and Conquer', 'Merge Sort', 'Ordered Set', 'Segment Tree']",[]
1650,Lowest Common Ancestor of a Binary Tree III,Medium,9,270,29.8K,38.7K,77.0%,"['Binary Tree', 'Hash Table', 'Tree']","[('Lowest Common Ancestor of a Binary Search Tree', 'Easy'), ('Lowest Common Ancestor of a Binary Tree', 'Medium'), ('Lowest Common Ancestor of a Binary Tree II', 'Medium'), ('Lowest Common Ancestor of a Binary Tree IV', 'Medium')]"
1651,Hopper Company Queries III,Hard,17,14,2.4K,3.6K,67.5%,['Database'],"[('Hopper Company Queries I', 'Hard'), ('Hopper Company Queries II', 'Hard'), ('Trips and Users', 'Hard')]"
1652,Defuse the Bomb,Easy,34,277,16.9K,28K,60.4%,['Array'],[]
1653,Minimum Deletions to Make String Balanced,Medium,13,384,10.1K,19.3K,52.5%,"['Dynamic Programming', 'Stack', 'String']",[]
1654,Minimum Jumps to Reach Home,Medium,88,390,10.7K,43.3K,24.7%,"['Array', 'Breadth-First Search', 'Dynamic Programming']",[]
1655,Distribute Repeating Integers,Hard,13,137,5.4K,13.4K,40.2%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1656,Design an Ordered Stream,Easy,987,124,22.2K,26.9K,82.4%,"['Array', 'Data Stream', 'Design', 'Hash Table']",[]
1657,Determine if Two Strings Are Close,Medium,31,481,33.9K,61.8K,54.9%,"['Hash Table', 'Sorting', 'String']","[('Buddy Strings', 'Easy'), ('Minimum Number of Steps to Make Two Strings Anagram', 'Medium'), ('Minimum Swaps to Make Strings Equal', 'Medium')]"
1658,Minimum Operations to Reduce X to Zero,Medium,20,1018,35.7K,107.3K,33.3%,"['Array', 'Binary Search', 'Hash Table', 'Prefix Sum', 'Two Pointers']","[('Minimum Size Subarray Sum', 'Medium'), ('Subarray Sum Equals K', 'Medium')]"
1659,Maximize Grid Happiness,Hard,42,151,2.8K,7.9K,35.9%,"['Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Memoization']",[]
1660,Correct a Binary Tree,Medium,15,106,5.8K,7.7K,75.1%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']","[('Flatten Binary Tree to Linked List', 'Medium'), ('Flatten a Multilevel Doubly Linked List', 'Medium')]"
1661,Average Time of Process per Machine,Easy,19,53,8.7K,10.9K,79.5%,['Database'],[]
1662,Check If Two String Arrays are Equivalent,Easy,92,436,98.1K,119.6K,82.0%,"['Array', 'String']",[]
1663,Smallest String With A Given Numeric Value,Medium,16,447,33.3K,51.8K,64.2%,"['Greedy', 'String']",[]
1664,Ways to Make a Fair Array,Medium,16,540,17K,27.5K,62.0%,"['Array', 'Dynamic Programming']",[]
1665,Minimum Initial Energy to Finish Tasks,Hard,25,251,8.9K,16.2K,54.8%,"['Array', 'Greedy', 'Sorting']",[]
1666,Change the Root of a Binary Tree,Medium,86,37,1.7K,2.4K,69.5%,"['Binary Tree', 'Depth-First Search', 'Tree']",[]
1667,Fix Names in a Table,Easy,21,21,6.3K,10.2K,62.2%,['Database'],[]
1668,Maximum Repeating Substring,Easy,77,228,15.2K,39.2K,38.7%,"['String', 'String Matching']","[('Detect Pattern of Length M Repeated K or More Times', 'Easy')]"
1669,Merge In Between Linked Lists,Medium,79,452,29.7K,39.5K,75.0%,['Linked List'],[]
1670,Design Front Middle Back Queue,Medium,54,258,9.5K,17.5K,54.5%,"['Array', 'Data Stream', 'Design', 'Linked List', 'Queue']","[('Design Circular Deque', 'Medium'), ('Design Circular Queue', 'Medium')]"
1671,Minimum Number of Removals to Make Mountain Array,Hard,5,356,7.2K,16.2K,44.3%,"['Array', 'Binary Search', 'Dynamic Programming', 'Greedy']","[('Find in Mountain Array', 'Hard'), ('Longest Increasing Subsequence', 'Medium'), ('Longest Mountain in Array', 'Medium'), ('Peak Index in a Mountain Array', 'Easy'), ('Valid Mountain Array', 'Easy')]"
1672,Richest Customer Wealth,Easy,116,630,140.4K,159.3K,88.2%,"['Array', 'Matrix']",[]
1673,Find the Most Competitive Subsequence,Medium,48,891,33K,71.9K,45.9%,"['Array', 'Greedy', 'Monotonic Stack', 'Stack']","[('Remove K Digits', 'Medium'), ('Smallest Subsequence of Distinct Characters', 'Medium')]"
1674,Minimum Moves to Make Array Complementary,Medium,43,319,4.6K,12.6K,36.4%,"['Array', 'Hash Table', 'Prefix Sum']",[]
1675,Minimize Deviation in Array,Hard,19,436,16.5K,34.4K,48.1%,"['Array', 'Greedy', 'Heap (Priority Queue)', 'Ordered Set']",[]
1676,Lowest Common Ancestor of a Binary Tree IV,Medium,4,140,8.4K,10.6K,79.0%,"['Binary Tree', 'Depth-First Search', 'Tree']","[('Lowest Common Ancestor of Deepest Leaves', 'Medium'), ('Lowest Common Ancestor of a Binary Search Tree', 'Easy'), ('Lowest Common Ancestor of a Binary Tree', 'Medium'), ('Lowest Common Ancestor of a Binary Tree II', 'Medium'), ('Lowest Common Ancestor of a Binary Tree III', 'Medium'), ('Lowest Common Ancestor of a Binary Tree IV', 'Medium')]"
1678,Goal Parser Interpretation,Easy,43,359,63.7K,75K,84.9%,['String'],[]
1679,Max Number of K-Sum Pairs,Medium,20,463,40.2K,75K,53.6%,"['Array', 'Hash Table', 'Sorting', 'Two Pointers']","[('Count Good Meals', 'Medium'), ('Two Sum', 'Easy')]"
1680,Concatenation of Consecutive Binary Numbers,Medium,178,257,28.9K,55.3K,52.2%,"['Bit Manipulation', 'Math', 'Simulation']",[]
1681,Minimum Incompatibility,Hard,78,126,4.7K,13.3K,35.8%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1682,Longest Palindromic Subsequence II,Medium,13,59,2K,3.9K,50.7%,"['Dynamic Programming', 'String']","[('Longest Palindromic Subsequence', 'Medium')]"
1683,Invalid Tweets,Easy,45,42,11.8K,13K,90.8%,['Database'],[]
1684,Count the Number of Consistent Strings,Easy,29,397,51K,62.5K,81.6%,"['Array', 'Bit Manipulation', 'Hash Table', 'String']",[]
1685,Sum of Absolute Differences in a Sorted Array,Medium,13,408,12.8K,20.1K,63.7%,"['Array', 'Math', 'Prefix Sum']",[]
1686,Stone Game VI,Medium,17,292,7K,13.7K,51.3%,"['Array', 'Game Theory', 'Greedy', 'Heap (Priority Queue)', 'Math', 'Sorting']","[('Stone Game', 'Medium'), ('Stone Game II', 'Medium'), ('Stone Game III', 'Hard'), ('Stone Game IV', 'Hard'), ('Stone Game V', 'Hard'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1687,Delivering Boxes from Storage to Ports,Hard,12,160,2.6K,7.2K,36.0%,"['Array', 'Dynamic Programming', 'Heap (Priority Queue)', 'Monotonic Queue', 'Queue', 'Segment Tree']",[]
1688,Count of Matches in Tournament,Easy,83,379,48.2K,58.8K,81.9%,"['Math', 'Simulation']",[]
1689,Partitioning Into Minimum Number Of Deci-Binary Numbers,Medium,357,469,51.5K,58.4K,88.2%,"['Greedy', 'String']",[]
1690,Stone Game VII,Medium,111,494,22K,37.5K,58.6%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math']","[('Maximum Score from Performing Multiplication Operations', 'Medium'), ('Stone Game', 'Medium'), ('Stone Game II', 'Medium'), ('Stone Game III', 'Hard'), ('Stone Game IV', 'Hard'), ('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VIII', 'Hard')]"
1691,Maximum Height by Stacking Cuboids ,Hard,8,236,5.4K,10.6K,50.9%,"['Array', 'Dynamic Programming', 'Sorting']",[]
1692,Count Ways to Distribute Candies,Hard,5,30,1K,1.7K,60.1%,['Dynamic Programming'],[]
1693,Daily Leads and Partners,Easy,7,40,8.9K,9.8K,90.7%,['Database'],[]
1694,Reformat Phone Number,Easy,121,137,18.1K,28K,64.7%,['String'],[]
1695,Maximum Erasure Value,Medium,10,555,31.1K,59.4K,52.3%,"['Array', 'Hash Table', 'Sliding Window']","[('Longest Substring Without Repeating Characters', 'Medium')]"
1696,Jump Game VI,Medium,39,803,29.9K,71.1K,42.0%,"['Array', 'Dynamic Programming', 'Heap (Priority Queue)', 'Monotonic Queue', 'Queue', 'Sliding Window']","[('Jump Game VII', 'Medium'), ('Sliding Window Maximum', 'Hard')]"
1697,Checking Existence of Edge Length Limited Paths,Hard,6,326,6K,12.6K,48.0%,"['Array', 'Graph', 'Sorting', 'Union Find']","[('Checking Existence of Edge Length Limited Paths II', 'Hard')]"
1698,Number of Distinct Substrings in a String,Medium,12,57,2.4K,3.9K,60.8%,"['Hash Function', 'Rolling Hash', 'String', 'Suffix Array', 'Trie']",[]
1699,Number of Calls Between Two Persons,Medium,2,57,6.9K,8.1K,86.0%,['Database'],[]
1700,Number of Students Unable to Eat Lunch,Easy,27,360,19.7K,29.1K,67.7%,"['Array', 'Queue', 'Simulation', 'Stack']",[]
1701,Average Waiting Time,Medium,26,226,14.1K,23.2K,60.8%,"['Array', 'Simulation']",[]
1702,Maximum Binary String After Change,Medium,28,227,6.5K,14.9K,43.9%,"['Greedy', 'String']",[]
1703,Minimum Adjacent Swaps for K Consecutive Ones,Hard,9,254,3.5K,9.3K,37.3%,"['Array', 'Greedy', 'Prefix Sum', 'Sliding Window']","[(""Minimum Swaps to Group All 1's Together"", 'Medium')]"
1704,Determine if String Halves Are Alike,Easy,29,331,64.6K,82.2K,78.6%,"['Counting', 'String']",[]
1705,Maximum Number of Eaten Apples,Medium,131,338,10.7K,31.1K,34.6%,"['Array', 'Greedy', 'Heap (Priority Queue)']",[]
1706,Where Will the Ball Fall,Medium,32,389,13.7K,21.6K,63.2%,"['Array', 'Depth-First Search', 'Dynamic Programming', 'Matrix', 'Simulation']",[]
1707,Maximum XOR With an Element From Array,Hard,12,256,5.5K,13K,42.5%,"['Array', 'Bit Manipulation', 'Trie']","[('Maximum XOR of Two Numbers in an Array', 'Medium')]"
1708,Largest Subarray Length K,Easy,54,42,3.3K,5.1K,64.0%,"['Array', 'Greedy']",[]
1709,Biggest Window Between Visits,Medium,2,54,4.8K,5.9K,81.1%,['Database'],[]
1710,Maximum Units on a Truck,Easy,56,641,63.9K,88.1K,72.5%,"['Array', 'Greedy', 'Sorting']",[]
1711,Count Good Meals,Medium,150,321,16.8K,61.4K,27.3%,"['Array', 'Hash Table']","[('Max Number of K-Sum Pairs', 'Medium'), ('Two Sum', 'Easy')]"
1712,Ways to Split Array Into Three Subarrays,Medium,48,471,10.5K,36K,29.2%,"['Array', 'Binary Search', 'Prefix Sum', 'Two Pointers']",[]
1713,Minimum Operations to Make a Subsequence,Hard,4,277,4.6K,10.1K,46.1%,"['Array', 'Binary Search', 'Greedy', 'Hash Table']",[]
1714,Sum Of Special Evenly-Spaced Elements In Array,Hard,12,12,659,1.3K,50.6%,"['Array', 'Dynamic Programming']",[]
1715,Count Apples and Oranges,Medium,5,32,4.5K,5.7K,78.5%,['Database'],[]
1716,Calculate Money in Leetcode Bank,Easy,10,313,21.6K,33.7K,64.1%,['Math'],[]
1717,Maximum Score From Removing Substrings,Medium,16,255,6.5K,15.5K,42.1%,"['Greedy', 'Stack', 'String']",[]
1718,Construct the Lexicographically Largest Valid Sequence,Medium,23,270,6.1K,12.6K,48.9%,"['Array', 'Backtracking']",[]
1719,Number Of Ways To Reconstruct A Tree,Hard,62,81,1.8K,4.5K,39.9%,"['Graph', 'Topological Sort', 'Tree']",[]
1720,Decode XORed Array,Easy,56,341,37.8K,44.2K,85.6%,"['Array', 'Bit Manipulation']",[]
1721,Swapping Nodes in a Linked List,Medium,48,747,60.1K,90.4K,66.5%,"['Linked List', 'Two Pointers']","[('Remove Nth Node From End of List', 'Medium'), ('Reverse Nodes in k-Group', 'Hard'), ('Swap Nodes in Pairs', 'Medium')]"
1722,Minimize Hamming Distance After Swap Operations,Medium,11,404,8.9K,19.3K,46.1%,"['Array', 'Depth-First Search', 'Union Find']","[('Smallest String With Swaps', 'Medium')]"
1723,Find Minimum Time to Finish All Jobs,Hard,12,285,8.7K,21.3K,40.7%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1724,Checking Existence of Edge Length Limited Paths II,Hard,4,25,1.1K,2K,56.5%,"['Graph', 'Minimum Spanning Tree', 'Union Find']","[('Checking Existence of Edge Length Limited Paths', 'Hard')]"
1725,Number Of Rectangles That Can Form The Largest Square,Easy,26,209,27.5K,35.2K,78.3%,['Array'],[]
1726,Tuple with Same Product,Medium,14,286,14.3K,24.3K,58.8%,"['Array', 'Hash Table']",[]
1727,Largest Submatrix With Rearrangements,Medium,13,442,8.7K,14.7K,59.5%,"['Array', 'Greedy', 'Matrix', 'Sorting']","[('Max Area of Island', 'Medium')]"
1728,Cat and Mouse II,Hard,19,89,3.4K,8.2K,41.1%,"['Breadth-First Search', 'Dynamic Programming', 'Game Theory', 'Graph', 'Math', 'Memoization']","[('Cat and Mouse', 'Hard'), ('Escape The Ghosts', 'Medium')]"
1729,Find Followers Count,Easy,6,25,5.7K,8.1K,70.6%,['Database'],[]
1730,Shortest Path to Get Food,Medium,7,123,6.6K,12.1K,54.8%,"['Array', 'Breadth-First Search', 'Matrix']","[('01 Matrix', 'Medium'), ('Shortest Path in a Grid with Obstacles Elimination', 'Hard')]"
1731,The Number of Employees Which Report to Each Employee,Easy,8,36,4.8K,9.8K,49.1%,['Database'],[]
1732,Find the Highest Altitude,Easy,42,378,42.3K,53.4K,79.2%,"['Array', 'Prefix Sum']",[]
1733,Minimum Number of People to Teach,Medium,254,96,4.6K,11.9K,38.7%,"['Array', 'Greedy']",[]
1734,Decode XORed Permutation,Medium,12,338,6.7K,11.7K,57.2%,"['Array', 'Bit Manipulation']",[]
1735,Count Ways to Make Array With Product,Hard,21,104,2.5K,5.1K,48.7%,"['Array', 'Dynamic Programming', 'Math']",[]
1736,Latest Time by Replacing Hidden Digits,Easy,79,136,16.5K,40K,41.4%,['String'],[]
1737,Change Minimum Characters to Satisfy One of Three Conditions,Medium,201,168,6.6K,21.7K,30.6%,"['Counting', 'Hash Table', 'Prefix Sum', 'String']",[]
1738,Find Kth Largest XOR Coordinate Value,Medium,28,164,9.9K,15.9K,62.6%,"['Array', 'Bit Manipulation', 'Divide and Conquer', 'Heap (Priority Queue)', 'Matrix', 'Prefix Sum', 'Quickselect']",[]
1739,Building Boxes,Hard,26,154,3.9K,7.8K,50.3%,"['Binary Search', 'Greedy', 'Math']",[]
1740,Find Distance in a Binary Tree,Medium,7,119,5.1K,7.3K,69.0%,"['Binary Tree', 'Breadth-First Search', 'Depth-First Search', 'Hash Table', 'Tree']",[]
1741,Find Total Time Spent by Each Employee,Easy,3,47,9.3K,10.2K,90.9%,['Database'],[]
1742,Maximum Number of Balls in a Box,Easy,58,227,26.9K,36.7K,73.3%,"['Counting', 'Hash Table', 'Math']",[]
1743,Restore the Array From Adjacent Pairs,Medium,4,328,13.3K,20.4K,65.2%,"['Array', 'Hash Table']",[]
1744,Can You Eat Your Favorite Candy on Your Favorite Day?,Medium,212,65,6.6K,21K,31.4%,"['Array', 'Prefix Sum']",[]
1745,Palindrome Partitioning IV,Hard,8,279,9.7K,19.4K,49.8%,"['Dynamic Programming', 'String']","[('Palindrome Partitioning', 'Medium'), ('Palindrome Partitioning II', 'Hard'), ('Palindrome Partitioning III', 'Hard')]"
1746,Maximum Subarray Sum After One Operation,Medium,0,93,1.7K,2.8K,61.2%,"['Array', 'Dynamic Programming']","[('Maximum Subarray', 'Easy')]"
1747,Leetflex Banned Accounts,Medium,0,38,3.7K,5.4K,68.6%,['Database'],[]
1748,Sum of Unique Elements,Easy,12,401,42.6K,57K,74.6%,"['Array', 'Counting', 'Hash Table']",[]
1749,Maximum Absolute Sum of Any Subarray,Medium,8,353,11.6K,21.5K,54.1%,"['Array', 'Dynamic Programming']","[('Maximum Subarray', 'Easy')]"
1750,Minimum Length of String After Deleting Similar Ends,Medium,13,153,9.4K,22.2K,42.4%,"['String', 'Two Pointers']",[]
1751,Maximum Number of Events That Can Be Attended II,Hard,4,242,6.3K,12.9K,49.4%,"['Array', 'Binary Search', 'Dynamic Programming']","[('Maximum Number of Events That Can Be Attended', 'Medium')]"
1752,Check if Array Is Sorted and Rotated,Easy,37,256,19K,42.5K,44.7%,['Array'],[]
1753,Maximum Score From Removing Stones,Medium,24,256,14K,22.2K,63.1%,"['Greedy', 'Heap (Priority Queue)', 'Math']",[]
1754,Largest Merge Of Two Strings,Medium,40,232,10.6K,25.4K,41.9%,"['Greedy', 'String', 'Two Pointers']",[]
1755,Closest Subsequence Sum,Hard,44,239,5.3K,15.4K,34.4%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Two Pointers']",[]
1756,Design Most Recently Used Queue,Medium,3,76,2.7K,3.4K,78.3%,"['Array', 'Design', 'Hash Table', 'Ordered Set', 'Stack']","[('LRU Cache', 'Medium')]"
1757,Recyclable and Low Fat Products,Easy,31,49,14.6K,15.3K,95.3%,['Database'],[]
1758,Minimum Changes To Make Alternating Binary String,Easy,7,276,18.9K,32.4K,58.4%,['String'],[]
1759,Count Number of Homogenous Substrings,Medium,22,211,12.4K,28.2K,43.8%,"['Math', 'String']","[('Consecutive Characters', 'Easy'), ('Number of Substrings With Only 1s', 'Medium')]"
1760,Minimum Limit of Balls in a Bag,Medium,26,533,10.1K,18.7K,54.0%,"['Array', 'Binary Search']",[]
1761,Minimum Degree of a Connected Trio in a Graph,Hard,129,79,7.5K,19.3K,39.0%,['Graph'],[]
1762,Buildings With an Ocean View,Medium,29,172,16K,19.6K,81.3%,"['Array', 'Monotonic Stack', 'Stack']",[]
1763,Longest Nice Substring,Easy,208,204,11.6K,19K,61.2%,"['Bit Manipulation', 'Hash Table', 'Sliding Window', 'String']",[]
1764,Form Array by Concatenating Subarrays of Another Array,Medium,18,135,8.1K,15.1K,53.4%,"['Array', 'Greedy', 'String Matching']",[]
1765,Map of Highest Peak,Medium,26,313,9.9K,17.3K,57.4%,"['Array', 'Breadth-First Search', 'Matrix']",[]
1766,Tree of Coprimes,Hard,13,159,3.7K,10K,36.6%,"['Breadth-First Search', 'Depth-First Search', 'Math', 'Tree']",[]
1767,Find the Subtasks That Did Not Execute,Hard,3,44,2.1K,2.4K,86.6%,['Database'],[]
1768,Merge Strings Alternately,Easy,5,259,30.2K,40.7K,74.2%,"['String', 'Two Pointers']","[('Zigzag Iterator', 'Medium')]"
1769,Minimum Number of Operations to Move All Balls to Each Box,Medium,30,676,40.7K,47.4K,85.8%,"['Array', 'String']","[('Minimum Cost to Move Chips to The Same Position', 'Easy')]"
1770,Maximum Score from Performing Multiplication Operations,Medium,87,330,10.8K,35.2K,30.6%,"['Array', 'Dynamic Programming']","[('Stone Game VII', 'Medium')]"
1771,Maximize Palindrome Length From Subsequences,Hard,6,240,5.6K,16.1K,34.4%,"['Dynamic Programming', 'String']","[('Longest Palindromic Subsequence', 'Medium')]"
1772,Sort Features by Popularity,Medium,19,27,2K,3K,65.7%,"['Array', 'Hash Table', 'Sorting', 'String']","[('Top K Frequent Elements', 'Medium'), ('Top K Frequent Words', 'Medium')]"
1773,Count Items Matching a Rule,Easy,57,349,55.1K,65.1K,84.6%,"['Array', 'String']",[]
1774,Closest Dessert Cost,Medium,28,233,9.9K,22K,45.2%,"['Array', 'Backtracking', 'Dynamic Programming']",[]
1775,Equal Sum Arrays With Minimum Number of Operations,Medium,8,288,9K,17.7K,50.6%,"['Array', 'Counting', 'Greedy', 'Hash Table']","[('Number of Dice Rolls With Target Sum', 'Medium')]"
1776,Car Fleet II,Hard,6,289,8.8K,17.6K,49.8%,"['Array', 'Heap (Priority Queue)', 'Math', 'Monotonic Stack', 'Stack']","[('Car Fleet', 'Medium')]"
1778,Shortest Path in a Hidden Grid,Medium,31,63,2.2K,4.8K,45.1%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Interactive']","[('Minimum Path Cost in a Hidden Grid', 'Medium'), ('Robot Room Cleaner', 'Hard')]"
1779,Find Nearest Point That Has the Same X or Y Coordinate,Easy,26,119,15.8K,23.6K,66.7%,['Array'],"[('K Closest Points to Origin', 'Medium')]"
1780,Check if Number is a Sum of Powers of Three,Medium,15,341,14.5K,22.9K,63.3%,['Math'],"[('Power of Three', 'Easy')]"
1781,Sum of Beauty of All Substrings,Medium,66,179,9.4K,16.1K,58.6%,"['Counting', 'Hash Table', 'String']",[]
1782,Count Pairs Of Nodes,Hard,105,138,3.1K,8.9K,35.2%,"['Binary Search', 'Graph', 'Two Pointers']",[]
1783,Grand Slam Titles,Medium,0,54,4.8K,5.2K,90.6%,['Database'],[]
1784,Check if Binary String Has at Most One Segment of Ones,Easy,299,105,16.6K,40.3K,41.2%,['String'],"[('Longer Contiguous Segments of Ones than Zeros', 'Easy')]"
1785,Minimum Elements to Add to Form a Given Sum,Medium,112,102,11K,27.3K,40.2%,"['Array', 'Greedy']",[]
1786,Number of Restricted Paths From First to Last Node,Medium,57,329,7.8K,21.2K,36.6%,"['Dynamic Programming', 'Graph', 'Heap (Priority Queue)', 'Shortest Path', 'Topological Sort']",[]
1787,Make the XOR of All Segments Equal to Zero,Hard,8,185,2.6K,6.9K,37.4%,"['Array', 'Bit Manipulation', 'Dynamic Programming']",[]
1788,Maximize the Beauty of the Garden,Hard,4,24,894,1.3K,67.4%,"['Array', 'Greedy', 'Prefix Sum']",[]
1789,Primary Department for Each Employee,Easy,14,30,3.8K,4.8K,79.5%,['Database'],[]
1790,Check if One String Swap Can Make Strings Equal,Easy,9,194,18.7K,42.1K,44.5%,"['Counting', 'Hash Table', 'String']","[('Buddy Strings', 'Easy')]"
1791,Find Center of Star Graph,Easy,13,58,33.3K,39.5K,84.3%,['Graph'],[]
1792,Maximum Average Pass Ratio,Medium,44,322,9.7K,20.4K,47.8%,"['Array', 'Greedy', 'Heap (Priority Queue)']",[]
1793,Maximum Score of a Good Subarray,Hard,17,303,7.5K,15.6K,48.3%,"['Array', 'Monotonic Stack', 'Stack', 'Two Pointers']","[('Largest Rectangle in Histogram', 'Hard')]"
1794,Count Pairs of Equal Substrings With Minimum Difference,Medium,25,19,849,1.2K,68.2%,"['Greedy', 'Hash Table', 'String']",[]
1795,Rearrange Products Table,Easy,2,39,4.7K,5.2K,89.7%,['Database'],"[(""Product's Price for Each Store"", 'Easy')]"
1796,Second Largest Digit in a String,Easy,51,121,14.7K,30.4K,48.2%,"['Hash Table', 'String']",[]
1797,Design Authentication Manager,Medium,19,101,6.9K,13.8K,50.2%,"['Design', 'Hash Table']",[]
1798,Maximum Number of Consecutive Values You Can Make,Medium,26,296,6.3K,13.3K,47.0%,"['Array', 'Greedy']","[('Patching Array', 'Hard')]"
1799,Maximize Score After N Operations,Hard,12,191,6.4K,14.2K,45.2%,"['Array', 'Backtracking', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Math', 'Number Theory']",[]
1800,Maximum Ascending Subarray Sum,Easy,7,226,19.5K,30.3K,64.3%,['Array'],[]
1801,Number of Orders in the Backlog,Medium,139,106,7.1K,15.9K,44.6%,"['Array', 'Heap (Priority Queue)', 'Simulation']",[]
1802,Maximum Value at a Given Index in a Bounded Array,Medium,49,301,6.9K,24.4K,28.4%,"['Binary Search', 'Greedy']",[]
1803,Count Pairs With XOR in a Range,Hard,8,162,3.3K,7.4K,44.1%,"['Array', 'Bit Manipulation', 'Trie']",[]
1804,Implement Trie II (Prefix Tree),Medium,6,63,2.3K,3.9K,58.1%,"['Design', 'Hash Table', 'String', 'Trie']","[('Implement Trie (Prefix Tree)', 'Medium')]"
1805,Number of Different Integers in a String,Easy,36,186,16.1K,46.4K,34.8%,"['Hash Table', 'String']",[]
1806,Minimum Number of Operations to Reinitialize a Permutation,Medium,85,130,10.2K,14.4K,70.6%,"['Array', 'Math', 'Simulation']",[]
1807,Evaluate the Bracket Pairs of a String,Medium,20,166,12.4K,18.7K,66.2%,"['Array', 'Hash Table', 'String']",[]
1808,Maximize Number of Nice Divisors,Hard,120,111,3.7K,13.2K,28.3%,"['Math', 'Recursion']","[('Integer Break', 'Medium')]"
1809,Ad-Free Sessions,Easy,9,22,3.6K,5.7K,62.4%,['Database'],[]
1810,Minimum Path Cost in a Hidden Grid,Medium,12,32,969,1.8K,54.3%,"['Breadth-First Search', 'Depth-First Search', 'Graph', 'Heap (Priority Queue)', 'Interactive']","[('Robot Room Cleaner', 'Hard'), ('Shortest Path in a Hidden Grid', 'Medium')]"
1811,Find Interview Candidates,Medium,5,42,2.3K,3.5K,67.3%,['Database'],[]
1812,Determine Color of a Chessboard Square,Easy,8,209,20.4K,26.4K,77.1%,"['Math', 'String']",[]
1813,Sentence Similarity III,Medium,28,132,6.3K,19.9K,31.8%,"['Array', 'String', 'Two Pointers']",[]
1814,Count Nice Pairs in an Array,Medium,13,258,9K,22.9K,39.4%,"['Array', 'Counting', 'Hash Table', 'Math']",[]
1815,Maximum Number of Groups Getting Fresh Donuts,Hard,9,157,3.1K,7.9K,39.3%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming', 'Memoization']",[]
1816,Truncate Sentence,Easy,6,229,29.9K,37.3K,80.1%,"['Array', 'String']",[]
1817,Finding the Users Active Minutes,Medium,66,174,15.2K,19.4K,78.5%,"['Array', 'Hash Table']",[]
1818,Minimum Absolute Sum Difference,Medium,33,237,8.6K,30.5K,28.3%,"['Array', 'Binary Search', 'Greedy', 'Ordered Set']",[]
1819,Number of Different Subsequences GCDs,Hard,33,182,4.3K,12.3K,34.8%,"['Array', 'Counting', 'Math', 'Number Theory']",[]
1820,Maximum Number of Accepted Invitations,Medium,10,37,658,1.4K,47.3%,"['Array', 'Backtracking', 'Matrix']",[]
1821,Find Customers With Positive Revenue this Year,Easy,9,9,4K,4.5K,89.5%,['Database'],[]
1822,Sign of the Product of an Array,Easy,27,189,31.9K,49.3K,64.7%,"['Array', 'Math']",[]
1823,Find the Winner of the Circular Game,Medium,10,302,15.2K,21K,72.5%,"['Array', 'Math', 'Queue', 'Recursion', 'Simulation']",[]
1824,Minimum Sideway Jumps,Medium,18,363,10.8K,22.6K,47.8%,"['Array', 'Dynamic Programming', 'Greedy']","[('Frog Jump', 'Hard')]"
1825,Finding MK Average,Hard,69,129,4.1K,14.2K,28.8%,"['Design', 'Heap (Priority Queue)', 'Ordered Set', 'Queue']","[('Find Median from Data Stream', 'Hard'), ('Kth Largest Element in a Stream', 'Easy')]"
1826,Faulty Sensor,Easy,12,29,1.4K,2.6K,53.6%,"['Array', 'Two Pointers']",[]
1827,Minimum Operations to Make the Array Increasing,Easy,9,266,22.1K,28.4K,77.9%,"['Array', 'Greedy']",[]
1828,Queries on Number of Points Inside a Circle,Medium,28,201,17.2K,19.9K,86.7%,"['Array', 'Geometry', 'Math']",[]
1829,Maximum XOR for Each Query,Medium,11,184,9K,12.2K,74.0%,"['Array', 'Bit Manipulation', 'Prefix Sum']",[]
1830,Minimum Number of Operations to Make String Sorted,Hard,75,92,1.7K,3.7K,46.8%,"['Combinatorics', 'Math', 'String']",[]
1831,Maximum Transaction Each Day,Medium,0,14,2.5K,3K,85.0%,['Database'],[]
1832,Check if the Sentence Is Pangram,Easy,7,254,39.5K,48K,82.4%,"['Hash Table', 'String']",[]
1833,Maximum Ice Cream Bars,Medium,84,194,23.3K,36.5K,63.9%,"['Array', 'Greedy', 'Sorting']",[]
1834,Single-Threaded CPU,Medium,68,396,11.2K,32.4K,34.4%,"['Array', 'Heap (Priority Queue)', 'Sorting']",[]
1835,Find XOR Sum of All Pairs Bitwise AND,Hard,25,201,7.7K,13.5K,56.9%,"['Array', 'Bit Manipulation', 'Math']",[]
1836,Remove Duplicates From an Unsorted Linked List,Medium,4,58,3.2K,4.6K,70.7%,"['Hash Table', 'Linked List']","[('Remove Duplicates from Sorted List', 'Easy'), ('Remove Duplicates from Sorted List II', 'Medium')]"
1837,Sum of Digits in Base K,Easy,14,166,18.6K,24.8K,74.9%,['Math'],[]
1838,Frequency of the Most Frequent Element,Medium,8,489,10K,30.1K,33.4%,"['Array', 'Binary Search', 'Greedy', 'Prefix Sum', 'Sliding Window', 'Sorting']",[]
1839,Longest Substring Of All Vowels in Order,Medium,10,222,12.4K,26.3K,47.2%,"['Sliding Window', 'String']",[]
1840,Maximum Building Height,Hard,8,184,3.7K,10.9K,34.4%,"['Array', 'Math']",[]
1841,League Statistics,Medium,9,17,1.5K,2.5K,61.8%,['Database'],[]
1842,Next Palindrome Using Same Digits,Hard,1,18,591,927,63.8%,"['String', 'Two Pointers']","[('Find the Closest Palindrome', 'Hard'), ('Next Greater Element III', 'Medium')]"
1843,Suspicious Bank Accounts,Medium,12,22,1.7K,3.3K,52.1%,['Database'],[]
1844,Replace All Digits with Characters,Easy,25,182,20.5K,25.6K,80.1%,['String'],"[('Shifting Letters', 'Medium')]"
1845,Seat Reservation Manager,Medium,15,160,11.1K,19.9K,55.8%,"['Design', 'Heap (Priority Queue)']","[('Design Phone Directory', 'Medium')]"
1846,Maximum Element After Decreasing and Rearranging,Medium,25,107,8.5K,15.5K,54.8%,"['Array', 'Greedy', 'Sorting']",[]
1847,Closest Room,Hard,9,221,4K,12.7K,31.7%,"['Array', 'Binary Search', 'Sorting']",[]
1848,Minimum Distance to the Target Element,Easy,21,101,16.6K,27.7K,60.0%,['Array'],[]
1849,Splitting a String Into Descending Consecutive Values,Medium,67,200,8.8K,32K,27.6%,"['Backtracking', 'String']",[]
1850,Minimum Adjacent Swaps to Reach the Kth Smallest Number,Medium,32,205,5.8K,9K,64.1%,"['Greedy', 'String', 'Two Pointers']","[('Next Permutation', 'Medium')]"
1851,Minimum Interval to Include Each Query,Hard,2,239,4.4K,10.2K,43.3%,"['Array', 'Binary Search', 'Heap (Priority Queue)', 'Line Sweep', 'Sorting']",[]
1852,Distinct Numbers in Each Subarray,Medium,1,38,1.6K,2.2K,76.0%,"['Array', 'Hash Table', 'Sliding Window']",[]
1853,Convert Date Format,Easy,16,13,2.4K,2.7K,88.9%,['Database'],[]
1854,Maximum Population Year,Easy,38,240,15.5K,27.1K,57.3%,"['Array', 'Counting']",[]
1855,Maximum Distance Between a Pair of Values,Medium,6,285,12.4K,26.9K,46.1%,"['Array', 'Binary Search', 'Greedy', 'Two Pointers']",[]
1856,Maximum Subarray Min-Product,Medium,23,476,7.2K,21.5K,33.5%,"['Array', 'Monotonic Stack', 'Prefix Sum', 'Stack']",[]
1857,Largest Color Value in a Directed Graph,Hard,9,239,5.3K,14.2K,37.4%,"['Counting', 'Dynamic Programming', 'Graph', 'Hash Table', 'Memoization', 'Topological Sort']",[]
1858,Longest Word With All Prefixes,Medium,1,39,1.4K,2.1K,67.4%,"['Depth-First Search', 'Trie']","[('Longest Word in Dictionary', 'Medium')]"
1859,Sorting the Sentence,Easy,10,295,22.7K,27.4K,82.7%,"['Sorting', 'String']",[]
1860,Incremental Memory Leak,Medium,39,88,8.9K,12.8K,69.4%,['Simulation'],[]
1861,Rotating the Box,Medium,16,240,9.2K,14.8K,62.2%,"['Array', 'Matrix', 'Two Pointers']",[]
1862,Sum of Floored Pairs,Hard,19,201,4.2K,15.7K,27.0%,"['Array', 'Binary Search', 'Math', 'Prefix Sum']",[]
1863,Sum of All Subset XOR Totals,Easy,36,317,16.8K,21.6K,77.8%,"['Array', 'Backtracking', 'Bit Manipulation']",[]
1864,Minimum Number of Swaps to Make the Binary String Alternating,Medium,20,186,9K,24.6K,36.5%,"['Greedy', 'String']",[]
1865,Finding Pairs With a Certain Sum,Medium,56,153,9.1K,19.7K,46.0%,"['Array', 'Design', 'Hash Table']",[]
1866,Number of Ways to Rearrange Sticks With K Sticks Visible,Hard,6,296,5.2K,9.6K,54.1%,"['Combinatorics', 'Dynamic Programming', 'Math']",[]
1867,Orders With Maximum Quantity Above Average,Medium,19,12,1.7K,2.2K,79.8%,['Database'],[]
1868,Product of Two Run-Length Encoded Arrays,Medium,2,22,744,1.3K,58.5%,"['Array', 'Two Pointers']",[]
1869,Longer Contiguous Segments of Ones than Zeros,Easy,6,155,18.9K,31.7K,59.6%,['String'],"[('Check if Binary String Has at Most One Segment of Ones', 'Easy'), ('Max Consecutive Ones', 'Easy')]"
1870,Minimum Speed to Arrive on Time,Medium,60,245,10.3K,31.6K,32.6%,"['Array', 'Binary Search']","[('Minimum Skips to Arrive at Meeting On Time', 'Hard')]"
1871,Jump Game VII,Medium,25,405,11.3K,46.6K,24.2%,"['Prefix Sum', 'String', 'Two Pointers']","[('Jump Game', 'Medium'), ('Jump Game II', 'Medium'), ('Jump Game III', 'Medium'), ('Jump Game IV', 'Hard'), ('Jump Game V', 'Hard'), ('Jump Game VI', 'Medium'), ('Jump Game VII', 'Medium')]"
1872,Stone Game VIII,Hard,8,168,3.4K,6.7K,51.2%,"['Array', 'Dynamic Programming', 'Game Theory', 'Math', 'Prefix Sum']","[('Stone Game', 'Medium'), ('Stone Game II', 'Medium'), ('Stone Game III', 'Hard'), ('Stone Game IV', 'Hard'), ('Stone Game V', 'Hard'), ('Stone Game VI', 'Medium'), ('Stone Game VII', 'Medium'), ('Stone Game VIII', 'Hard')]"
1873,Calculate Special Bonus,Easy,1,22,2.7K,3K,90.7%,['Database'],[]
1874,Minimize Product Sum of Two Arrays,Medium,4,33,2K,2.2K,91.0%,"['Array', 'Greedy', 'Sorting']",[]
1875,Group Employees of the Same Salary,Medium,1,13,1.4K,1.9K,75.0%,['Database'],[]
1876,Substrings of Size Three with Distinct Characters,Easy,10,169,15.4K,22.6K,67.9%,"['Counting', 'Hash Table', 'Sliding Window', 'String']",[]
1877,Minimize Maximum Pair Sum in Array,Medium,41,182,15.2K,19.3K,78.7%,"['Array', 'Greedy', 'Sorting', 'Two Pointers']",[]
1878,Get Biggest Three Rhombus Sums in a Grid,Medium,194,89,5K,11.4K,43.4%,"['Array', 'Heap (Priority Queue)', 'Math', 'Matrix', 'Prefix Sum', 'Sorting']",[]
1879,Minimum XOR Sum of Two Arrays,Hard,6,236,4.7K,13K,36.1%,"['Array', 'Bit Manipulation', 'Bitmask', 'Dynamic Programming']",[]
1880,Check if Word Equals Summation of Two Words,Easy,14,200,28.2K,39.3K,71.8%,['String'],[]
1881,Maximum Value after Insertion,Medium,30,138,12.1K,35.7K,33.9%,"['Greedy', 'String']",[]
1882,Process Tasks Using Servers,Medium,109,314,7.5K,24.3K,30.8%,"['Array', 'Heap (Priority Queue)']",[]
1883,Minimum Skips to Arrive at Meeting On Time,Hard,35,132,3.3K,8.7K,38.3%,"['Array', 'Dynamic Programming']","[('Minimum Speed to Arrive on Time', 'Medium')]"
1884,Egg Drop With 2 Eggs and N Floors,Medium,15,224,5.1K,7.2K,70.4%,"['Dynamic Programming', 'Math']","[('Super Egg Drop', 'Hard')]"
1885,Count Pairs in Two Arrays,Medium,3,33,788,1.4K,55.7%,"['Array', 'Binary Search', 'Sorting']","[('Max Value of Equation', 'Hard')]"
1886,Determine Whether Matrix Can Be Obtained By Rotation,Easy,24,180,13.1K,24.3K,54.0%,"['Array', 'Matrix']","[('Rotate Image', 'Medium')]"
1887,Reduction Operations to Make the Array Elements Equal,Medium,11,187,12K,20.1K,59.9%,"['Array', 'Sorting']",[]
1888,Minimum Number of Flips to Make the Binary String Alternating,Medium,16,388,7.5K,22.1K,34.1%,"['Greedy', 'String']",[]
1889,Minimum Space Wasted From Packaging,Hard,20,165,4.8K,16.6K,29.0%,"['Array', 'Binary Search', 'Prefix Sum', 'Sorting']",[]
1890,The Latest Login in 2020,Easy,0,9,1.6K,1.8K,85.4%,['Database'],[]
1891,Cutting Ribbons,Medium,3,31,1.8K,3.3K,52.6%,"['Array', 'Binary Search']","[('Capacity To Ship Packages Within D Days', 'Medium')]"
1892,Page Recommendations II,Hard,1,14,622,1.4K,43.0%,['Database'],"[('Page Recommendations', 'Medium')]"
1893,Check if All the Integers in a Range Are Covered,Easy,25,109,11.8K,23.7K,49.7%,"['Array', 'Hash Table', 'Prefix Sum']",[]
1894,Find the Student that Will Replace the Chalk,Medium,18,124,10.6K,27.3K,38.8%,"['Array', 'Binary Search', 'Prefix Sum', 'Simulation']",[]
1895,Largest Magic Square,Medium,159,131,5.5K,11.1K,49.5%,"['Array', 'Matrix', 'Prefix Sum']","[('Magic Squares In Grid', 'Medium')]"
1896,Minimum Cost to Change the Final Value of Expression,Hard,28,89,1.7K,3.3K,51.7%,"['Dynamic Programming', 'Math', 'Stack', 'String']",[]
1897,Redistribute Characters to Make All Strings Equal,Easy,22,134,13.8K,23.4K,59.0%,"['Counting', 'Hash Table', 'String']",[]
1898,Maximum Number of Removable Characters,Medium,57,372,8.4K,25.8K,32.7%,"['Array', 'Binary Search', 'String']",[]
1899,Merge Triplets to Form Target Triplet,Medium,17,166,9.2K,15.5K,59.1%,"['Array', 'Greedy']",[]
1900,The Earliest and Latest Rounds Where Players Compete,Hard,11,119,2.8K,5.8K,49.3%,"['Dynamic Programming', 'Memoization']",[]
1901,Find a Peak Element II,Medium,17,132,2.7K,4.2K,64.1%,"['Array', 'Binary Search', 'Divide and Conquer', 'Matrix']","[('Find Peak Element', 'Medium')]"
1902,Depth of BST Given Insertion Order,Medium,0,27,585,1.1K,51.1%,"['Binary Search Tree', 'Binary Tree', 'Ordered Set', 'Tree']",[]
1903,Largest Odd Number in String,Easy,14,152,16.2K,27.9K,57.9%,"['Greedy', 'Math', 'String']",[]
1904,The Number of Full Rounds You Have Played,Medium,168,115,13K,25.5K,50.9%,"['Math', 'String']",[]
1905,Count Sub Islands,Medium,13,291,9.8K,16.2K,60.6%,"['Array', 'Breadth-First Search', 'Depth-First Search', 'Matrix', 'Union Find']","[('Number of Distinct Islands', 'Medium'), ('Number of Islands', 'Medium')]"
1906,Minimum Absolute Difference Queries,Medium,21,227,5.3K,12.6K,41.8%,"['Array', 'Hash Table']",[]
1907,Count Salary Categories,Medium,7,10,549,825,66.5%,['Database'],"[('Create a Session Bar Chart', 'Easy')]"
1908,Game of Nim,Medium,8,5,294,457,64.3%,"['Array', 'Bit Manipulation', 'Brainteaser', 'Dynamic Programming', 'Game Theory', 'Math']",[]
1909,Remove One Element to Make the Array Strictly Increasing,Easy,117,152,9.9K,31.4K,31.5%,['Array'],[]
1910,Remove All Occurrences of a Substring,Medium,18,162,10K,13.5K,74.1%,['String'],[]
1911,Maximum Alternating Subsequence Sum,Medium,4,285,6.9K,11.9K,57.7%,"['Array', 'Dynamic Programming']",[]
1912,Design Movie Rental System,Hard,22,92,2.4K,5.9K,41.8%,"['Array', 'Design', 'Hash Table', 'Heap (Priority Queue)', 'Ordered Set']",[]
1913,Maximum Product Difference Between Two Pairs,Easy,4,103,17.6K,21.1K,83.6%,"['Array', 'Sorting']",[]
1914,Cyclically Rotating a Grid,Medium,186,107,6.3K,14.4K,43.5%,"['Array', 'Matrix', 'Simulation']",[]
1915,Number of Wonderful Substrings,Medium,28,345,4.3K,11.5K,37.2%,"['Bit Manipulation', 'Hash Table', 'Prefix Sum', 'String']",[]
1916,Count Ways to Build Rooms in an Ant Colony,Hard,21,128,2.3K,4.5K,50.5%,"['Combinatorics', 'Dynamic Programming', 'Graph', 'Math', 'Topological Sort', 'Tree']",[]
1917,Leetcodify Friends Recommendations,Hard,5,5,301,870,34.6%,['Database'],"[('Leetcodify Similar Friends', 'Hard')]"
1918,Kth Smallest Subarray Sum,Medium,1,31,439,766,57.3%,"['Array', 'Binary Search', 'Sliding Window']",[]
1919,Leetcodify Similar Friends,Hard,2,3,219,411,53.3%,['Database'],"[('Leetcodify Friends Recommendations', 'Hard')]"
1920,Build Array from Permutation,Easy,20,90,15.7K,16.5K,95.1%,"['Array', 'Simulation']",[]
1921,Eliminate Maximum Number of Monsters,Medium,40,176,9.8K,26.5K,37.0%,"['Array', 'Greedy', 'Sorting']",[]
1922,Count Good Numbers,Medium,128,133,8.4K,21.6K,38.9%,"['Math', 'Recursion']",[]
1923,Longest Common Subpath,Hard,17,137,2.4K,9.2K,26.4%,"['Array', 'Binary Search', 'Hash Function', 'Rolling Hash', 'Suffix Array']","[('Reconstruct Itinerary', 'Medium')]"
1924,Erect the Fence II,Hard,8,0,129,201,64.2%,[],"[('Erect the Fence', 'Hard')]"